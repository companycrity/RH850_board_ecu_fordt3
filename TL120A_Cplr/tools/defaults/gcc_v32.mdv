#
#            Debugger STL Visualization Script
#
#    Copyright (c) 2001-2002 Green Hills Software, Inc.
#
#    This program is the property of Green Hills Software, Inc,
#    its contents are proprietary information and no part of it
#    is to be disclosed to anyone except employees of Green Hills
#    Software, Inc., or as agreed in writing signed by the President
#    of Green Hills Software, Inc.
#

tree {
    signature = {"set<*>", "std::set<*>", "map<*>", "std::map<*>"}
    required_fields = {"_M_t"} 
    type = "container"

    size = "return self._M_t._M_node_count;"
    begin_iter  = "return ($M_typeof(self._M_t._M_header)) (self._M_t._M_header->_M_left);"

    # Do a tree walk using the iterator
    next_iter  = "$GHSptr = self;
    next_iter += "if ($GHSptr->_M_right != 0) {"
    next_iter += "   $GHSptr = $GHSptr->_M_right;"
    next_iter += "   while ($GHSptr->_M_left != 0) {"
    next_iter += "      $GHSptr = $GHSptr->_M_left;
    next_iter += "   };"
    next_iter += "} else {"
    next_iter += "   $GHSparent = $GHSptr->_M_parent;"
    next_iter += "   while ($GHSptr == $GHSparent->_M_right) {"
    next_iter += "      $GHSptr = $GHSparent;"
    next_iter += "      $GHSparent = $GHSparent->_M_parent;
    next_iter += "   };"
    next_iter += "   if ($GHSptr->_M_right != $GHSparent) {"
    next_iter += "      $GHSptr = $GHSparent;"
    next_iter += "   };"
    next_iter += "};"
    next_iter += "return ($M_typeof(self)) $GHSptr;"

    value_from_iter = "return self._M_value_field;"

    functions {
    	size {
	    name = "size"

	    body = "return self._M_t._M_node_count;"
	}
    }
}

list {
    signature = {"list<*>", "std::list<*>"}
    required_fields = {"_M_node"}
    type = "container"

    size = "return self.size();"

    # Use $M_typeof to cast because the _M_next pointer is stored as
    # a pointer to a generic base class
    begin_iter = "return ($M_typeof(self._M_node)) (self._M_node->_M_next);"
    next_iter = "return ($M_typeof(self)) (self->_M_next);"
    value_from_iter = "return self->_M_data;"

    functions {
	size {
	    name = "size"

	    # Loop through the list since there is no "size" member
	    body  = "$GHScur = self._M_node->_M_next;"
	    body += "$GHSend = self._M_node;"
	    body += "$GHScount = 0;"
	    body += "while ($GHScur != $GHSend) {"
	    body += "   $GHScount++;"
	    body += "   $GHScur = $GHScur->_M_next;"
	    body += "};"
	    body += "return $GHScount;"
	    
	}
	front {
	    name = "front"
	    body = "return (($M_typeof(self._M_node)) (self._M_node->_M_next))->_M_data;"
	}
	back {
	    name = "back"
	    body = "return (($M_typeof(self._M_node)) (self._M_node->_M_prev))->_M_data;"
	}
    }
}

vector {
    signature = {"vector<*>", "std::vector<*>"}
    required_fields = {"_M_start", "_M_finish"}
    type = "container"

    size = "return self._M_finish - self._M_start;"

    begin_iter = "return self._M_start;"
    next_iter = "return self + 1;"
    value_from_iter = "return *(self);"

    functions {
	size {
	    name = "size"
	    body = "return self._M_finish - self._M_start;"
	}
	front {
	    name = "front"
	    body = "return *(self._M_start);"
	}
	back {
	    name = "back"
	    body = "return *(self._M_finish - 1);
	}
    }
}

boolvec {
    signature = {"vector<bool, *allocator<bool>>", "std::vector<bool, *allocator<bool>>"}
    required_fields = {"_M_start", "_M_finish", "_M_end_of_storage"}
    type = "container"

    size = "return self.size()"

    begin_iter  = "$GHSWordBits = 8 * sizeof(unsigned long);"
    begin_iter += "$GHSOffset = self._M_start._M_offset;"
    begin_iter += "$GHSPtr = self._M_start._M_p;"
    begin_iter += "return $GHSPtr;"

    next_iter  = "if ($GHSOffset++ == $GHSWordBits - 1) {"
    next_iter += "   $GHSOffset = 0;"
    next_iter += "   ++$GHSPtr;"
    next_iter += "};"
    next_iter += "return $GHSPtr;"

    value_from_iter = "$GHSResult = !!(*$GHSPtr & (1UL << $GHSOffset)); return $GHSResult;"

    functions {
	size {
	    name = "size"
	    body  = "$GHSWordBits = 8 * sizeof(unsigned long);"
	    body += "return $GHSWordBits * (self._M_finish._M_p - self._M_start._M_p)"
	    body += "    + self._M_finish._M_offset - self._M_start._M_offset;"
	}
    }
}

deque {
    signature = {"deque<*>", "std::deque<*>"}
    required_fields = {"_M_start", "_M_finish"}
    type = "container"

    size = "return self.size()"
    begin_iter = "$GHSValSize = sizeof(*(self._M_start._M_cur));"
    begin_iter+= "$GHSBufSize = $GHSValSize < 512 ? 512 / $GHSValSize : 1;"
    begin_iter+= "$GHSLast = self._M_start._M_last;"
    begin_iter+= "$GHSNode = self._M_start._M_node;"
    begin_iter+= "$GHSCurNode = self._M_start._M_cur;"
    begin_iter+= "return self;"
    
    next_iter  = "++$GHSCurNode;"
    next_iter += "if ($GHSCurNode == $GHSLast) {"
    next_iter += "   $GHSNode = $GHSNode + 1;"
    next_iter += "   $GHSCurNode = *$GHSNode;"
    next_iter += "   $GHSLast = $GHSCurNode + $GHSBufSize;"
    next_iter += "};"
    next_iter += "return self;"
    
    value_from_iter = "return *$GHSCurNode"

    functions {
	size {
	    # size = self._M_finish - self._M_start
	    # A - B = buffer_size * (A._M_node - B._M_node - 1) +
	    #         (A._M_cur - A._M_first) + (B._M_last - B._M_cur)
	    name = "size"
	    body =  "$GHSValSize = sizeof(*(self._M_start._M_cur));
	    body+=  "$GHSBufSize = $GHSValSize < 512 ? 512 / $GHSValSize : 1;
	    body+=  "return $GHSBufSize *
	    body += "  (self._M_finish._M_node - self._M_start._M_node - 1)"
	    body += "+ (self._M_finish._M_cur - self._M_finish._M_first)"
	    body += "+ (self._M_start._M_last - self._M_start._M_cur);"
	}
    }
}

# Classes that use the deque.
queue {
    signature = {"queue<*, *deque<*>>", "std::queue<*,*deque<*>>", "stack<*,*deque<*>>", "std::stack<*,*deque<*>>"}
    required_fields = {"c"}
    type = "container"

    size = "return self.size()"
    begin_iter = "$GHSValSize = sizeof(*(self.c._M_start._M_cur));"
    begin_iter+= "$GHSBufSize = $GHSValSize < 512 ? 512 / $GHSValSize : 1;"
    begin_iter+= "$GHSLast = self.c._M_start._M_last;"
    begin_iter+= "$GHSNode = self.c._M_start._M_node;"
    begin_iter+= "$GHSCurNode = self.c._M_start._M_cur;"
    begin_iter+= "return self;"
    
    next_iter  = "++$GHSCurNode;"
    next_iter += "if ($GHSCurNode == $GHSLast) {"
    next_iter += "   $GHSNode = $GHSNode + 1;"
    next_iter += "   $GHSCurNode = *$GHSNode;"
    next_iter += "   $GHSLast = $GHSCurNode + $GHSBufSize;"
    next_iter += "};"
    next_iter += "return self;"
    
    value_from_iter = "return *$GHSCurNode"

    functions {
	size {
	    # size = self._M_finish - self._M_start
	    # A - B = buffer_size * (A._M_node - B._M_node - 1) +
	    #         (A._M_cur - A._M_first) + (B._M_last - B._M_cur)
	    name = "size"
	    body =  "$GHSValSize = sizeof(*(self.c._M_start._M_cur));
	    body+=  "$GHSBufSize = $GHSValSize < 512 ? 512 / $GHSValSize : 1;
	    body+=  "return $GHSBufSize *
	    body += "  (self.c._M_finish._M_node - self.c._M_start._M_node - 1)"
	    body += "+ (self.c._M_finish._M_cur - self.c._M_finish._M_first)"
	    body += "+ (self.c._M_start._M_last - self.c._M_start._M_cur);"
	}
    }
}

string {
    signature = {"basic_string<*>", "std::basic_string<*>"}
    required_fields = {"_M_dataplus"}
    type = "alias"

    value = "return self._M_dataplus._M_p;"
    size = "return self._M_rep()->_M_length;"
    mutable = false
}

pair {
    signature = {"pair<*>", "std::pair<*>"}
    required_fields = {"first", "second"}
    type = "structure"

    fields {
	first {
	    name = "first"
	    value = "return self.first;"
	    mutable = false
	}
	second {
	    name = "second"
	    value = "return self.second;"
	}
    }
}
