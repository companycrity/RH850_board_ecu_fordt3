// new standard header
#ifndef _NEW_
#define _NEW_
#include <exception>
#if defined(__GHS_PRAGMAS)
#pragma ghs startdata
#endif
#if defined(__ghs) && defined(__ghs_max_pack_value)
#pragma pack (push, __ghs_max_pack_value)
#endif

 #if __GNUC__ < 3 || defined(__ghs) || defined(__SC3__)
_X_STD_BEGIN

 #else /* __GNUC__ < 3 */
namespace std {
 #endif /* __GNUC__ < 3 */

#if defined(__ghs)
// TODO - previous version had this comment - make sure the current version is
// OK
// [nikola] Tue Apr 27 21:04:41 PDT 1999 - replicated in the edg library. Keep
// the definitions consistent
#endif /* __ghs */

		// CLASS bad_alloc
class bad_alloc
	: public _XSTD exception
	{	// base of all bad allocation exceptions
public:

 #if __EDG__ || defined(__SUNPRO_CC)
	bad_alloc(const char *_Message = _MESG("bad allocation")) _THROW0_NOTHROW()
		: exception(_Message)
		{	// construct from message string
		}

 #else /* __EDG__ etc. */
	bad_alloc() _THROW0_NOTHROW()
		{	// construct with no message string
		}

	virtual const char *what() const _THROW0_NOTHROW()
		{	// report a bad allocation
		return ("bad allocation");
		}
 #endif /* __EDG__ etc. */

//	virtual ~bad_alloc() _THROW0()
//		{}	// destroy the object

 #if _HAS_EXCEPTIONS || defined(__ghs)

 #else /* _HAS_EXCEPTIONS */

protected:
	virtual void _Doraise() const
		{	// perform class-specific exception handling
		_RAISE(*this);
		}
 #endif /* _HAS_EXCEPTIONS */

	};

 #if __GNUC__ < 3 || defined(__ghs) || defined(__SC3__)
_X_STD_END

 #else /* __GNUC__ < 3 */
} /* namespace std */

 #if _HAS_NAMESPACE

 #else /* _HAS_NAMESPACE */
using std::bad_alloc;
 #endif /* _HAS_NAMESPACE */

 #endif /* __GNUC__ < 3 */

_STD_BEGIN
		// SUPPORT TYPES
#if defined(__ghs)
typedef void (*new_handler)() __attribute__((strong_fptr("relax")));
#else
typedef void (*new_handler)();	// handler for operator new failures
#endif /* defined(__ghs) */

struct nothrow_t
	{	// placement new tag type to suppress exceptions
	};

 #if defined(__ghs) || defined(__SC3__)
const nothrow_t nothrow = {};
 #else
extern const nothrow_t nothrow;	// constant for placement new tag
 #endif /* __ghs */

		// FUNCTION AND OBJECT DECLARATIONS
new_handler set_new_handler(new_handler)
	_THROW0_NOTHROW();	// establish alternate new handler

 #if !(defined(__ghs) || defined(__SC3__))
extern new_handler _New_hand;	// pointer to current new handler
 #endif /* !__ghs */
_STD_END

 #if defined(__ghs) || defined(__SC3__)
extern _STD new_handler _new_handler;
 #endif /* __ghs */

		// new AND delete DECLARATIONS (NB: NOT IN std)

 #if defined(__SUNPRO_CC)
void operator delete(void *) throw();	// delete allocated storage

void *operator new(_STD size_t)
	throw(std::bad_alloc);	// allocate or throw exception

 #else /* defined(__SUNPRO_CC) */
void operator delete(void *) _THROW0();	// delete allocated storage

void *operator new(_STD size_t)
	_THROW1(_XSTD bad_alloc);	// allocate or throw exception
 #endif /* defined(__SUNPRO_CC) */

void *operator new(_STD size_t, const _STD nothrow_t&)
	_THROW0_NOTHROW();	// allocate or return null pointer

inline void * _NOTHROW operator new(_STD size_t, void *_Where) _THROW0()
	{	// construct with placement at _Where
	return (_Where);
	}

 #if defined(__SUNPRO_CC)
void operator delete[](void *) throw();	// delete allocated array

void *operator new[](_STD size_t)
	throw(std::bad_alloc);	// allocate array or throw exception

 #else /* defined(__SUNPRO_CC) */
void operator delete[](void *) _THROW0();	// delete allocated array

void *operator new[](_STD size_t)
	_THROW1(_XSTD bad_alloc);	// allocate array or throw exception
 #endif /* defined(__SUNPRO_CC) */

void *operator new[](_STD size_t, const _STD nothrow_t&)
	_THROW0_NOTHROW();	// allocate array or return null pointer

inline void * _NOTHROW operator new[](_STD size_t, void *_Where) _THROW0()
	{	// construct array with placement at _Where
	return (_Where);
	}

void operator delete(void *, const _STD nothrow_t&)
	_THROW0_NOTHROW();	// delete if nothrow new fails -- REPLACEABLE

void operator delete[](void *, const _STD nothrow_t&)
	_THROW0_NOTHROW();	// delete if nothrow array new fails -- REPLACEABLE

void operator delete(void *, void *) _THROW0();
//	{}	// delete if placement new fails

void operator delete[](void *, void *) _THROW0();
//	{}	// delete if placement array new fails
#if defined(__ghs) && defined(__ghs_max_pack_value)
#pragma pack(pop)
#endif
#if defined(__GHS_PRAGMAS)
#pragma ghs enddata
#endif
#endif /* _NEW_ */

/*
 * Copyright (c) 1992-2003 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
V4.02:0324 */
