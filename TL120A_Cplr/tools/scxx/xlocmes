// xlocmes internal header (from <locale>)
#ifndef _XLOCMES_
#define _XLOCMES_
#include <xiosbase>
_STD_BEGIN
#if defined(__GHS_PRAGMAS)
#pragma ghs startdata
#endif
#if defined(__ghs) && defined(__ghs_max_pack_value)
#pragma pack (push, __ghs_max_pack_value)
#endif

		// STRUCT messages_base
struct messages_base
	: public locale::facet
	{	// base class for messages
	typedef int catalog;

	explicit messages_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	// default constructor
		}
	};

		// TEMPLATE CLASS messages
template<class _Elem>
	class messages
		: public messages_base
	{	// facet for obtaining messages from a catalog
public:
	typedef _Elem char_type;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;

	catalog open(const string& _Catname, const locale& _Loc) const
		{	// open catalog
		return (do_open(_Catname, _Loc));
		}

	string_type get(catalog _Catval, int _Set, int _Message,
		const string_type& _Dflt) const
		{	// get message from set in catalog
		return (do_get(_Catval, _Set, _Message, _Dflt));
		}

	void close(catalog _Catval) const
		{	// close catalog
		do_close(_Catval);
		}

	static locale::id id;	// unique facet id

	explicit messages(size_t _Refs = 0)
		: messages_base(_Refs)
		{	// construct from current locale
		_Init(_Locinfo());
		}

	messages(const _Locinfo& _Lobj, size_t _Refs = 0)
		: messages_base(_Refs)
		{	// construct from specified locale
		_Init(_Lobj);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0)
		{	// return locale category mask and construct standard facet
		if (_Ppf != 0 && *_Ppf == 0)
#if defined(__ghs) && !_HAS_EXCEPTIONS
			*_Ppf = (messages<_Elem> *)_CHECK_LIB_ALLOC(_NEW_CRT messages<_Elem>);
#else  /* defined(__ghs) && !_HAS_EXCEPTIONS */
			*_Ppf = _NEW_CRT messages<_Elem>;
#endif /* defined(__ghs) && !_HAS_EXCEPTIONS */
		return (_X_MESSAGES);
		}

_PROTECTED:
#ifdef __ghs
	__noinline
#endif /* __ghs */
	virtual ~messages()
#if defined(__ghs) && defined(__ghs_shared_object_support)
			;
#else /* !(__ghs && defined(__ghs_shared_object_support)) */
		{	// destroy the object
		}
#endif /* __ghs && defined(__ghs_shared_object_support) */

protected:
	void _Init(const _Locinfo&)
		{	// initialize from _Locinfo object (do nothing)
		}

#if defined(__ghs)
	__noinline
#endif /* __ghs */
	virtual catalog do_open(const string&, const locale&) const
		{	// open catalog (do nothing)
		return (0);
		}

#if defined(__ghs)
	__noinline
#endif /* __ghs */
	virtual string_type do_get(catalog, int, int,
		const string_type& _Dflt) const
		{	// get message from set in catalog (return default)
		return (_Dflt);
		}

#if defined(__ghs)
	__noinline
#endif /* __ghs */
	virtual void do_close(catalog) const
		{	// close catalog (do nothing)
		}
	};

#if defined(__ghs) && defined(__ghs_shared_object_support)
template<class _Elem>
	messages<_Elem>::~messages()
	{	// destroy the object
	}
#endif /* __ghs && defined(__ghs_shared_object_support) */

		// STATIC messages::id OBJECT
template<class _Elem>
	locale::id messages<_Elem>::id;

		// TEMPLATE CLASS messages_byname
template<class _Elem>
	class messages_byname
		: public messages<_Elem>
	{	// messages for named locale
public:
	explicit messages_byname(const char *_Locname, size_t _Refs = 0)
		: messages<_Elem>(_Locinfo(_Locname), _Refs)
		{	// construct for named locale
		}

_PROTECTED:
#ifdef __ghs
	__noinline
#endif
	virtual ~messages_byname()
#if defined(__ghs) && defined(__ghs_shared_object_support)
				;
#else /* !(__ghs && defined(__ghs_shared_object_support)) */
		{	// destroy the object
		}
#endif /* !(__ghs && defined(__ghs_shared_object_support)) */
	};

#if defined(__ghs) && defined(__ghs_shared_object_support)
template<class _Elem>
	messages_byname<_Elem>::~messages_byname()
		{	// destroy the object
		}
#endif /* __ghs && defined(__ghs_shared_object_support) */


 #ifdef  _DLL

  #ifdef __FORCE_INSTANCE
template class messages<char>;
template class messages<wchar_t>;

   #ifdef _CRTBLD_NATIVE_WCHAR_T
template class messages<unsigned short>;
   #endif /* _CRTBLD_NATIVE_WCHAR_T */

  #else /* __FORCE_INSTANCE */
extern template class messages<char>;
extern template class messages<wchar_t>;
  #endif /* __FORCE_INSTANCE */

 #endif /* _DLL */
#if defined(__ghs) && defined(__ghs_max_pack_value)
#pragma pack(pop)
#endif
#if defined(__GHS_PRAGMAS)
#pragma ghs enddata
#endif
_STD_END
#endif /* _XLOCMES_ */

/*
 * Copyright (c) 1992-2003 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
V4.02:0324 */
