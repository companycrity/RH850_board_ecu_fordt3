
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   
      <title>GHS Build Option Descriptions</title>
   </head>
   <body>
      <h2>GHS Build Option Descriptions</h2>
      <hr>
      <div id="bod.RegisterDescriptionFile">
         <p>Specifies a <strong>.grd</strong> file, which contains a description of the target board's registers, and instructions on how MULTI may access them. The equivalent
            driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>--register_definition_file=<var>filename</var>.grd</code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.V800_ReserveRegister2">
         <p>Controls the treatment of register <code>r2</code>. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Reserve for User</strong> (<code>-reserve_r2</code>) &#8212; Reserves this register for use by the user.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Permit Compiler Use</strong> (<code>-noreserve_r2</code>) &#8212; [default] Permits the compiler to use this register as a temporary register.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.V800_ReserveRegister5">
         <p>Controls the treatment of register <code>r5</code>. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Reserve for User</strong> (<code>-reserve_r5</code>) &#8212; Reserves this register for use by the user. This disables the use of ROM SDA; consequently, read-only data will not be
                     placed in an SDA section.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Permit Compiler Use</strong> (<code>-noreserve_r5</code>) &#8212; [default] Permits the compiler to use this register.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.V800_NoROSDA">
         <p>Controls whether the ROM SDA (<code>ROSDA</code>) base register (<code>TP</code>, which is <code>R5</code>) is reserved for use with ROM SDA or if it can be allocated to as a general purpose register, in which case it will be treated
            as a temporary whose value does not need to be preserved.  Users wishing to disable ROM SDA but keep the <code>TP</code> register reserved should look to the <code>-reserve_r5</code> option (See <a href="ghs_help://build_v800.bod.V800_ReserveRegister5">Register r5</a>). Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Use ROM SDA base register (TP) as a temporary</strong> (<code>-no_rosda</code>) &#8212;
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Use the ROM SDA base register for ROM SDA</strong> (<code>-rosda</code>) &#8212;
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.V800_RegisterMode">
         <p>Controls the number of registers that will be used by the compiler. You may want to restrict this number in order to guarantee
            the availability of particular registers for hand-written assembly. For more information, see  <a href="ghs_help://build_v800.section.register_usage">Register Usage</a>. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Restrict to 22 Registers</strong> (<code>-registermode=22</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Restrict to 26 Registers</strong> (<code>-registermode=26</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Standard 32 Registers</strong> (<code>-registermode=32</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.V800_R20Has255">
         <p>Controls an optimization in which register <code>r20</code> is set to the value 255 at startup, and is subsequently treated as read-only. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-r20has255</code>) &#8212; Register <code>r20</code> is set to the value 255.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-nor20has255</code>) &#8212; [default] Register <code>r20</code> is available for general use.
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>When this optimization is enabled, the compiler may generate smaller code by accessing <code>r20</code>. For example, the 4-byte instruction:
         </p>
         <p>
            
                              <br><pre>andi 255, r3, r3</pre><br>
                           
         </p>
         <p>is replaced with the 2-byte instruction:</p>
         <p>
            
                              <br><pre>and r20, r3</pre><br>
                           
         </p>
      </div>
      <hr>
      <div id="bod.V800_R21Has65535">
         <p>Controls an optimization in which register <code>r21</code> is set to the value 65535 at startup, and is subsequently treated as read-only. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-r21has65535</code>) &#8212; Register <code>r21</code> is set to the value 65535.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-nor21has65535</code>) &#8212; [default] Register <code>r21</code> is available for general use
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>When this optimization is enabled, the compiler may generate smaller code by accessing <code>r21</code>. For example, the 4-byte instruction:
         </p>
         <p>
            
                              <br><pre>andi 65535, r3, r3</pre><br>
                           
         </p>
         <p>is replaced with the 2-byte instruction:</p>
         <p>
            
                              <br><pre>and r21, r3</pre><br>
                           
         </p>
         <p>This option implies <strong>Set Register r20 to the value 255</strong> (see above).
         </p>
      </div>
      <hr>
      <div id="bod.V800_DataBusWidth">
         <p>Specifies the data-bus width of the target hardware. Any bits in a target address above the bus width are assumed to be masked
            off during a data access. This option is passed to <code>elxr</code> to resolve section mappings. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>24-bit data bus</strong> (<code>-data_bus_width=24</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>26-bit data bus</strong> (<code>-data_bus_width=26</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>29-bit data bus</strong> (<code>-data_bus_width=29</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>32-bit data bus</strong> (<code>-data_bus_width=32</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For example:</p>
         <p>If your target hardware has a 29-bit data bus width, a section placed at address <code>0xFFFF0000</code> in the link map is viewed by <code>elxr</code> to actually be at <code>0x1fff0000</code>. This is useful when using the ZDA capability of the V850 and RH850 compiler on targets with a small data bus because it still allows data sections to be placed within a small negative offset
            from zero, which is suitable for use with ZDA. Otherwise, <code>elxr</code> might complain that this section does not fit within the specified address memory region for the target.
         </p>
         <p>
                              <strong>Note:</strong> If <code>-data_bus_width=29</code> is specified, <code>elxr</code> first tries the address <code>0xffff0000</code> as usual, and then tries the 29-bit wide value (<code>0x1fff0000</code>).
         </p>
      </div>
      <hr>
      <div id="bod.FPCoprocessor">
         <p>Specifies how to perform floating-point calculations. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>No Floating-Point</strong> (<code>-fnone</code>) &#8212; Disallows all floating-point operations (and directs the C and C++ compilers to give an error for any use of floating-point
                     variables or constants), thus greatly reducing the size of such library functions as <code>printf</code> and <code>scanf</code>. Passes <code>-D__NoFloat__</code> to allow source code and header files to hide references to floating-point objects. If your code uses floating-point operations,
                     then an error will be generated. For more information, see <a href="ghs_help://build_v800.section.predefined_macro_names">Predefined Macro Names</a>.
                  </p>
                  <p>Because code related to floating-point operations may be linked in to your program even if it does not use floating-point
                     variables, using this option may reduce the size of your program.
                  </p>
                  <p>Because this setting requires support from the system libraries and header files, it is not supported for environments using
                     embedded operating systems with their own C or C++ headers and libraries. In addition, certain target-specific header files
                     may require the use of floating-point types.
                  </p>
                  <p>This option implies <code>-no_float_scanf</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   
                                                      <strong>Hardware Coprocessor</strong>
                                                    (<code>-fhard</code>) &#8212;  Specifies <strong>hardware floating-point</strong> (HFP) mode, in which the compiler uses floating-point registers (where available) to hold floating point data, and floating point
                     instructions to do floating point operations.  This is the default for targets that have a built-in FPU, and is not available for other targets.
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Hardware Single, Software Double</strong> (<code>-fsingle</code>) &#8212;  Instructs the compiler to generate floating-point instructions to perform single-precision floating-point operations, and to generate library subroutine
                     calls to emulate double-precision floating-point operations.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Software Emulation</strong> (<code>-fsoft</code>) &#8212; Specifies <strong>software floating-point</strong> (SFP) mode, in which the compiler uses integer registers to hold floating-point data and generates library subroutine calls to
                     emulate floating-point operations, regardless of the capabilities of the selected processor. 
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FloatSingle">
         <p>Controls the treatment of <code>double</code> and <code>long double</code> types. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-floatsingle</code>) &#8212; Defines the types <code>double</code> and <code>long double</code> to have the same size and precision as <code>float</code>. Programs may be faster and smaller, but with significantly less precision. This option is only supported on the RH850 processors and requires <code>-fsingle</code> or <code>-fhard</code>
                                                   . 
                  </p>
                  <p>See also <code>-Wdouble</code> and <code>-fnodouble</code> which give warnings or errors for any use of the <code>double</code> or <code>long double</code> data types, and <code>-fsingle</code> which uses hardware floating point instructions for type <code>float</code>, but software floating point for types <code>double</code> and <code>long double</code> without reducing the precision of <code>double</code> and <code>long double</code>.
                  </p>
                  <p><strong>Note:</strong> The ANSI/ISO standard for C allows the range of the types <code>double</code> and <code>long double</code> to be reduced to that of <code>float</code>, but it does not allow the precision of <code>double</code> and <code>long double</code> to be as low as the precision provided in this mode. Therefore this mode does not strictly conform. The following symbols
                     from the <code>float.h</code> header do not have conforming values due to reduced precision: <code>DECIMAL_DIG</code> 
                                                      <code>DBL_DIG</code> 
                                                      <code>LDBL_DIG</code> 
                                                      <code>DBL_EPSILON</code> 
                                                      <code>LDBL_EPSILON</code>. In all other ways this mode conforms to the standard.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-nofloatsingle</code>) &#8212; [default] Treats <code>double</code> types normally
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.NaNCompareUnordered">
         <p>Ensures floating-point comparisons using the C relational operators properly handle <code>NaN</code> operands as unordered, which sometimes will require the generation of additional or alternative instructions. These extra
            or alternative instructions may degrade floating-point comparison performance. This option only applies when the hardware floating-point unit (FPU) is enabled.  However, this option is not supported on the V850E1F-based devices. Permitted settings for this option are
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-fNaN_cmp_unordered</code>) &#8212; Ensure floating-point comparisons using the C relational operators properly handle <code>NaN</code> operands as unordered.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-fno_NaN_cmp_unordered</code>) &#8212; [default] Allow the compiler to assume built-in relational operations do not need to consider unordered operands.  
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FloatAssociativity">
         <p>Controls the application of the mathematical associativity property to floating point expressions.</p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-float_associativity</code>) &#8212; [default] The compiler may apply the associativity property to floating point expressions. This may change how floating
                     point values are rounded.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_float_associativity</code>) &#8212; The compiler may not apply the associativity property to floating point expressions.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FloatingPointBuiltIns">
         <p>Controls the replacement of calls to math library functions (such as <code>sqrt()</code>) with inline instructions. These instructions may not be exactly equivalent to the function calls they are replacing. For
            example, they may not exhibit identical floating-point rounding or set <code>errno</code>. Even if this option is disabled, other optimizations that replace calls to math library functions may be performed under
            <code>-Oinline_constant_math</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-ffunctions</code>) &#8212; The compiler may use inline instructions instead of calling math library functions.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-fnofunctions</code>) &#8212; [default] The compiler will call math library functions and not substitute inline instructions.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FloatingPointPreciseSignedZero">
         <p>The Green Hills tools generally conform to IEEE floating-point standards as much as possible. However, better code performance in both size and speed can be obtained by
            allowing small deviations from the standard with respect to the treatment of signed zero quantities (<code>-0.0</code> versus <code>+0.0</code>). When <code>-no_precise_signed_zero</code> is used, the compiler is permitted to replace sequences of operations that might have resulted in a negative zero (-0.0)
            outcome with one that may instead produce a positive zero result. Similarly, sequences that resulted in a positive zero result
            may be replaced with one resulting in a negative zero result. Consequently, because negative zero and positive zero are treated
            as equal quantities in every respect by the compiler, this should have no impact on the accuracy of user code when the distinction
            between signed zero quantities is of no importance. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-precise_signed_zero</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_precise_signed_zero</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FloatingPointPreciseSignedZeroCompare">
         <p>By default, Green Hills tools conform to the IEEE requirement that negative zero (<code>-0.0</code>) quantities must compare equal to positive zero (<code>0.0</code>) quantities. Consequently, expressions involving an equality such as <code>-0.0 == 0.0</code> or <code>0.0 &lt;= -0.0</code> always returns true, and expressions involving an inequality such as <code>-0.0 != 0.0</code> and <code>-0.0 &lt; 0.0</code> always returns false. On some architectures, better optimization strategies can be employed if the compiler is permitted
            to ignore this requirement by using <code>-no_precise_signed_zero_compare</code>. However, caution must be employed when using this option because it can affect both the accuracy and correctness of user
            floating point code if that code relies on equalities between the zeros. You may want to consider enabling <code>-precise_signed_zero</code> when attempting to use <code>-no_precise_signed_zero_compare</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Allow -0 to differ from +0 when it helps optimizations</strong> (<code>-no_precise_signed_zero_compare</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Force -0 to compare equal to +0 always</strong> (<code>-precise_signed_zero_compare</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FloatingPointIO">
         <p>Controls the use of floating-point in <code>stdio</code> operations. This option is deprecated and may be removed in a future release. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-floatio</code>) &#8212; [default] Use standard libraries.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-nofloatio</code>) &#8212; Use <strong>libnoflt.a</strong>, a library containing special versions of <code>printf</code>, <code>scanf</code>, and related functions which, since they contain no floating-point operations, are therefore smaller. Floating-point formats
                     (<code>%f</code>, <code>%g</code>, <code>%e</code>) are not supported. In environments where floating-point uses large library support routines, this option can save space
                     for programs that use <code>printf</code>, but which do not require floating-point. This option only works with whichever <strong>WChar Size</strong> option is the default for your processor (<code>-wchar_u16</code> or <code>-wchar_s32</code>).
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.SpecialDataArea">
         <p>Specifies that data up to a certain size should be placed in the 
                                    <strong>Small Data Area</strong>
                                 
                                 
                                     or 
                                 
                                 
                                    <strong>Zero Data Area</strong>
                                 . Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Small Data Area</strong> (<code>-sda</code>) &#8212; Enables the <strong>Small Data Area</strong> optimization with a threshold of 8. For more information, see <a href="ghs_help://build_v800.section.special_data_areas">Special Data Area Optimizations</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Small Data Area with Threshold</strong> (<code>-sda=<var>size</var>
                                                      </code>) &#8212; Enables the <strong>Small Data Area</strong> optimization, where <var>size</var> specifies the threshold size for objects placed in the SDA.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Zero Data Area with Threshold</strong> (<code>-zda=<var>size</var>
                                                      </code>) &#8212; Enables the <strong>Zero Data Area</strong> optimization, where <var>size</var> specifies the threshold size for objects placed in the ZDA. For more information, see <a href="ghs_help://build_v800.section.special_data_areas">Special Data Area Optimizations</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>No Special Data Area</strong> (<code>-nothreshold</code>) &#8212; 
                                                      [default] Disables the special data area optimization.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Valid formats for the <var>size</var> parameter threshold include: <code>1024</code>, <code>0x400</code>, and <code>all</code>. If <var>size</var> is set to <code>all</code>, then no size restriction is set on objects placed into the special data area.
         </p>
         <p><strong>Note:</strong> Thresholds imposed by these options will not be respected for symbol names appearing in a file specified with <code>-sda_file</code> (see <a href="ghs_help://build_v800.bod.SDAFile">Small Data Area File</a>).
         </p>
      </div>
      <hr>
      <div id="bod.SDAFile">
         <p>Specifies a file that contains a list of symbol names, one per line, that should be placed in the <strong>Small Data Area</strong>. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-sda_file=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>C++ symbol names specified in the file should include relevant namespaces, such as for example <code>mynamespace::mysymbolname</code>.  The hash (#) character may be used at the beginning of a line in the file to denote a comment.  Extra white spacing at
            the beginning and end of a line, or between lines, is ignored.  The specified file must exist and must be readable.
         </p>
         <p><strong>Note:</strong> Symbol names listed in the file will be placed in the Small Data Area regardless of size threshold constraints imposed by
            other options (see <a href="ghs_help://build_v800.section.special_data_areas">Special Data Area Optimizations</a>).
         </p>
      </div>
      <hr>
      <div id="bod.ZDAFile">
         <p>Specifies a file that contains a list of symbol names, one per line, that should be placed in the <strong>Zero Data Area</strong>. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-zda_file=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>C++ symbol names specified in the file should include relevant namespaces, such as for example <code>mynamespace::mysymbolname</code>.  The hash (#) character may be used at the beginning of a line in the file to denote a comment.  Extra white spacing at
            the beginning and end of a line, or between lines, is ignored.  The specified file must exist and must be readable.
         </p>
      </div>
      <hr>
      <div id="bod.V800_Mtda">
         <p>Controls use of the <strong>Tiny Data Area</strong> Optimization. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Multiple TDAs</strong> (<code>-mtda</code>) &#8212; Enables multiple tiny data areas.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Single TDA</strong> (<code>-single_tda</code>) &#8212; Enables a single tiny data area.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>No TDA</strong> (<code>-notda</code>) &#8212; [default] Disables tiny data areas. This option instructs the compiler to produce code that assumes that the TDA optimization
                     will not be used by any module linked into the program thereby permitting the compiler to overwrite the contents of the TDA
                     base register <code>(ep)</code> without any attempt at preservation. Consequently, programs compiled with <code>&#8211;mtda</code> or <code>&#8211;single_tda</code> cannot be combined safely with programs compiled with <code>&#8211;notda</code>. It is recommended to use the setting <code>-single_tda</code> for modules that do not require the use of the TDA optimization, but must remain operable with those that do.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.v850_tda">V850 Tiny Data Area (TDA) Optimization</a>.
         </p>
      </div>
      <hr>
      <div id="bod.V800_SDA23">
         <p>Controls whether or not the tools increase the size of the small data area (SDA) to 8 MB. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Generate 23-bit SDA relocations for load/store instructions</strong> (<code>-large_sda</code>) &#8212; Increases the size of the SDA to 8 MB. When accessing the SDA, the compiler generates 6-byte load and store instructions with a 23-bit offset from the SDA base register. This option is applicable only to V850E2V3 and later  processor variants on which 6-byte load and store instructions are supported.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Generate 16-bit SDA relocations for load/store instructions</strong> (<code>-no_large_sda</code>) &#8212; [default] Does not increase the size of the SDA. When accessing the SDA, the compiler generates 4-byte load and store instructions with a 16-bit offset from the SDA base register.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_ZDA23">
         <p>Controls whether or not the tools increase the size of the zero data area (ZDA) to 8 MB. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Generate 23-bit ZDA relocations for load/store instructions</strong> (<code>-large_zda</code>) &#8212; Increases the size of the ZDA to 8 MB. When accessing the ZDA, the compiler generates 6-byte load and store instructions with a 23-bit offset from the ZDA base register. This option is applicable only to V850E2V3 and later processor variants on which 6-byte load and store instructions are supported.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Generate 16-bit ZDA relocations for load/store instructions</strong> (<code>-no_large_zda</code>) &#8212; [default] Does not increase the size of the ZDA. When accessing the ZDA, the compiler generates 4-byte load and store instructions with a 16-bit offset from the ZDA base register.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_SDA23_Shortening">
         <p>Controls a linker-based optimization that shortens 6-byte load and store instructions to 4-byte instructions when possible.
            This option usually produces smaller code for programs compiled with <code>-large_sda</code> or <code>-large_zda</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Convert 23-bit SDA relocations to 16-bit in load/store instructions when possible</strong> (<code>-shorten_loads</code>) &#8212; Converts 6-byte load and store instructions with a 23-bit offset from the SDA base register to an equivalent 4-byte instruction with a 16-bit offset, if the offset can fit in 16 bits. If you enable <code>-Olink</code>, this optimization is enabled implicitly.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do not convert 23-bit SDA relocations to 16-bit in load/store instructions</strong> (<code>-no_shorten_loads</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_Move_Shortening">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Convert 32 and 48-bit move relocations to 16-bit in move instructions when possible</strong> (<code>-shorten_moves</code>) &#8212; If you enable <code>-Olink</code>, this optimization is enabled implicitly.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do not attempt to shrink move relocations in move instructions</strong> (<code>-no_shorten_moves</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_ROSDAISZDA">
         <p>Controls whether read-only data that would normally be placed in the <code>.rosdata</code> section (due to an SDA threshold or pragma) is placed in <code>.rozdata</code> instead.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-rosda_is_zda</code>) &#8212; Place read-only data intended for SDA into ZDA, instead.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_rosda_is_zda</code>) &#8212; [default] Leave read-only SDA variables in SDA.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ZeroCommons">
         <p>Controls whether uninitialized global variables in the Zero Data Area will  be allocated as <code>COMMON</code> or as defined variables.This option is only relevant when the following is true:
            
            <ul>
               <li>
                  <p>Generation of common variables is enabled (<code>--commons</code>).
                  </p>
               </li>
               <li>
                  <p>Use of the Zero Data Area has not been disabled (<code>-zda=<var>none</var>
                                                      </code>).
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-zero_commons</code>) &#8212; [default] Uninitialized global variables in the Zero Data Area will be allocated as <code>COMMON</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_zero_commons</code>) &#8212; Uninitialized global variables in the Zero Data Area will be allocated as defined variables.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Pic">
         <p>Controls the generation of <strong>Position Independent Code</strong> (PIC). Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-pic</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-nopic</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>
                                 For more information, see <a href="ghs_help://build_v800.section.pic">Position Independent Code (PIC)</a>. This option cannot be used in conjunction with <code>-layout</code>.
                              
         </p>
      </div>
      <hr>
      <div id="bod.Pid">
         <p>Controls generation of <strong>Position Independent Data</strong> (PID). Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-pid</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-nopid</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.pid">Position Independent Data (PID)</a>. This option cannot be used in conjunction with <code>-layout</code>.
                              
         </p>
      </div>
      <hr>
      <div id="bod.FarCalls">
         <p>Controls whether the compiler will generate a far call for every call. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Make All Calls Far Calls</strong> (<code>-farcalls</code>) &#8212; Enables generation of a far function call for every call. This allows for functions to be located at any distance from
                     the caller.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Make No Far Calls</strong> (<code>-nofarcalls</code>) &#8212; [default] Disables generation of far function calls. Large programs or programs with discontinuous text sections may not
                     link if the range of the call instruction is exceeded.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.near_and_far_function_calls">Near and Far Function Calls</a>.
         </p>
      </div>
      <hr>
      <div id="bod.FarCallPatch">
         <p>Controls a linker-based optimization that generates far calls only for calls which are out of range and would otherwise fail. This option will generally produce smaller code than generating far calls for every call (see <a href="ghs_help://build_v800.bod.FarCalls">Far Calls</a>). Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Patch Far Calls When Necessary</strong> (<code>-farcallpatch</code>) &#8212; [default]
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Patch Far Calls</strong> (<code>-nofarcallpatch</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.DiscardZeroInitializers">
         <p>Controls the allocation of statically-initialized variables and arrays that are explicitly initialized to zero. Allocating
            such objects to an uninitialized section will generally reduce the size of the executable ROM image. Permitted settings for
            this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Place Zero-Initialized Data in BSS Sections</strong> (<code>-discard_zero_initializers</code>) &#8212;  Places statically-initialized variables that are explicitly initialized to zero as if they were defined but not initialized.
                     For example, if <code>int x = 0;</code> would normally place <code>x</code> in the <code>.data</code> section, the compiler may place it in the <code>.bss</code> section instead, as if you had declared <code>x</code> with <code>int x;</code>. Regardless, <code>x</code> would still be initialized to zero.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Place Zero-Initialized Data in Data Sections</strong> (<code>-no_discard_zero_initializers</code>) &#8212; [default] Places statically-initialized variables that are explicitly initialized to zero in the same way as those initialized to other
                     values. If a global variable is not explicitly initialized in the source code, it may still be allocated to the appropriate
                     <code>.bss</code> section.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.GlobalReg">
         <p>Reserves up to 5 registers (<code>r20</code> to <code>r24</code> in that order) to hold global variables.
         </p>
         <p>The equivalent driver option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-globalreg=<var>n</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p><strong>Note:</strong> If you are building INTEGRITY code, you cannot modify the default value of this option. If you attempt to do so, the compiler
            issues the following message:
            <br><pre>Warning: The number of global registers on INTEGRITY
is not configurable. option -globalreg=<var>n</var> ignored</pre><br>
                                 
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.storing_global_variables_in_registers">Storing Global Variables in Registers</a>.
         </p>
      </div>
      <hr>
      <div id="bod.StackCheck">
         <p>Controls stack limit checking, which is performed by making a call to a function <code>__stkchk()</code> in the prologue of each routine. Because these calls are added by the compiler, this option does not detect stack overflows
            that are caused by pre-compiled code, such as the Green Hills libraries or linker generated code. In stand-alone environments,
            <code>__stkchk</code> is in <strong>libsys.a</strong>. The code for it can be obtained in <strong>src/libsys/ind_stackcheck.c</strong> (see <a href="ghs_help://build_v800.section.important_libraries_and_object_modules">Customizing the Run-Time Environment Libraries and Object Modules</a>). Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-stack_check</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_stack_check</code>) [default]
                  </p>
               </li>
            </ul>To enable stack checking on a per-function basis, use the <code>stackcheck</code> attribute (see <a href="ghs_help://build_v800.varlistentry.stackcheck"></a>).
         </p>
      </div>
      <hr>
      <div id="bod.StackProtector">
         <p>Controls code instrumentation that provides protection against stack smashing attacks. Permitted settings for this option
            are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-stack_protector</code>) &#8212; Enable protection against stack smashing attacks.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_stack_protector</code>) &#8212; [default] Do not enable protection against stack smashing attacks.
                  </p>
               </li>
            </ul>When enabled, functions with variables greater than 8 bytes in length are instrumented. The compiler places a <strong>canary</strong> &#8212; a special location on the stack &#8212; in the prologue, adjacent to the saved registers. This canary is marked with a specific
            value. In the epilogue, this canary value on the stack is compared against the original value. If the values do not match,
            an error function is called, terminating the program.
         </p>
         <p>This technique offers protection against stack smashing attacks, which attempt to overwrite the return value, although a motivated
            attacker can overcome the protection using a multi-phased attack. It is important to understand that a program that contains
            no possibility of an array overrun is immune to all such attacks, even without the protection afforded by a stack canary.
            <code>-stack_protector</code> is not a substitute for well designed software.
         </p>
         <p>The canary value should be set randomly based on system entropy. (See the example in <strong>src/libsys/ind_stack_canary2</strong>.) To customize the error handling routine, implement <code>__stack_chk_fail()</code>. (See the example in <strong>src/libsys/ind_stackcanary.c</strong>.) This function must never return.
         </p>
         <p>The following pseudo code illustrates how to randomize the canary value, and customize the error handling:
            <br><pre>#pragma ghs startnoinline
// Don't allow main2() to be inlined or main() may require
// a canary.
static int main2(void){
    // The normal stuff that main()would otherwise do.
}
#pragma ghs endnoinline

void __stack_chk_fail(void){
    // Log the failure
    Exit(1);
}
extern uintptr_t *__ghs_get_stack_chk_guard_address(void);

int main() {
    // Initialize the stack canary before any code
    // that may require a stack canary
    *__ghs_get_stack_chk_guard_address() = &lt;random_value&gt;;
    // The real program starts in main2
    return main2();
}
</pre><br>
                              
         </p>
         <p>Check your operating system's documentation for other support information.</p>
      </div>
      <hr>
      <div id="bod.RenameSection">
         <p>Assigns variables and functions to specific user-named sections. This option works in the same way as the <code>#pragma ghs section</code> directive but does not modify the source file (see <a href="ghs_help://build_v800.section.controlling_code_placement">Custom Program Sections</a>). The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-section <var>secttype</var>=<var>sectname</var>
                                                      </code>
                                                
                  </p>
                  <p>
                                                   <var>secttype</var> specifies which kind of code or data item is affected by the option and may be any of those listed in <a href="ghs_help://build_v800.section.program_sections">Default Program Sections</a> (with or without the leading period).
                  </p>
                  <p>
                                                   <var>sectname</var> is the user-defined section name, which starts with a period (<code>.</code>) by convention.
                  </p>
                  <p>This option changes the default name of the specified section type throughout the file. Its effect is overridden by any <code>#pragma ghs section</code> in the source file with the same <var>secttype</var>, and its effect is restored by <code>#pragma ghs section secttype=default</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.SplitDataSectionsByAlignment">
         <p>Controls whether the compiler will assign a variable in a default data section to an aligned data section whose name is <code>
                                       <var>sectname</var>.a<var>N</var>
                                    </code>, where <var>sectname</var> is the name of the default data section, and <var>N</var> is the alignment in bytes of the variable. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Split Data Sections by Alignment</strong> (<code>-split_data_sections_by_alignment</code>) &#8212; Allocates a variable in a default data section to an aligned data section according to its alignment. However, if the
                     variable is in a user-named section either by <code>#pragma</code> or by <code>__attribute__</code>, do not allocate it to an aligned data section and keep it in the user-named section.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Split Data Sections by Alignment </strong> (<code>-no_split_data_sections_by_alignment</code>) &#8212; [default] Do not allocate variables to aligned data sections.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option should be passed both when compiling and when linking.  For more information, see <a href="ghs_help://build_v800.section.aligned_sections">Aligned Data Sections</a>.
         </p>
      </div>
      <hr>
      <div id="bod.IndividualDataSections">
         <p>Controls whether to enable the Individual Variable Sections support and whether the compiler will assign a non-COMMON global
            or static variable in a default data section to its own individual section, whose name is <var>sectname</var>.<var>symname</var>, where <var>sectname</var> is the default data section's name, and <var>symname</var> is the variable's symbol name. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Allocate Variables in Default Data Sections to Individual Variable Sections</strong> (<code>-individual_data_sections</code>) &#8212; Allocates a non-COMMON global or static variable in a default data section to its own individual section.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Allocate Variables in Default Data Sections to Individual Variable Sections</strong> (<code>-no_individual_data_sections</code>) &#8212; [default] Do not allocate variables in default data sections to individual sections. Leave them in the default data sections
                     instead.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option should be passed both when compiling and when linking.  For more information, see <a href="ghs_help://build_v800.section.individual_sections">Individual Function and Variable Sections</a>.
         </p>
         <p><strong>Note:</strong> This option does not assign variables in custom data sections to individual sections. To assign variables in custom data sections
            to individual sections in addition to variables in default data sections, see <a href="ghs_help://build_v800.bod.IndividualPragmaDataSections">Individual Variable Sections for Renamed Data Sections</a> and <a href="ghs_help://build_v800.bod.IndividualAttrDataSections">Individual Variable Sections for User-Defined Data Sections</a>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.IndividualPragmaDataSections">
         <p>When the Individual Variable Sections support is enabled, controls whether the compiler will assign a global or static variable
            in a renamed data section declared by <code>#pragma ghs section <var>settype</var>="<var>sectname</var>"</code> directive to its own individual section, whose name is <var>sectname</var>.<var>symname</var>, where <var>sectname</var> is the renamed data section's name, and <var>symname</var> is the variable's symbol name.  By default, the Individual Variable Sections support only assigns variables in default data
            sections to individual sections. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Allocate Variables in Data Sections Renamed by #pragma to Individual Variable Sections</strong> (<code>-individual_pragma_data_sections</code>) &#8212; Allocates a global or static variable in a renamed data section to its own individual section.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Allocate Variables in Data Sections Renamed by #pragma to Individual Variable Sections</strong> (<code>-no_individual_pragma_data_sections</code>) &#8212; [default] Do not allocate variables in renamed data sections to individual sections. Keep them in the renamed data sections
                     instead.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.individual_sections">Individual Function and Variable Sections</a>.
         </p>
         <p><strong>Note:</strong> This option is only effective if <code>-individual_data_sections</code> (see <a href="ghs_help://build_v800.bod.IndividualDataSections">Individual Variable Sections for Default Data Sections</a>) is also used.
         </p>
      </div>
      <hr>
      <div id="bod.IndividualAttrDataSections">
         <p>When the Individual Variable Sections support is enabled, controls whether the compiler will assign a global or static variable
            in a user-defined data section declared by <code>__attribute__((section("<var>sectname</var>")))</code> to its own individual section, whose name is <var>sectname</var>.<var>symname</var>, where <var>sectname</var> is the renamed data section's name, and <var>symname</var> is the variable's symbol name. By default, the Individual Variable Sections support only assigns variables in default data
            sections to individual sections. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Allocate Variables in User-Defined Data Sections by __attribute__ to Individual Variable Sections</strong> (<code>-individual_attribute_data_sections</code>) &#8212; Allocates a global or static variable in an user-defined data section to its own individual section.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Allocate Variables in User-Defined Data Sections by __attribute__ to Individual Variable Sections</strong> (<code>-no_individual_attribute_data_sections</code>) &#8212; [default] Do not allocate variables in user-defined data sections to individual variable sections. Keep them in the user-defined
                     sections instead.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.individual_sections">Individual Function and Variable Sections</a>.
         </p>
         <p><strong>Note:</strong> This option is only effective if <code>-individual_data_sections</code> (see <a href="ghs_help://build_v800.bod.IndividualDataSections">Individual Variable Sections for Default Data Sections</a>) is also used.
         </p>
      </div>
      <hr>
      <div id="bod.IndividualFunctionSections">
         <p>Controls whether to enable the Individual Function Sections support and whether the compiler will assign a function (including
            static function) in a default text section to its own individual section, whose name is <var>sectname</var>.<var>symname</var>, where <var>sectname</var> is the default text section's name, and <var>symname</var> is the function's symbol name. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Allocate Functions in Default Text Section to Individual Function Sections</strong> (<code>-individual_function_sections</code>) &#8212; Allocates a function in a default text section to its own individual section.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Allocate Functions in Default Text Sesction to Individual Function Sections</strong> (<code>-no_individual_function_sections</code>) &#8212; [default] Do not allocate functions in text section to individual sections. Keep them in the text section instead.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option should be passed both when compiling and when linking.  For more information, see <a href="ghs_help://build_v800.section.individual_sections">Individual Function and Variable Sections</a>.
         </p>
         <p><strong>Note:</strong> This option does not assign functions in custom text sections to individual sections. To assign functions in custom text sections
            to individual sections in addition to functions in default text sections, see <a href="ghs_help://build_v800.bod.IndividualPragmaFunctionSections">Individual Function Sections for Renamed Text Sections</a> and <a href="ghs_help://build_v800.bod.IndividualAttrFunctionSections">Individual Function Sections for User-Defined Text Sections</a>.
         </p>
      </div>
      <hr>
      <div id="bod.IndividualPragmaFunctionSections">
         <p>When the Individual Function Sections support is enabled, controls whether the compiler will assign a function (including
            static function) in a text section renamed by <code>#pragma ghs section <var>secttype</var>="<var>sectname</var>"</code> directive to its own individual section, whose name is <var>sectname</var>.<var>symname</var>, where <var>sectname</var> is the renamed text section's name, and <var>symname</var> is the function's symbol name.  By default, the Individual Function Sections support only assigns functions in the default
            <code>.text</code> section to individual sections. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Allocate Functions in Text Sections Renamed by #pragma to Individual Function Sections</strong> (<code>-individual_pragma_function_sections</code>) &#8212; Allocates a function in a renamed text section to its own individual section.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Allocate Functions in Text Sections Renamed by #pragma to Individual Function Sections</strong> (<code>-no_individual_pragma_function_sections</code>) &#8212; [default] Do not allocate functions in renamed text sections to individual sections. Keep them in the renamed text sections
                     instead.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.individual_sections">Individual Function and Variable Sections</a>.
         </p>
         <p><strong>Note:</strong> This option is only effective if <code>-individual_function_sections</code> (see <a href="ghs_help://build_v800.bod.IndividualFunctionSections">Individual Function Sections for Default Text Section</a>) is also used.
         </p>
      </div>
      <hr>
      <div id="bod.IndividualAttrFunctionSections">
         <p>When the Individual Function Sections support is enabled, controls whether the compiler will assign a function (including
            static function) in a user-defined text section by <code>__attribute__((section("<var>sectname</var>")))</code> directive to its own individual section, whose name is <var>sectname</var>.<var>symname</var>, where <var>sectname</var> is the user-defined text section's name, and <var>symname</var> is the function's symbol name.  By default, the Individual Function Sections support only assigns functions in the default
            <code>.text</code> section to individual sections. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Allocate Functions in User-Defined Text Sections by __attribute__ to Individual Function Sections</strong> (<code>-individual_attribute_function_sections</code>) &#8212; Allocates a function in a user-defined text section to its own individual section.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Allocate Functions in User-Defined Text Sections by __attribute__ to Individual Function Sections</strong> (<code>-no_individual_attribute_function_sections</code>) &#8212; [default] Do not allocate functions in user-defined text sections to individual sections. Keep them in the user-defined
                     text sections instead.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.individual_sections">Individual Function and Variable Sections</a>.
         </p>
         <p><strong>Note:</strong> This option is only effective if <code>-individual_function_sections</code> (see <a href="ghs_help://build_v800.bod.IndividualFunctionSections">Individual Function Sections for Default Text Section</a>) is also used.
         </p>
      </div>
      <hr>
      <div id="bod.FastMalloc">
         <p>Specifies whether to use a faster or less-fragmenting <code>malloc()</code> implementation. This option only affects stand-alone applications, and has no effect when Run Time Memory Checking (<code>-check=alloc</code> or <code>-check=memory</code>) is enabled.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-fast_malloc</code>) &#8212; [default] A separate allocation pool is maintained for small blocks, resulting in faster allocation times at the expense
                     of increased heap fragmentation. This version of <code>malloc()</code> has a slightly larger library footprint. INTEGRITY always uses this implementation, regardless of this option.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_fast_malloc</code>) &#8212; Use the <code>malloc()</code> implementation that shipped with older versions of the compiler.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_Old_Callt">
         <p>Older releases of MULTI (versions 5.1.x and earlier) made use of the <code>callt</code> instruction and its associated call table differently than current versions.  Previous releases used a statically allocated
            call table where the first 44 entries were reserved for specific library functions.  The tools now dynamically assign entries
            at link time, and entries are called by function name and resolved to a table index at link time.  However, this new behavior
            is incompatible with objects built with previous releases, since they will reference the table by hard-coded indices that
            will no longer map to the expected entry. While the linker will attempt to automatically detect such code and adopt a compatible
            strategy, this option is provided to force that behavior. The linker will give a warning when it detects a need to be backwards
            compatible. If all objects are rebuilt with newer tools, that warning can be avoided by adding a <code>.callt</code> section to the program's linker directives file (it should be placed before .text). Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-v800_old_callt</code>) &#8212; Forces the linker to reserve the first 44 entries of the call table for the same library routines that occupied these
                     entries in legacy releases.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_v800_old_callt</code>) &#8212; [default] Suggests that the linker can dynamically create a call table.  This option does not force this behavior, as
                     the linker will still revert to the <code>-v800_old_callt</code> behavior when it detects incompatible object files built with previous releases of the tools.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_CallT">
         <p>Controls the use of the V850E 
                                 <code>callt</code> instruction function prologues and epilogues. This option requires that you use the default Green Hills startup code. Permitted
            settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-callt</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_callt</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_CallTInt">
         <p>Controls whether the <code>CTPSW</code> and <code>CTPC</code> registers are saved in interrupt routines generated by the compiler. To use this option, you must also enable <code>-no_callt</code>. This option disables the use of library prologue routines. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-no_ignore_callt_state_in_interrupts</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-ignore_callt_state_in_interrupts</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_PrepareDispose">
         <p>Controls the use of the V850E 
                                 <code>prepare</code> and <code>dispose</code> instructions for function prologues and epilogues. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-prepare_dispose</code>) &#8212; [default when <code>-callt</code> is disabled]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_prepare_dispose</code>) &#8212; [default when <code>-callt</code> is enabled]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Enabling this option will override any use of the <code>callt</code> instruction for prologues or epilogues (see <a href="ghs_help://build_v800.bod.V800_CallT">Epilogues and Prologues via callt</a>).
         </p>
      </div>
      <hr>
      <div id="bod.V800_PushPop">
         <p>Controls the use of the RH850 
                                 <code>pushsp</code> and <code>popsp</code> instructions for interrupt function prologues and epilogues and for general function stack spills in some cases. Permitted
            settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-push_pop</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_push_pop</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_AllocateEP">
         <p>Controls an optimization that attempts to allocate pointer variables to the <code>EP</code> register in order to use short load and store instructions. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-allocate_ep</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_allocate_ep</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>The Tiny Data Area can interfere with this optimization, and you may obtain better results by disabling the <strong>Target&#8594;Text and Data Placement&#8594;V850 Tiny Data Area</strong>
                                 
                                  option (<code>-notda</code>
                                 
                                 ).
         </p>
      </div>
      <hr>
      <div id="bod.V800_TraceLoads">
         <p>Specifies whether or not to instrument load instructions whose addresses are not known to be from the stack with software
            trace instructions. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-rh850_trace_loads</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_rh850_trace_loads</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.SmallerBitops">
         <p>Controls a set of optimizations for reading and writing adjacent bitfields. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-smaller_bitops</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_smaller_bitops</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Note that these optimizations do not affect volatile bitfields.</p>
      </div>
      <hr>
      <div id="bod.V800_Allow1BitVolatile">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-allow_1bit_volatile_any_basetype</code>) &#8212; Allow the instructions <code>set1</code>, <code>clr1</code>, <code>tst1</code>, and <code>not1</code> to be used to access single-bit volatile bitfields with a base type larger than <code>char</code>. This results in more efficient code, but will result in single-byte accesses even though the volatile object has a type
                     larger than <code>char</code>. This was the default behavior in MULTI 4.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_allow_1bit_volatile_any_basetype</code>) &#8212; [default] Choose instructions that access volatile bitfields strictly according to the size of their base type.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_Allow1Bit">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-rh850_1bit</code>) &#8212; [default] Allow the compiler to use the instructions <code>CLR1</code>, <code>SET1</code>, and <code>TST1</code> as appropriate to access individual bits.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_rh850_1bit</code>) &#8212; Prevent the compiler from using the instructions <code>CLR1</code>, <code>SET1</code>, and <code>TST1</code>. The GHS libraries may still use these instructions for certain accesses even with this option.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Although the option has <code>rh850</code> in the name, the option applies equally to V850 and RH850 processors.
         </p>
         <p>The <code>-no_rh850_1bit</code> option is provided for applications which use an external memory bus that does not support read-modify-write operations.
            It is recommended that functions which operate on objects accessed over this bus be grouped into certain files so those files
            can be compiled with the <code>-no_rh850_1bit</code> option, while the rest of the application is compiled without it.
         </p>
      </div>
      <hr>
      <div id="bod.V800_DivQ">
         <p>When compiling for the V850E2R or later processors, this option specifies whether or not to use the <code>divq</code> and <code>divqu</code> instructions (divide quick) for integer division where possible. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-divq</code>) &#8212; [default] Use <code>divq</code> and <code>divqu</code> for integer division where possible.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_divq</code>) &#8212; Do not use <code>divq</code> or <code>divqu</code>. Because these instructions have a variable execution time depending on the values of their arguments, setting this option
                     results in more deterministic behavior.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_Recipf">
         <p>Controls whether the compiler performs a divide or uses the <code>recipf.s</code> and <code>recipf.d</code> instructions when generating code for floating-point reciprocal operations (<code>1/x</code>). This option is only valid on hardware that implements these instructions. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-recipf</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_recipf</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_FPU3">
         <p>Controls the use of the RH850 
                                 FPU 3.0 instructions in the compiler and the assembler. When enabled, the compiler will use the fused floating-point multiply-add
            and multiply-subtract instructions FMAF.S,FMSF.S,FNMAF.S,FNMSF.S in place of MADDF.S,MSUBF.S,NMADDF.S,NMSUBF.S. This will also enable the intrinsics __CVTF.HS and __CVTF.SH in the compiler. When disabled, the compiler will not use the FPU 3.0 instructions and disallow the intrinsics, and the assembler will report error if these instructions are used in the assembly.
         </p>
         <p> This option applies only to RH850 and will be ignored when used on other CPU options. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-fpu=fpu30</code>) &#8212; [default for RH850]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-fpu=fpu20</code>) &#8212; [default for non-RH850]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_SIMD">
         <p>Specifies whether or not to enable support for the SIMD coprocessor in the toolchain. This will enable the SIMD intrinsics in the compiler and SIMD instruction support in the assembler. This option applies only to targets that support a SIMD coprocessor. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-rh850_simd</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_rh850_simd</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_ISR_Save_R4R5">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-v850_isr_save_r4r5</code>) &#8212; Forces the <code>r4</code> and <code>r5</code> registers to be saved and restored in interrupt routine prologue and epilogue functions.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_v850_isr_save_r4r5</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_ISR_Save_EIIC">
         <p>Controls whether the compiler will save the <code>EIIC</code> register in interrupt prolog.  Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-v850_isr_save_eiic</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_v850_isr_save_eiic</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p><strong>Note:</strong> For FE-level interrupt routines, this option affects the saving and restoring of the <code>FEIC</code> register instead.
         </p>
      </div>
      <hr>
      <div id="bod.V800_Eint_Erratum">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-rh850_eint_erratum</code>) &#8212;
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_rh850_eint_erratum</code>) &#8212;
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_4ByteWordOffset">
         <p>Forces the compiler and linker to ensure that offsets of 32-bit load and store instructions are 4-byte aligned. Generally
            the RH850 architecture requires the final computed address to be 4-byte aligned, but not the offset. Permitted settings for this option
            are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-rh850_4bytewordoffset</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_rh850_4bytewordoffset</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_64bitLoadStore">
         <p>When compiling for the RH850 or later processors, specifies whether or not to use the 64-bit load (<code>ld.dw</code>) and 64-bit store (<code>st.dw</code>) instructions in the compiler where possible. This option does not change instructions used in the library. Permitted settings
            for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-64bit_load_store</code>) &#8212; [default] Use the 64-bit load (<code>ld.dw</code>) and 64-bit store (<code>st.dw</code>) instructions in the compiler where possible.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_64bit_load_store</code>) &#8212; Do not use the 64-bit load (<code>ld.dw</code>) or 64-bit store (<code>st.dw</code>) instructions in the compiler. 
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_FPSIMD">
         <p>Specifies whether or not to enable support for the Floating-Point SIMD coprocessor in the toolchain and which of the two modes to enable. Enabling FPSIMD will enable the FPSIMD intrinsics in the compiler and FPSIMD instruction support in the assembler. This option applies only to targets that support a FPSIMD coprocessor (RH850 and later). Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>No Floating-Point SIMD</strong> (<code>-rh850_fpsimd=none</code>) &#8212; [default] Disable Floating-Point SIMD support in the toolchain. 
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Floating-Point SIMD in Full Register Configuration Mode</strong> (<code>-rh850_fpsimd=full</code>) &#8212; Enable Floating-Point SIMD in Full Register Configuration mode. In this mode, all vector registers (<code>wr0</code> - <code>wr31</code>) are 128 bits in hardware and available for use in all S1
                                                   /S2/S4 type instructions, which operate on the lower 1, 2 and all 4 elements of vectors respectively. 
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Floating-Point SIMD in Half Register Configuration Mode</strong> (<code>-rh850_fpsimd=half</code>) &#8212; Enable Floating-Point SIMD in Half Register Configuration mode. In this mode, the 32 vector registers are physically 64 bits in hardware, so even though
                     they are treated as 128 bits from the programmer's point of view, there are some constraints on how the registers can be used
                     in the vector instructions. All 32 vector registers (<code>wr0</code> - <code>wr31</code>) can be used in a S1 or S2 instruction (which operates on the lower 1 or 2 elements of vectors respectively), but only <code>wr0</code> - <code>wr15</code> can be used in a S4 instruction (which operates on all 4 elements of a vector). The assembler will report error if a register in <code>wr16</code> - <code>wr31</code> is used in a S4 instruction. Further more, if a register <code>wrN</code> (where 0 &lt;= <code>N</code> &lt;= 15) is used in a S4 instruction, <code>wrN+16</code> cannot be used in a S1/S2 instruction. The assembler and the linker will report error if such conflicts are detected among S4 and S1/S2 instructions.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.V800_CheckRH850ABIFlags">
         <p>When building for the RH850 processors, specifies whether or not to enable the detection of incompatible RH850 
                                 ABI flags among object files in the linker when linking. If enabled, the linker will check for incompatible ABI flags and will emit error when such flags are found. See <code>.rh850_flags</code> in <a href="ghs_help://build_v800.section.rh850_directives">RH850 Directives</a> for details on RH850 
                                 ABI flags. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-check_rh850_abi_flags</code>) &#8212; [default] Check for incompatible ABI flags among object files in the linker.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_check_rh850_abi_flags</code>) &#8212; Do not check for incompatible ABI flags among object files in the linker. 
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.AltSysLib">
         <p>Specifies an alternate system library, which is able to override parts of the default system library (<strong>libsys</strong>). <code>-syslib</code> can be used to allow an operating system to integrate with the C library without modifying the system library. The equivalent
            driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-syslib=<var>library</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.OsDir">
         <p>Specifies the root of the operating system distribution. If you plan to work on your project with both Windows and Linux/Solaris
            hosts, we recommend that you use forward slashes (<code>/</code>) in the path. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-os_dir <var>directory</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ThreadX_EventLogging">
         <p>This option is available for ThreadX projects only.</p>
         <p>Controls <strong>event logging</strong>, which collects event data for viewing and analysis in the MULTI EventAnalyzer (see <a href="ghs_help://$MULTI.section_trace_eventanalyzer">the documentation about viewing trace events in the EventAnalyzer</a>). Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-event_logging</code>) &#8212; Enables event logging by defining the <code>TX_ENABLE_EVENT_LOGGING</code> preprocessor symbol and linking with the <strong>txe.a</strong> ThreadX library.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_event_logging</code>) &#8212; [default] Links with the standard <strong>tx.a</strong> ThreadX library.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Integrity_Srecord_Image">
         <p>Creates an S-Record file image. For more information, see <a href="ghs_help://build_v800.section.the_gsrec_utility_program">The gsrec Utility Program</a>. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-srec</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.OutputDir">
         <p>Puts object files into the specified <var>directory</var>, which is often a subdirectory of the current working directory. Along with the object files, the assembly listings, debugging
            information files, inliner files, and other intermediate files that have the same base name as the object file but a different
            suffix are also put into this directory. Note that the output of the linker and the output of the archiver are never put into
            the object file output directory. If this option is not specified, the object files will be put into the current working directory.
         </p>
         <p>Multiple projects may not share an object directory.</p>
         <p>The equivalent driver option is:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                
                                                <code>-object_dir=<var>directory</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.ActLike">
         <p>Specifies a previous version of the compiler in order to emulate specific behaviors for backwards compatibility. Not all behaviors
            are emulated; additional warnings may need to be suppressed or enabled for compatibility. Note that unless Green Hills Technical
            Support instructs you to do otherwise, you should not change the default <code>-act_like</code> setting for products (such as INTEGRITY) in which it is already set.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>5.0</strong> (<code>-act_like=5.0</code>) &#8212; Act similarly to MULTI 5.0.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>5.2</strong> (<code>-act_like=5.2</code>) &#8212; Act similarly to MULTI 5.2.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>2012.1</strong> (<code>-act_like=2012.1</code>) &#8212; Act similarly to Green Hills Compiler 2012.1.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>2012.5</strong> (<code>-act_like=2012.5</code>) &#8212; Act similarly to Green Hills Compiler 2012.5.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>2013.1</strong> (<code>-act_like=2013.1</code>) &#8212; Act similarly to Green Hills Compiler 2013.1.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>2013.5</strong> (<code>-act_like=2013.5</code>) &#8212; Act similarly to Green Hills Compiler 2013.5.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>2014.1</strong> (<code>-act_like=2014.1</code>) &#8212; Act similarly to Green Hills Compiler 2014.1.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>2015.1</strong> (<code>-act_like=2015.1</code>) &#8212; Act similarly to Green Hills Compiler 2015.1.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Latest</strong> (<code>-act_like=latest</code>) &#8212; [default] Do not emulate previous behavior.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.DbgSourceRoot">
         <p>Specifies a source root for use by the MULTI Debugger <code>sourceroot</code> command (see <a href="ghs_help://$MULTI.debug_cmd_book">MULTI: Debugging Command Reference</a>). The Debugger resolves paths relative to this root. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-dbg_source_root <var>path</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.IncludeDirectories">
         <p>Specifies a <var>directory</var> in which the compiler should search for header files. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-I<var>directory</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>When the compiler processes source files that have <code>#include "<var>header_file</var>"</code> or <code>#include &lt;<var>header_file</var>&gt;</code> directives, it looks for <var>header_file</var> in any directories specified with this option. You can specify multiple directories, and the compiler will search them in
            the order in which they are specified. If the source file's <code>#include</code> directive declares a full path to the header file, then the compiler ignores any directories specified with this option.
            
                              
                              
                           
         </p>
         <p>
                              For a detailed discussion of how the compiler searches for included files, see <a href="ghs_help://build_v800.section.search_for_your_headers">Instructing the Compiler to Search for Your Headers</a>.
         </p>
         <p>Do not use this option to specify the location of Green Hills header files. The driver selects these files automatically,
            based on other options.
         </p>
      </div>
      <hr>
      <div id="bod.LibDirs">
         <p>Specifies a <var>directory</var> in which the linker searches for libraries specified by the <code>-l</code> option. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-L<var>directory</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>All <code>-L</code> options on the command line are processed before the linker searches for the libraries specified by <code>-l</code>. If you use this option multiple times, the builder searches directories in the order in which they appear on the command
            line.
         </p>
         <p>If you are not using the default startup code, note that this option changes only the search path for libraries. This means
            that the linker takes <strong>crt0.o</strong> from the default location, even if it finds <strong>libstartup.a</strong> and <strong>libsys.a</strong> in another specified location. For more information about how to configure your project to use custom startup code, see <a href="ghs_help://$MULTI.section.settings_standalone">the documentation about settings for Stand-Alone programs</a>.
                           
         </p>
         <p>Do not use this option to specify the location of Green Hills libraries. The driver selects these libraries automatically,
            based on other options.
         </p>
      </div>
      <hr>
      <div id="bod.Libraries">
         <p>Specifies a <var>library</var> for the builder to link against. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-l<var>name</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>If <var>name</var> does not have an extension or directory path, it is assumed to be an abbreviation for <strong>lib<var>name</var>.a</strong>. If <var>name</var> does not have a directory path, the driver and linker search for <strong>lib<var>name</var>.a</strong> in the directories specified by the <code>-L<var>dir</var>
                                 </code> option in the order that the <code>-L</code> options were specified, followed by a list of default directories. For example, to specify a library <code>libfoo.a</code> that exists in a default directory, use:
            <br><pre>-lfoo</pre><br>
                           
         </p>
         <p>If <var>name</var> has a directory path, <var>name</var> is assumed to be the complete filename of a library or object file that is passed directly to the linker without the <code>-l</code> option.
         </p>
         <p>You can specify multiple libraries, and they will be linked against in the order specified. When using the driver, each library
            must be specified with its own <code>-l</code> option, for example:
         </p>
         <p>
            
                              <br><pre>-lfoo -lbar -lbaz</pre><br>
                           
         </p>
         <p>To prevent multiply defined symbols, it is recommended that you list your source files on the command line first, and then
            any <code>-l<var>library</var>
                                 </code> libraries.
         </p>
         <p>Do not use this option to specify the location of Green Hills libraries. The driver selects these libraries automatically,
            based on other options.
         </p>
      </div>
      <hr>
      <div id="bod.OutputName">
         <p>Names the generated output file. The output file type (for example, a library or an assembly file) depends on the other options
            that have been specified. The builder enforces specific suffixes for some types of output files. This option has no effect
            when set on a Top Project. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-o <var>filename</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>Unless there is a single input file on the command line, you cannot use <code>-o</code> with <code>-c</code>, <code>-E</code>, <code>-P</code>, <code>-Q</code>, or <code>-S</code>.
         </p>
      </div>
      <hr>
      <div id="bod.SpecialSourceDir">
         <p>Specifies a <var>directory</var> in which the Builder should search for source files. The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                <code>:sourceDir=<var>directory</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>The Builder searches for source files in the same directory as the project file that specifies them before searching directories
            specified by <code>:sourceDir</code>.
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialOutputDir">
         <p>Specifies the path where object files (and, in addition, any custom output file types) are written to, relative to the location
            of your Top Project (usually <strong>default.gpj</strong>). The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                <code>:outputDir=<var>directory</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>This option is most useful for custom tools that do not allow you to specify a directory for intermediate output. For stand-alone
            projects that use only the Green Hills Compiler Driver, use <code>-object_dir</code> instead. <code>-object_dir</code> overrides this option.
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.OptimizationStrategy">
         <p>Specifies the high-level optimization strategy that MULTI uses when compiling your project. Permitted settings for this option
            are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Maximum Debugging And No Inlining</strong> (<code>-Omaxdebug</code>) &#8212; Disables inlining and all optimizations.
                                                
                     
                                                
                     <ul>
                        <li>
                           <p>
                                                                  <strong>Debugging ability</strong> &#8212; excellent
                           </p>
                        </li>
                        <li>
                           <p>
                                                                  <strong>Code size and speed</strong> &#8212; not optimized
                           </p>
                        </li>
                        <li>
                           <p>
                                                                  <strong>Compilation speed</strong> &#8212; moderately fast
                           </p>
                        </li>
                        <li>
                           <p>
                                                                  <strong>Intended use</strong> &#8212; development for code that has a lot of inline functions
                           </p>
                        </li>
                     </ul>
                                             
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Maximum Debugging And Limited Optimizations</strong> (<code>-Omoredebug</code>) &#8212; [default] Enables optimizations that do not affect debugging. This optimization strategy does not allow the selection
                     of individual optimizations.
                                                
                                             
                  </p>
                  <ul>
                     <li>
                        <p>
                                                            <strong>Debugging ability</strong> &#8212; excellent (except for inline functions)
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Code size and speed</strong> &#8212; slightly optimized
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Compilation speed</strong> &#8212; moderately fast
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Intended use</strong> &#8212; development; production for projects that are not size restricted and that use the same builds as development
                        </p>
                     </li>
                  </ul>
               </li>
               <li>
                  <p>
                                                <strong>Optimize for Debuggability</strong> (<code>-Odebug</code>) &#8212; Enables optimizations that do not affect debugging. This optimization strategy does not allow the selection of individual
                     optimizations.
                                                
                                             
                  </p>
                  <ul>
                     <li>
                        <p>
                                                            <strong>Debugging ability</strong> &#8212; good (debug information is unavailable in rare cases)
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Code size and speed</strong> &#8212; moderately optimized
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Compilation speed</strong> &#8212; fast
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Intended use</strong> &#8212; development; production for projects that are not size restricted and that use the same builds as development
                        </p>
                     </li>
                  </ul>
               </li>
               <li>
                  <p>
                                                <strong>Optimize for General Use</strong> (<code>-Ogeneral</code> or <code>-O</code>) &#8212; Enables optimizations that improve both size and performance.
                                                
                                                
                                                
                                             
                  </p>
                  <ul>
                     <li>
                        <p>
                                                            <strong>Debugging ability</strong> &#8212; moderate (debug information is occasionally inaccurate)
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Code size and speed</strong> &#8212; optimal for general performance
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Compilation speed</strong> &#8212; moderate
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Intended use</strong> &#8212; production, when speed and size are equally important
                        </p>
                     </li>
                  </ul>
               </li>
               <li>
                  <p>
                                                <strong>Optimize for Size</strong> (<code>-Osize</code>) &#8212; Enables optimizations that improve both size and performance, and additional optimizations that improve code size at the
                     expense of performance. When using this strategy, apply it as globally as possible. The <code>-Ospace</code> option is equivalent to <code>-Osize</code>.
                                                
                                             
                  </p>
                  <ul>
                     <li>
                        <p>
                                                            <strong>Debugging ability</strong> &#8212; moderate (debug information is occasionally inaccurate)
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Code size and speed</strong> &#8212; optimal size, moderately fast
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Compilation speed</strong> &#8212; moderate
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Intended use</strong> &#8212; production, for size-restricted projects
                        </p>
                     </li>
                  </ul>
               </li>
               <li>
                  <p>
                                                <strong>Optimize for Speed</strong> (<code>-Ospeed</code>) &#8212; Enables optimizations that improve both size and performance, and additional optimizations that improve performance at
                     the expense of size. We recommend that you apply this strategy only for files and functions that use the most program execution
                     time. You can then set a different optimization strategy globally (on your project file) to get multiple benefits.
                                                
                                             
                  </p>
                  <ul>
                     <li>
                        <p>
                                                            <strong>Debugging ability</strong> &#8212; poor
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Code size and speed</strong> &#8212; moderately small, optimal speed
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Compilation speed</strong> &#8212; moderate
                        </p>
                     </li>
                     <li>
                        <p>
                                                            <strong>Intended use</strong> &#8212; production, when speed is more important than size
                        </p>
                     </li>
                  </ul>
               </li>
               <li>
                  <p>
                                                <strong>No Optimizations</strong> (<code>-Onone</code>) &#8212; Disables all optimizations and provides the most straightforward code generation. Inlining of explicitly marked functions
                     is performed at this level.
                                                
                     
                                                
                     <ul>
                        <li>
                           <p>
                                                                  <strong>Debugging ability</strong> &#8212; good
                           </p>
                        </li>
                        <li>
                           <p>
                                                                  <strong>Code size and speed</strong> &#8212; not optimized
                           </p>
                        </li>
                        <li>
                           <p>
                                                                  <strong>Compilation speed</strong> &#8212; fastest
                           </p>
                        </li>
                        <li>
                           <p>
                                                                  <strong>Intended use</strong> &#8212; when compilation speed is your highest priority, or when instructed by Green Hills support
                           </p>
                        </li>
                     </ul>
                                             
                  </p>
               </li>
            </ul>
                              
                           
         </p>
         <p>When deciding how to optimize your program, always begin by selecting the optimization strategy that is the best fit for your
            project. If you must fine-tune a strategy to your specifications, see <a href="ghs_help://build_v800.chapter.optimizations">Optimizing Your Programs</a> and <a href="ghs_help://build_v800.section.optimization_options">Optimization Options</a>.
         </p>
      </div>
      <hr>
      <div id="bod.InliningOptimizations">
         <p>Enables <strong>two-pass inlining</strong>. If no optimization strategy is selected, this option enables <code>-Ospeed</code>. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-OI</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-Onoinline</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
                           
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.inlining">Inlining Optimizations</a>.
         </p>
      </div>
      <hr>
      <div id="bod.LinkOptimizations">
         <p>Controls the linker optimizations listed in <a href="ghs_help://build_v800.section.linker_optimizations">Linker Optimizations</a>. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-Olink</code>) &#8212; The linker optimizations that are enabled depend upon whether you are optimizing for speed or size. Many of these optimizations
                     make complex changes to your code, and might slow down the link stage, be harder to debug, or have other drawbacks. To disable
                     individual linker optimizations, set them to <strong>Off</strong> in combination with this option.
                  </p>
                  <p>
                                                <code>-Olink</code> implicitly enables <code>-delete</code>. When building shared objects, this could result in unresolved symbols. For more information about linker-specific options,
                     see <a href="ghs_help://build_v800.section.elxr_linker_options">Linker-Specific Options</a>.
                  </p>
                  <p>For more information about <code>-delete</code>, see <a href="ghs_help://build_v800.section.deleting_unused_functions">Deleting Unused Functions</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-Onolink</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.InterproceduralOptimizations">
         <p>Performs optimizations based on all available functions, unlike most other optimizations that only consider one function at
            a time. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Wholeprogram</strong> (<code>-Owholeprogram</code>) &#8212; Enabling wholeprogram optimizations allows program control and data flow to be analyzed at a high level. Speed and size optimizations such as one
                     call-site inlining, interprocedural constant propagation and dead code elimination, and interprocedural alias analysis are
                     performed. This option can improve program speed and size, often simultaneously. If no optimization strategy is selected,
                     this option enables <code>-Ospeed</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Interprocedural</strong> (<code>-Ointerproc</code>) &#8212; Enabling interprocedural optimizations allows optimizations based on knowledge of functions being called, such as interprocedural
                     alias analysis. Unlike <code>-Owholeprogram</code>, <code>-Ointerproc</code> does not require that the entire program is available during compilation. However, a strict subset of the optimizations from
                     <code>-Owholeprogram</code> are applied with <code>-Ointerproc</code>. If no optimization strategy is selected, this option enables <code>-Ospeed</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Analysis without optimizations</strong> (<code>-Oip_analysis_only</code>) &#8212; Performs interprocedural analysis but does not apply any optimizations.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-Onoipa</code>) &#8212; [default] Disables all interprocedural optimizations.
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For more information about using interprocedural optimizations, see <a href="ghs_help://build_v800.section.interprocedural">Interprocedural Optimizations</a>.
         </p>
      </div>
      <hr>
      <div id="bod.OptimizationScopeRestriction">
         <p>Restricts the scope of optimizations to ensure the retention of debugging information. Permitted settings for this option
            are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Restrict peephole optimization scope to increase debuggability</strong> (<code>-Olimit=peephole</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Restrict pipeline optimization scope to increase debuggability</strong> (<code>-Olimit=pipeline</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.InliningThresholds">
         <p>Controls whether the compiler will consider larger functions when <code>-OI</code> is enabled. If no optimization strategy is selected, this option enables <code>-Ospeed</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-OB</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onobig</code>) &#8212; [default] You can use <code>-Onobig</code> in a MULTI Project (<strong>.gpj</strong>) file, but there is no equivalent driver option.
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.varying_inlining_thresholds">Varying Inlining Thresholds</a>.
         </p>
      </div>
      <hr>
      <div id="bod.LoopUnrollBig">
         <p>Controls the size of the loops that the compiler will consider for unrolling. Has no effect unless loop unrolling is enabled.
            Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Ounrollbig</code>) &#8212; Consider larger loops for unrolling.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onounrollbig</code>)
                  </p>
               </li>
            </ul> 
                                 
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.loop_unrolling_optimization">Loop Unrolling</a>.
         </p>
      </div>
      <hr>
      <div id="bod.CompileSpeedVsOptimization">
         <p>Controls the aggressiveness with which the compiler will pursue optimizations, without regard for compile time. Permitted
            settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Omax</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onomax</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For example, to optimize most aggressively for size, without regard for compilation time, set <strong>Optimization&#8594;Optimization Strategy</strong>
                                 
                                  to <strong>Optimize for Size</strong> (<code>-Osize</code>) and set this option to <strong>On</strong>.
                              
         </p>
      </div>
      <hr>
      <div id="bod.ExternalSymbols">
         <p>This option should only be used if you are optimizing with wholeprogram optimizations, and the entire program is not available during each compilation. This often occurs if you have assembly files
            or other code that is linked in. Because wholeprogram optimizations rely on the knowledge of all function and variable uses, if a function or variable is referenced externally
            (for example, from an assembly file) you must list that symbol with <code>-external</code>.
         </p>
         <p>If you are using linker optimizations and want to prevent a function from being deleted, you may also need to pass the <code>-keep</code> linker option. For more information about linker-specific options, see <a href="ghs_help://build_v800.section.elxr_linker_options">Linker-Specific Options</a>.
         </p>
         <p>The equivalent driver option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-external=<var>function1</var> -external=<var>function2</var> -external=<var>variable1</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>
                                 <var>function1</var>, <var>function2</var>, and <var>variable1</var> are functions and variables in the source code that can be referenced externally.
         </p>
      </div>
      <hr>
      <div id="bod.ExternalSymbolFiles">
         <p>Takes a file listing externally visible symbols rather than taking the symbol names explicitly. If you have many symbols that
            can be referenced externally, you might want to list them in a file and pass this file to the compiler rather than specifying
            each symbol as shown above.
         </p>
         <p>The equivalent driver option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-external_file=<var>file1</var> -external_file=<var>file2</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>
                                 <var>file1</var> and <var>file2</var> are the complete paths of the files listing symbols that can be referenced externally.
         </p>
         <p>These files can contain comma- or white-space separated symbol names listing those symbols that are externally visible. Additionally,
            these files can be composed of global symbols defined or used in object files and libraries that are not specified during
            compilation, but are linked into the final executable. A list of these symbols can be generated by using the <code>gnm</code> utility (see <a href="ghs_help://build_v800.section.the_gnm_utility_program">The gnm Utility Program</a> for more information).
         </p>
      </div>
      <hr>
      <div id="bod.IPOnesiteInliningOptimizations">
         <p>Inlines functions that only have one call-site. This option is only meaningful if you pass the <code>-Ointerproc</code> or <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oiponesiteinlining</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoiponesiteinlining</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPDeleteFunctionsOptimizations">
         <p>Deletes unreachable functions. With or without this option enabled, functions may be removed if all of their uses are inlined.
            This option is only meaningful if you pass the <code>-Ointerproc</code> or <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipdeletefunctions</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipdeletefunctions</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPDeleteGlobalsOptimizations">
         <p>Deletes constant-value global variables that are not indirectly referenced. This option is only meaningful if you pass the
            <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipdeleteglobals</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipdeleteglobals</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPLocalizeGlobalsOptimizations">
         <p>Replaces some global variables using local register variables. This option is only meaningful if you pass the <code>-Ointerproc</code> or <code>-Owholeprogram</code> option, and is most effective with <code>-Owholeprogram</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oiplocalizeglobals</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoiplocalizeglobals</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPConstantGlobalsOptimizations">
         <p>When a global variable is initialized to a constant value and never changed, and the variable is not indirectly referenced,
            the initial value is propagated into the uses of the variable. This option is only meaningful if you pass the <code>-Ointerproc</code> or <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipconstglobals</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipconstglobals</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPSmallInliningOptimizations">
         <p>Functions are inlined when the inlined size might be less than the size of the call to the function. This option is only meaningful
            if you pass the <code>-Ointerproc</code> or <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipsmallinlining</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipsmallinlining</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPConstPropOptimizations">
         <p>If a parameter of a function is always set to the same constant value by callers, this optimization treats uses of that parameter
            in that function as a constant instead of setting the parameter in callers. This option is only meaningful if you pass the
            <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipconstprop</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipconstprop</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPRemoveParamsOptimizations">
         <p>When certain parameters are not required, the parameters are removed, and function calls do not pass arguments for them. This
            option is only meaningful if you pass the <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipremoveparams</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipremoveparams</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPLimitInliningOptimizations">
         <p>Limits the amount of inlining performed by interprocedural optimizations. This option is only meaningful if you pass the <code>-Ointerproc</code> or <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oiplimitinlining</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoiplimitinlining</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPConstReturnsOptimizations">
         <p>When functions return constant values, those values can be propagated to the caller. This option is only meaningful if you
            pass the <code>-Ointerproc</code> or <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipconstantreturns</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipconstantreturns</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPRemoveReturnsOptimizations">
         <p>When the result of a function call is not required, the return statement is removed. This option is only meaningful if you
            pass the <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipremovereturns</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipremovereturns</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPAliasReadsOptimizations">
         <p>Determines what memory can be read by function calls. This option is only meaningful if you pass the <code>-Ointerproc</code> or <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipaliasreads</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipaliasreads</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPAliasWritesOptimizations">
         <p>Determines what memory can be written by function calls. This option is only meaningful if you pass the <code>-Ointerproc</code> or <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipaliaswrites</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipaliaswrites</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IPAliasLibFuncsOptimizations">
         <p>Performs interprocedural alias analysis on some common library functions such as <code>printf</code>, <code>strlen</code>, and <code>fopen</code>. This option is only meaningful if you pass the <code>-Ointerproc</code> or <code>-Owholeprogram</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oipaliaslibfuncs</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoipaliaslibfuncs</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Fast">
         <p>Prefer speed over size when optimizing specific functions. The equivalent driver option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>--fast=<var>function1</var>[,<var>function2</var>&#8230;]</code>
                                                
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
         <p>This option has no effect unless it is used with an <strong>Optimization&#8594;Optimization Strategy</strong>
                                 
                                  other than <code>-Onone</code>, <code>-Omoredebug</code>, <code>-Odebug</code>, or <code>-Omaxdebug</code>. The speed optimizations enabled by <code>--fast</code> will not always be identical to those enabled by <code>-Ospeed</code>.
         </p>
      </div>
      <hr>
      <div id="bod.Small">
         <p>Prefer size over speed when optimizing specific functions. The equivalent driver option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>--small=<var>function1</var>[,<var>function2</var>&#8230;]</code>
                                                
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
         <p>This option has no effect unless it is used with an <strong>Optimization&#8594;Optimization Strategy</strong>
                                 
                                  other than <code>-Onone</code>, <code>-Omoredebug</code>, <code>-Odebug</code>, or <code>-Omaxdebug</code>. The size optimizations enabled by <code>--small</code> will not always be identical to those enabled by <code>-Osize</code>.
         </p>
      </div>
      <hr>
      <div id="bod.InliningFunctions">
         <p>Enables two-pass inlining for specific functions. If not optimization strategy is selected, this option enables <code>-Ospeed</code>. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-OI=<var>function1</var>[,<var>function2</var>...]</code>
                                                
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.inlining">Inlining Optimizations</a>.
         </p>
      </div>
      <hr>
      <div id="bod.LoopFunctions">
         <p>Enables loop optimizations for individual functions. If no optimization strategy is selected, this option enables <code>-Ospeed</code>. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-OL=<var>function1</var>[,<var>function2</var>...]</code>
                                                
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.loop_optimizations">Loop Optimizations</a>.
         </p>
      </div>
      <hr>
      <div id="bod.DebugLevel">
         <p>Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>MULTI</strong> (<code>-G</code>) &#8212; Generates source-level debugging information, and allows procedure calls from the MULTI Debugger's command line.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Plain</strong> (<code>-g</code>) &#8212; Generates source-level debugging information, but does not allow procedure calls.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Stack Trace</strong> (<code>-gs</code>) &#8212; Generates minimal debugging information sufficient for MULTI to perform stack traces, but not sufficient for source-level
                     debugging. The Green Hills libraries are compiled with this option.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>None</strong> (<code>--no_debug</code>) &#8212; [default] Generates no debugging information.
                  </p>
               </li>
            </ul> 
                           
         </p>
      </div>
      <hr>
      <div id="bod.EntryExitLinking">
         <p>Controls how the linker treats function entry/exit instrumentation. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Enable</strong> (<code>-record_entry_exit_history</code>) &#8212; Function entry/exit instrumentation is not replaced or removed by the linker.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Disable</strong> (<code>-mute_entry_exit_history</code>) &#8212; Function entry/exit instrumentation is disabled by the linker and replaced with <code>NOP</code> instructions.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Strip</strong> (<code>-strip_entry_exit_history</code>) &#8212; [default] Function entry/exit instrumentation is disabled by the linker and stripped from the executable. (Stripped code
                     is similar though not identical to code without function entry/exit instrumentation.)
                  </p>
               </li>
            </ul>For more information about function entry/exit history, see <a href="ghs_help://build_v800.section.fee_logging">Function Entry/Exit History</a>.
         </p>
      </div>
      <hr>
      <div id="bod.EagleLinking">
         <p>Controls the global inclusion of EAGLE features at link time. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-strip_eagle_log</code>) &#8212; [default] EAGLE logging is stripped from the code by the linker. (Stripped code is similar though not identical to code
                     without EAGLE logging.).
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-enable_eagle_log</code>) &#8212; Enables EAGLE logging.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.BlockCoverageProfiling">
         <p>Controls <strong>block coverage</strong> profiling, which records a flag or a count for each basic block in your program. A basic block is a set of instructions for
            which if the first instruction is executed, the remaining instructions in the block must also be executed. Permitted settings
            for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Flag</strong> (<code>-coverage=flag</code>) &#8212; Records whether or not each block is executed.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Count (32-bit counters)</strong> (<code>-coverage=count</code>) &#8212; Records how many times each block is executed using a 32-bit counter.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Count (64-bit counters)</strong> (<code>-coverage=count64</code>) &#8212; Records how many times each block is executed using a 64-bit counter. This option is not available with MULTI 6 or older.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-coverage=none</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>Block coverage profiling does not use locking or an atomic increment to achieve thread safety. If you use count profiling
            with multi-threaded code or in interrupt handlers a block's counter may be inaccurate if two increments occur simultaneously.
            Flag profiling is thread-safe.
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.block_coverage_profiling">Enabling Instrumented Coverage or Performance Profiling</a>.
         </p>
      </div>
      <hr>
      <div id="bod.TimerProfile">
         <p>Controls <strong>timing</strong> profiling, which records the time spent in each function. You should only use this option in stand-alone and u-velOSity projects. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-timer_profile</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_timer_profile</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
                              
                           
         </p>
         <p>Enabling target-based timing profiling requires that timer code be present and running on the target. For more information,
            see <a href="ghs_help://build_v800.section.target_based_timing_profiling">Enabling Sampled Profiling</a>.
         </p>
         <p><strong>Note:</strong> To obtain PC samples for a Linux native application, you must link with the <strong>libmulti.a</strong> library.
         </p>
      </div>
      <hr>
      <div id="bod.RuntimeErrorChecks">
         <p>Controls run-time error checking, which can be helpful during a debugging session, but which increases the size and reduces
            the speed of your application. Run-time error checks catch many occurrences of the common errors described below. The syntax
            for this option is:
         </p>
         <p>
                              <code>-check=</code>
                              <code>
                                    <var>type</var>[,<var>type</var>]</code>&#8230;
         </p>
         <p>
                              <code>-check=</code>
                              <code>
                                    <var>type</var>
                                 </code> [<code>-check=</code>
                              <code>
                                    <var>type</var>
                                 </code>]&#8230;
         </p>
         <p>Enables run-time error checks for each specified <var>type</var>.
         </p>
         <p>
                              <code>-check=</code>
                              <code>all[,no<var>type</var>]</code>&#8230;
         </p>
         <p>
                              <code>-check=</code>
                              <code>all</code> [<code>-check=</code>
                              <code>no<var>type</var>
                                 </code>]&#8230;
         </p>
         <p>Enables all run-time error checks. To enable all checks except those of a certain type, follow this option with <code>,no<var>type</var>
                                 </code> or <code>-check=no<var>type</var>
                                 </code>.
         </p>
         <p>Run-time error checks are also enabled by MISRA 2004 rule 12.8 and 21.1, and MISRA 1998 rules 4, 38, and 107. The various checks generate warnings or errors as specified below. Permitted values for <var>type</var> are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>All</strong> (<code>-check=all</code>) &#8212; Enables all run-time error checks. This option does not affect run-time memory checks.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>None</strong> (<code>-check=none</code>) &#8212; [default] Disables all run-time error checks. This option does not affect run-time memory checks.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Assignment Bounds</strong> (<code>-check=assignbound</code>) &#8212; Generates a warning if a value assigned to an integral or enumerated object is out-of-bounds for the object being assigned
                     to. No warning is issued when an assignment is made to a sparsely populated <code>enum</code> if the assignment is within the range of the <code>enum</code>, but is not one of the defined values. For example:
                     <br><pre>enum E { one=1, three=3 } e;

void func(void)
{
    e = (enum E)0; /* warning */
    e = (enum E)1; /* no warning */
    e = (enum E)2; /* no warning */
    e = (enum E)3; /* no warning */
    e = (enum E)4; /* warning */
} </pre><br>
                                             
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Array Bounds</strong> (<code>-check=bounds</code>) &#8212; Generates an error if an array is accessed with an invalid index. Only arrays whose bounds are known at compile time are
                     checked; incomplete and variable-length arrays (VLAs) are not checked. The compiler checks each individual array index separately. For example:
                  </p>
                  <p>
                     
                                                <br><pre>int a[2][3];
a[0][3] = 0; // produces a run-time error
a[1][0] = 0; // equivalent behavior, no run-time error</pre><br>
                                             
                  </p>
                  <p>This option does not output a run-time check for the following example, because the <code>arr</code> parameter's type decays into <code>int*</code> and could legitimately point to an array of any size:
                     <br><pre>int func(int arr[20], int i)
{
    return arr[i];
}</pre><br>
                                             
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Case Label Bounds</strong> (<code>-check=switch</code>) &#8212; Generates a warning if the <code>switch</code> expression does not match any of the <code>case</code> labels. This does not apply when a default <code>case</code> label is used.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Divide by Zero</strong> (<code>-check=zerodivide</code>) &#8212; Generates an error indicating that a divide by zero occurred and then terminates the program. This option instruments
                     both integer and floating-point divides.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Nil Pointer Dereference</strong> (<code>-check=nilderef</code>) &#8212; Generates an error for dereferences of null pointers.
                  </p>
               </li>
               <li>
                  <p>
                                                
                                                <strong>Write to Watchpoint</strong> (<code>-check=watch</code>) &#8212; Instruments your code to watch writes to one arbitrary address in memory. Use this check when your target does not support
                     hardware breakpoints. Specify the watchpoint address at run time with the 
                                                   <a href="ghs_help://$MULTI.watchpoint"><code>watchpoint</code></a> command.
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>To enable or disable all the checks when using the Builder, use the <strong>All</strong> toggle switch at the bottom of the dialog box. When using the driver, pass the option <code>-check=all</code> or <code>-check=none</code>.
         </p>
         <p><strong>Note:</strong> 
                                 <code>-check=assignbound</code> and <code>-check=switch</code> produce run-time errors on code that is legal in C and C++, but may be considered to have bad style.
         </p>
      </div>
      <hr>
      <div id="bod.RuntimeMemoryChecks">
         <p>Controls run-time memory checking. 
                                 Note that this option is not available for projects built with PIC or PID. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>General (Allocations Only)</strong> (<code>-check=alloc</code>) &#8212; Selects a special version of memory allocation library routines, including <code>malloc</code> and <code>free</code>. These library routines detect a limited number of memory allocation problems, such as freeing an object that has not been
                     allocated. This setting only changes the way the program is linked and does not change the code produced by the compiler.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Intensive</strong> (<code>-check=memory</code>) &#8212; Introduces additional code in the user application at each dereference of a pointer to detect a wide range of memory allocation
                     problems, including those detected by <code>-check=nilderef</code>. This setting implies <code>-check=alloc</code> because the special library routines selected by that option are required. To perform full memory checking on a small part
                     of an application, specify <code>-check=memory</code> when compiling the files or files of interest, and specify <code>-check=alloc</code> when linking the entire program.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>None</strong> (<code>-check=nomemory</code>) &#8212; [default] Disables memory checking.
                  </p>
               </li>
            </ul>
                              
                              
                           
         </p>
         <p>If <strong>Project&#8594;Emulate Behaviors of a Specific Compiler Version</strong>
                              
                               (<code>-act_like=</code>) is set to Green Hills Compiler version 2013.5 or earlier, both forms of memory checking require a frame pointer to walk
            the stack at run time, and imply setting <strong>Advanced&#8594;Debugging Options&#8594;Force Frame Pointer</strong>
                              
                               to <strong>On</strong> (<code>-ga</code>).
         </p>
         <p>For detailed information, see <a href="ghs_help://build_v800.section.general_memory_allocation_checking">Enabling General Memory Allocation Checking</a>, <a href="ghs_help://build_v800.section.intensive_memory_allocation_checking">Enabling Intensive Memory Allocation Checking</a>, and <a href="ghs_help://$MULTI.ch_mem_allocation">the documentation about viewing memory allocation information</a>.
                              
                           
         </p>
      </div>
      <hr>
      <div id="bod.Defines">
         <p>Defines a preprocessor <var>symbol</var>, and optionally sets it to a <var>value</var>. When setting this option in the <strong>Edit List Option</strong> window in the Project Manager, type <code>
                                    <var>symbol</var>=<var>value</var>
                                 </code> in the text field. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-D<var>symbol</var>[=<var>value</var>]</code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>This is equivalent to placing the following at the top of each source file:</p>
         <p>
            
                              <br><pre>#define <var>symbol</var> [<var>value</var>]</pre><br>
                              
                           
         </p>
         <p>
                              <code>-D<var>symbol</var>
                                 </code> is equivalent to <code>-D<var>symbol</var>=1</code>
                           
         </p>
      </div>
      <hr>
      <div id="bod.Undefines">
         <p>Undefines a preprocessor <var>symbol</var>. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-U<var>symbol</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>This is equivalent to placing the following at the top of each source file:</p>
         <p>
            
                              <br><pre>#undef <var>symbol</var>
                  </pre><br>
                           
         </p>
      </div>
      <hr>
      <div id="bod.TraceIncludes">
         <p>Controls the display to standard error of a list of files opened by a <code>#include</code> directive during normal compilation. Files are compiled and linked normally.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-H</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>--no_trace_includes</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.CVersion">
         <p>Controls the version of C to be accepted by the compiler. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Strict ISO C99</strong> (<code>-C99</code>) &#8212; Specifies strict ISO C99. This mode is compliant with ISO/IEC 9899:1999 and does not allow any non-standard constructs.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>ISO C99</strong> (<code>-c99</code>) &#8212; Specifies ISO C99. This mode provides all features of the C99 language in addition to some extensions. Some non-standard
                     constructs produce warnings rather than errors.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Strict ANSI C</strong> (<code>-ANSI</code>) &#8212; Specifies strict ANSI. This mode is compliant with the ANSI X3.159-1989 standard and does not allow any non-standard constructs.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>ANSI C</strong> (<code>-ansi</code>) &#8212; [default] Specifies ANSI C with extensions. This mode extends the ANSI X3.159-1989 standard with certain useful and compatible constructs. For details, see <a href="ghs_help://build_v800.section.ansi_c_mode">ANSI C</a>.
                  </p>
                  <p>For details about Green Hills C and the differences between the various modes, see <a href="ghs_help://build_v800.chapter.green_hills_c">Green Hills C</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>GNU C</strong> (<code>-gcc</code>) &#8212; Specifies full GNU mode, supporting GNU features (including zero size arrays, multi-line string constants, and <code>inline</code> functions) which are less compatible with ANSI C. For details, see <a href="ghs_help://build_v800.section.gnu_c_mode">GNU C</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>GNU C99</strong> (<code>-gnu99</code>) &#8212; Specifies a GNU-compatible version of C99 mode, supporting many GNU features not explicitly included in ISO C99.
                                                
                                             
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>K+R C</strong> (<code>-k+r</code>) &#8212; Support for K&amp;R C is deprecated and may be removed in future versions of MULTI. Specifies the C version documented in <strong>Kernighan &amp; Ritchie, First Edition</strong>, which is somewhat compatible with the portable C compiler (PCC). In this mode, the compiler will accept ANSI-style prototypes. For details, see <a href="ghs_help://build_v800.section.k_r_c_mode">K&amp;R C</a>.
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.JapaneseAutoC">
         <p>Controls support for the Japanese Automotive C extensions. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-japanese_automotive_c</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_japanese_automotive_c</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.japanese_automotive_c">Japanese Automotive C Extensions</a>.
         </p>
      </div>
      <hr>
      <div id="bod.CxxVersion">
         <p>Specifies the version of C++ to be accepted by the compiler. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Standard C++ (Violations Give Errors)</strong> (<code>--STD</code>) &#8212; Specifies C++ Strict Standard Mode, which gives errors when non-Standard features are used and disables features that
                     conflict with Standard C++. For more information, see <a href="ghs_help://build_v800.section.standard_cpp">Standard C++</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Standard C++ (Violations Give Warnings)</strong> (<code>--std</code>) &#8212; [default] Specifies C++ Standard Mode, which gives warnings when non-Standard features are used and disables features that conflict
                     with Standard C++. For more information, see <a href="ghs_help://build_v800.section.standard_cpp">Standard C++</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Standard C++ with ARM Extensions</strong> (<code>--arm</code>) &#8212; Specifies Standard C++ with extensions, which extends the standard with many useful and compatible constructs. For more
                     information, see <a href="ghs_help://build_v800.section.arm_cpp">Standard C++ with ARM Extensions</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>GNU C++</strong> (<code>--g++</code>) &#8212; Specifies GNU C++ mode.  For more information, see <a href="ghs_help://build_v800.section.gnu_cpp">GNU C++</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Embedded C++</strong> (<code>--e</code>) &#8212; Specifies Embedded C++. For more information, see <a href="ghs_help://build_v800.section.embedded_cpp">Embedded C++</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Extended Embedded C++</strong> (<code>--ee</code>) &#8212; Specifies Extended Embedded C++, which adds templates, namespaces, mutable new-style casts, and the Standard Template
                     Library (STL) to Embedded C++. For more information, see <a href="ghs_help://build_v800.section.extended_embedded_cpp">Extended Embedded C++</a>.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.CxxLibrary">
         <p>Specifies the type of C++ libraries to use. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Standard C++ Library without Exceptions</strong> (<code>--stdl</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Standard C++ Library with Exceptions</strong> (<code>--stdle</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Extended Embedded C++ Library without Exceptions</strong> (<code>--eel</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Extended Embedded C++ Library with Exceptions</strong> (<code>--eele</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Embedded C++ Library without Exceptions</strong> (<code>--el</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Embedded C++ Library with Exceptions</strong> (<code>--ele</code>)
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>The default is to use libraries equivalent to your <strong>C/C++ Compiler&#8594;C++ Language Dialect</strong>
                              
                               without exceptions, and you may not specify a library that is more full-featured than your <strong>C/C++ Compiler&#8594;C++ Language Dialect</strong>
                              
                              . For more information, see <a href="ghs_help://build_v800.section.choosing_cxx_library">Specifying C++ Libraries</a>.
                           
         </p>
      </div>
      <hr>
      <div id="bod.ExceptionHandling">
         <p>Controls support for exception handling. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>--exceptions</code>) &#8212; Enables support for exception handling. Code size and speed may be impacted even when exception handling is not directly
                     used.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>--no_exceptions</code>) &#8212; [default] Disables support for exception handling.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.SlashComment">
         <p>Controls treatment of C++ style <code>//</code> comments. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>--slash_comment</code>) &#8212; [default] C++ style <code>//</code> comments are accepted.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>--no_slash_comment</code>) &#8212; C++ style <code>//</code> comments are not accepted and generate errors.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.ANSIAliasing">
         <p>Controls assumptions based on ANSI aliasing rules in the compiler. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-ansi_alias</code>) &#8212; [default] Enables ANSI aliasing rules.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_ansi_alias</code>) &#8212; Disables ANSI aliasing.
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>When this option is enabled, the compiler assumes that memory may only be accessed through pointers of compatible types. This
            allows the compilers to generate better code. Illegal casts may cause the compiler to generate code that does not behave as
            expected. Consider the following example:
            <br><pre>int inc_and_get(int *a, short *b)
{
  (*a)++;
  return *b;
}

int loc()
{
  int var = 12345;
  /* the dereference of *b inside of inc_and_get illegally aliases var */
  return inc_and_get(&amp;var, (short *)&amp;var);
}
</pre><br>
                           
         </p>
         <p>This may behave unexpectedly because an <code>int</code> type may not be used to access an object of the <code>short</code> type.
         </p>
         <p>Disabling this option suppresses diagnostics <a href="ghs_help://$MULTI.error_1518">1518</a>, <a href="ghs_help://$MULTI.error_1519">1519</a>, and <a href="ghs_help://$MULTI.error_1798">1798</a>.
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_0">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>1.1 [R] ISO 9899:1990 C conformance w/o extensions</strong> (<code>--misra_2004=1.1</code>) &#8212; Enables Strict ANSI C. This option enables <code>-ANSI</code>, which disables recognition of many non-standard keywords and extensions. Errors issued because of this check are not identified
                     as MISRA errors, and their severities are unaffected by MISRA classification or the <code>--misra_req</code> option.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>1.2 [R] No dependencies can be placed on undefined or unspecified behavior</strong> (<code>--misra_2004=1.2</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>1.3 [R] Code other than C must conform to the standard interface</strong> (<code>--misra_2004=1.3</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>1.4 [R] Compiler and linker verified to support 31 significant case-sensitive characters for identifiers</strong> (<code>--misra_2004=1.4</code>) &#8212; Green Hills tools have no set limit by default.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>1.5 [A] Floating-point implementation is standard-compliant</strong> (<code>--misra_2004=1.5</code>) &#8212; The Green Hills compilers use the IEEE floating-point representation. This rule cannot be disabled.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_1">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>2.1 [R] Inline assembly only in functions or macros with no other code</strong> (<code>--misra_2004=2.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1749">1749</a> and <a href="ghs_help://$MULTI.error_1839">1839</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>2.2 [R] Use of /*...*/ comments only</strong> (<code>--misra_2004=2.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1876">1876</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>2.3 [R] No nested comments</strong> (<code>--misra_2004=2.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_9">9</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>2.4 [A] No `commented out' sections of code</strong> (<code>--misra_2004=2.4</code>) &#8212; Does not allow the following characters inside of a comment:
                     
                     <ul>
                        <li>
                           <p>A semicolon followed by by a new-line character.</p>
                        </li>
                        <li>
                           <p>Open or closed curly braces.</p>
                        </li>
                     </ul>
                                                
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1771">1771</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_2">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>3.1 [R] Documentation of implementation-defined behavior required</strong> (<code>--misra_2004=3.1</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>3.2 [R] Values of char types restricted to subset of ISO 10646-1</strong> (<code>--misra_2004=3.2</code>) &#8212; All Green Hills compilers use the ASCII standard for mapping character sets to numeric values. This property cannot be
                     disabled.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>3.3 [A] Implementation of integer division determined and documented</strong> (<code>--misra_2004=3.3</code>) &#8212; This behavior depends on the hardware configuration of the target. Most Green Hills compilers, however, round the division
                     result toward 0 (including Power Architecture, MIPS, TriCore, and x86).
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>3.4 [R] Uses of #pragma documented and explained</strong> (<code>--misra_2004=3.4</code>) &#8212; This book lists all <code>#pragma</code> constructs, their usages, and effects (see <a href="ghs_help://build_v800.section.general_pragmas">General Pragma Directives</a>).
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>3.5 [R] Documentation of implementation-defined behavior and packing of bitfields required</strong> (<code>--misra_2004=3.5</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>3.6 [R] All library production code conforms to MISRA</strong> (<code>--misra_2004=3.6</code>) &#8212; Not enforced.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_3">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>4.1 [R] Only ISO C escape sequences used</strong> (<code>--misra_2004=4.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_192">192</a> and <a href="ghs_help://$MULTI.error_1823">1823</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>4.2 [R] No trigraphs</strong> (<code>--misra_2004=4.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1695">1695</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_4">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>5.1 [R] No more than 31 chars to determine an identifier</strong> (<code>--misra_2004=5.1</code>) &#8212; Enforced by truncating all identifiers at 31 characters.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1772">1772</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>5.2 [R] No use of same id name in inner and outer scope</strong> (<code>--misra_2004=5.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_460">460</a> and <a href="ghs_help://$MULTI.error_1721">1721</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>5.3 [R] Each `typedef' must be a unique identifier</strong> (<code>--misra_2004=5.3</code>) &#8212; Enforced within a translation unit.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1722">1722</a> and <a href="ghs_help://$MULTI.error_1841">1841</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>5.4 [R] Tag names must be unique</strong> (<code>--misra_2004=5.4</code>) &#8212; Enforced within a translation unit.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_469">469</a> and <a href="ghs_help://$MULTI.error_1842">1842</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>5.5 [A] No reuse of function or static object identifiers</strong> (<code>--misra_2004=5.5</code>) &#8212; Enforced within a translation unit.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1843">1843</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>5.6 [A] No identifiers with the same name in different name spaces except for struct and union members</strong> (<code>--misra_2004=5.6</code>) &#8212; Enforced within a translation unit.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1723">1723</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>5.7 [A] No reuse of identifiers</strong> (<code>--misra_2004=5.7</code>) &#8212; Enforced within a translation unit.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1840">1840</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_5">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>6.1 [R] `char' only used for storage and use of character values</strong> (<code>--misra_2004=6.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1850">1850</a> and <a href="ghs_help://$MULTI.error_1852">1852</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>6.2 [R] `signed char' and `unsigned char' only used for storage and use of numeric values</strong> (<code>--misra_2004=6.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1851">1851</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>6.3 [A] Basic types used only in `typedef's and bitfields</strong> (<code>--misra_2004=6.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1698">1698</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>6.4 [R] Bitfields can only have `unsigned int' or `signed int' types</strong> (<code>--misra_2004=6.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_230">230</a> and <a href="ghs_help://$MULTI.error_1717">1717</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>6.5 [R] Signed bitfields must be least 2 bits long</strong> (<code>--misra_2004=6.5</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_108">108</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_6">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>7.1 [R] No non-zero octal constants or octal escape sequences</strong> (<code>--misra_2004=7.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1718">1718</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_7">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>8.1 [R] Functions must always have prototype declarations</strong> (<code>--misra_2004=8.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_223">223</a>, <a href="ghs_help://$MULTI.error_1547">1547</a>, <a href="ghs_help://$MULTI.error_1791">1791</a>, <a href="ghs_help://$MULTI.error_1800">1800</a>, and <a href="ghs_help://$MULTI.error_1828">1828</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.2 [R] Every function must have an explcit return type</strong> (<code>--misra_2004=8.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_77">77</a>, <a href="ghs_help://$MULTI.error_260">260</a>, and <a href="ghs_help://$MULTI.error_938">938</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.3 [A] Function declaration and definition prototypes match</strong> (<code>--misra_2004=8.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1844">1844</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.4 [R] Multiple declarations of an object or function must be compatible</strong> (<code>--misra_2004=8.4</code>) &#8212; Enforced within a translation unit.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_147">147</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.5 [R] No object or function definitions in a header file</strong> (<code>--misra_2004=8.5</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1846">1846</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.6 [R] Functions always declared at file scope</strong> (<code>--misra_2004=8.6</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1731">1731</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.7 [R] Use function or block scope definitions for objects whenever possible</strong> (<code>--misra_2004=8.7</code>) &#8212; Enforced for non-static variables in <code>elxr</code>. If you enable <code>-auto_sda</code>, this rule might not be enforced.
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.8 [R] External objects and functions declared in no more than one file</strong> (<code>--misra_2004=8.8</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.9 [R] Only one external definition for an external identifier</strong> (<code>--misra_2004=8.9</code>) &#8212; Enforced in the compiler and <code>elxr</code>.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1797">1797</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.10 [R] Static linkage of file scope declarations when possible</strong> (<code>--misra_2004=8.10</code>) &#8212; Enforced in <code>elxr</code> .
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.11 [R] All objects and functions with internal linkage declared `static'</strong> (<code>--misra_2004=8.11</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_172">172</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8.12 [R] Arrays with external linkage must have known size at compile time</strong> (<code>--misra_2004=8.12</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1824">1824</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_8">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>9.1 [R] Automatic variables initialized before used</strong> (<code>--misra_2004=9.1</code>) &#8212; Enforced for simple cases.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_549">549</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>9.2 [R] Braces used to match structure in initialization of arrays or structs</strong> (<code>--misra_2004=9.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_146">146</a>, <a href="ghs_help://$MULTI.error_991">991</a>, and <a href="ghs_help://$MULTI.error_1736">1736</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>9.3 [R] All or only first member of an enumeration may be explicitly initialized</strong> (<code>--misra_2004=9.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1726">1726</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_9">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>10.1 [R] Restrict implicit conversions for integer type expressions</strong> (<code>--misra_2004=10.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1863">1863</a>, <a href="ghs_help://$MULTI.error_1864">1864</a>, <a href="ghs_help://$MULTI.error_1865">1865</a>, <a href="ghs_help://$MULTI.error_1866">1866</a>, <a href="ghs_help://$MULTI.error_1867">1867</a>, <a href="ghs_help://$MULTI.error_1868">1868</a>, <a href="ghs_help://$MULTI.error_1869">1869</a>, and <a href="ghs_help://$MULTI.error_1870">1870</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>10.2 [R] Restrict implicit conversions for floating type expressions</strong> (<code>--misra_2004=10.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1871">1871</a>, <a href="ghs_help://$MULTI.error_1872">1872</a>, <a href="ghs_help://$MULTI.error_1873">1873</a>, <a href="ghs_help://$MULTI.error_1874">1874</a>, and <a href="ghs_help://$MULTI.error_1875">1875</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>10.3 [R] Restrict explicit casts for integer type expressions</strong> (<code>--misra_2004=10.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1847">1847</a>, <a href="ghs_help://$MULTI.error_1878">1878</a>, <a href="ghs_help://$MULTI.error_1879">1879</a>, and <a href="ghs_help://$MULTI.error_1880">1880</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>10.4 [R] Restrict explicit casts for floating type expressions</strong> (<code>--misra_2004=10.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1848">1848</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>10.5 [R] Bitwise `~' and `&lt;&lt;' expressions on unsigned char or unsigned short types must be cast to underlying type</strong> (<code>--misra_2004=10.5</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1849">1849</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>10.6 [R] Apply `U' suffix to all constants of `unsigned' type</strong> (<code>--misra_2004=10.6</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1775">1775</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_10">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>11.1 [R] No conversions between pointer to function and non-integral types</strong> (<code>--misra_2004=11.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1832">1832</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>11.2 [R] No conversions between pointer to object and any type other than integral, pointer to object, or pointer to void</strong> (<code>--misra_2004=11.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1833">1833</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>11.3 [A] No casting between pointer and integral types</strong> (<code>--misra_2004=11.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1834">1834</a> and <a href="ghs_help://$MULTI.error_1877">1877</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>11.4 [A] No casting between different pointer to object types</strong> (<code>--misra_2004=11.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1835">1835</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>11.5 [R] No casting that removes any `const' or `volatile' qualification from the type addressed by a pointer</strong> (<code>--misra_2004=11.5</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1836">1836</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_11">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>12.1 [A] Limited dependence on C precedence rules</strong> (<code>--misra_2004=12.1</code>) &#8212; Enforced per the guidelines in the supporting text of the rule.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1737">1737</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.2 [R] No expressions with values dependent on evaluation order</strong> (<code>--misra_2004=12.2</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.3 [R] No side effects in the operand of `sizeof'</strong> (<code>--misra_2004=12.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1725">1725</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.4 [R] No side effects in the right hand operand of `&amp;&amp;' or `||'</strong> (<code>--misra_2004=12.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1724">1724</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.5 [R] Operands of `&amp;&amp;' and `||' must be primary expressions</strong> (<code>--misra_2004=12.5</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1729">1729</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.6 [A] Operands of logical operators must be Boolean, and Boolean expressions may not be used as operands of other operators</strong> (<code>--misra_2004=12.6</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1853">1853</a> and <a href="ghs_help://$MULTI.error_1854">1854</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.7 [R] No bitwise operations on signed integer types</strong> (<code>--misra_2004=12.7</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1730">1730</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.8 [R] Value of right hand operand of a shift operator must be equal to or greater than zero and less than the size of the
                        underlying type of the left hand operand</strong> (<code>--misra_2004=12.8</code>) &#8212; Enforced. Both compile-time and run-time checks are performed. The run-time check is disabled when the <code>--no_misra_runtime</code> option is passed. The underlying type of the constant <code>1</code> is <code>signed char</code>, therefore the expression <code>(1&lt;&lt;x)</code> is valid only for <code>x&lt;8</code>.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_62">62</a> and <a href="ghs_help://$MULTI.error_63">63</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.9 [R] No unary minus on unsigned expressions</strong> (<code>--misra_2004=12.9</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1702">1702</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.10 [R] No comma operators</strong> (<code>--misra_2004=12.10</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1825">1825</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.11 [A] No wrap-around in constant unsigned expression evaluation</strong> (<code>--misra_2004=12.11</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1735">1735</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.12 [R] No use of underlying bit representation in floating point expressions</strong> (<code>--misra_2004=12.12</code>) &#8212; The Green Hills compilers do not allow any use of bit-wise operators (such as <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, etc.) by default. When this rule is enabled, a diagnostic is issued for union members of floating-point type.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1820">1820</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12.13 [A] No mixing of increment (++) and decrement (--) operators with other operators</strong> (<code>--misra_2004=12.13</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1856">1856</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_12">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>13.1 [R] Assignment operators not used in Boolean expressions</strong> (<code>--misra_2004=13.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1738">1738</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>13.2 [A] Explicit test of a value against zero unless the expression is Boolean</strong> (<code>--misra_2004=13.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1855">1855</a> and <a href="ghs_help://$MULTI.error_1881">1881</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>13.3 [R] Floating-point values not tested for (in)equality</strong> (<code>--misra_2004=13.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1704">1704</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>13.4 [R] No floating-point variables in `for' loop control expressions</strong> (<code>--misra_2004=13.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1750">1750</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>13.5 [R] Only loop control expression in `for' statement header</strong> (<code>--misra_2004=13.5</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>13.6 [R] No modification of numeric control variables in `for' loop body</strong> (<code>--misra_2004=13.6</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>13.7 [R] No Boolean operations with invariant results</strong> (<code>--misra_2004=13.7</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1857">1857</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_13">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>14.1 [R] No unreachable code</strong> (<code>--misra_2004=14.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_111">111</a> and <a href="ghs_help://$MULTI.error_177">177</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>14.2 [R] All non-null statements must have a side-effect</strong> (<code>--misra_2004=14.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_174">174</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>14.3 [R] Null statement must occur on a line by itself</strong> (<code>--misra_2004=14.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1746">1746</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>14.4 [R] No `goto' statements</strong> (<code>--misra_2004=14.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1705">1705</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>14.5 [R] No `continue' statements</strong> (<code>--misra_2004=14.5</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1706">1706</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>14.6 [R] At most one break statement per iteration statement</strong> (<code>--misra_2004=14.6</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1845">1845</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>14.7 [R] Functions must have a single point of exit</strong> (<code>--misra_2004=14.7</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1734">1734</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>14.8 [R] Dependent statements of loop and switch statements must have braces</strong> (<code>--misra_2004=14.8</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1709">1709</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>14.9 [R] Dependent statements of if statements must have braces</strong> (<code>--misra_2004=14.9</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1826">1826</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>14.10 [R] All `if'...`else if' constructs must have an `else'</strong> (<code>--misra_2004=14.10</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1710">1710</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_14">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>15.1 [R] Switch labels must be at top level compound statement of `switch' statement</strong> (<code>--misra_2004=15.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1838">1838</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>15.2 [R] Every non-empty switch clause terminates with an unconditional `break' statement</strong> (<code>--misra_2004=15.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1711">1711</a> and <a href="ghs_help://$MULTI.error_1884">1884</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>15.3 [R] Every `switch' statement must contain a final `default' clause</strong> (<code>--misra_2004=15.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1712">1712</a> and <a href="ghs_help://$MULTI.error_1837">1837</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>15.4 [R] No Boolean values in `switch' expressions</strong> (<code>--misra_2004=15.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1733">1733</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>15.5 [R] `switch' statements must have at least one `case'</strong> (<code>--misra_2004=15.5</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1713">1713</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_15">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>16.1 [R] No variable argument function definitions</strong> (<code>--misra_2004=16.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1697">1697</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>16.2 [R] No direct or indirect recursion</strong> (<code>--misra_2004=16.2</code>) &#8212; Enforced in the compiler and <code>elxr</code> linker. Using function pointers  might cause the linker to miss certain recursive functions, or report errors for nonrecursive
                     functions. Legacy Coverage Profiling may also cause nonrecursive functions to be reported incorrectly as recursive (see <a href="ghs_help://build_v800.bod.CoverageAnalysis">Profiling - Legacy Coverage</a>).
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>16.3 [R] Identifiers must be given for all function parameters</strong> (<code>--misra_2004=16.3</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1727">1727</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>16.4 [R] Parameter names in function declaration and definition must match</strong> (<code>--misra_2004=16.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1745">1745</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>16.5 [R] Declarations of functions with no parameters must have a `void' parameter</strong> (<code>--misra_2004=16.5</code>) &#8212;Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1728">1728</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>16.6 [R] Number of arguments must match the function prototype</strong> (<code>--misra_2004=16.6</code>) &#8212; Always enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>16.7 [A] Pointer parameters to functions declared as pointer to `const' if possible</strong> (<code>--misra_2004=16.7</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>16.8 [R] Return expression must match function type</strong> (<code>--misra_2004=16.8</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_117">117</a> and <a href="ghs_help://$MULTI.error_940">940</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>16.9 [R] Function identifiers may only be used for calls or with preceding `&amp;' operator</strong> (<code>--misra_2004=16.9</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1774">1774</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>16.10 [R] If error information returned by a function, it must be tested</strong> (<code>--misra_2004=16.10</code>) &#8212; Not enforced.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_16">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>17.1 [R] No pointer arithmetic on pointers that don't address an array element</strong> (<code>--misra_2004=17.1</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>17.2 [R] No pointer subtraction on pointers that don't address elements of the same array</strong> (<code>--misra_2004=17.2</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>17.3 [R] Relational operators not used on pointers that don't point to the same array</strong> (<code>--misra_2004=17.3</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>17.4 [R] No pointer arithmetic other than array indexing</strong> (<code>--misra_2004=17.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1752">1752</a> and <a href="ghs_help://$MULTI.error_1858">1858</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>17.5 [A] No more than 2 levels of pointer indirection in an object declaration</strong> (<code>--misra_2004=17.5</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1741">1741</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>17.6 [R] Address of automatic variable not used out of scope</strong> (<code>--misra_2004=17.6</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1056">1056</a> and <a href="ghs_help://$MULTI.error_1780">1780</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_17">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>18.1 [R] No incomplete struct or union types at end of translation unit</strong> (<code>--misra_2004=18.1</code>) &#8212; Cannot be disabled.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>18.2 [R] No assignments between overlapping objects</strong> (<code>--misra_2004=18.2</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>18.3 [R] No reuse of memory for unrelated purposes</strong> (<code>--misra_2004=18.3</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>18.4 [R] Unions may not be used</strong> (<code>--misra_2004=18.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1827">1827</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_18">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>19.1 [A] Only preprocessing directives and comments before `#include'</strong> (<code>--misra_2004=19.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1748">1748</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.2 [A] Only standard characters in file names for `#include'</strong> (<code>--misra_2004=19.2</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1747">1747</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.3 [R] `#include' directive only followed by &lt;filename&gt; or "filename"</strong> (<code>--misra_2004=19.3</code>) &#8212; Always enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.4 [R] Restrict macro syntax</strong> (<code>--misra_2004=19.4</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1859">1859</a>, <a href="ghs_help://$MULTI.error_1860">1860</a>, and <a href="ghs_help://$MULTI.error_1886">1886</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.5 [R] No `#define' or `#undef' within a block</strong> (<code>--misra_2004=19.5</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1732">1732</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.6 [R] `#undef' cannot be used</strong> (<code>--misra_2004=19.6</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1715">1715</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.7 [A] Function used instead of function-like macro when possible</strong> (<code>--misra_2004=19.7</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1862">1862</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.8 [R] Function-like macro must be called with all of its arguments</strong> (<code>--misra_2004=19.8</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_54">54</a> and <a href="ghs_help://$MULTI.error_76">76</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.9 [R] No preprocessing directives in function-like macros</strong> (<code>--misra_2004=19.9</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_10">10</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.10 [R] In function-like macro definition, wrap each parameter reference in parentheses</strong> (<code>--misra_2004=19.10</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1829">1829</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.11 [R] Identifiers in preprocessing directives defined before used</strong> (<code>--misra_2004=19.11</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_193">193</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.12 [R] At most one `#' or `##' operator in a macro</strong> (<code>--misra_2004=19.12</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1716">1716</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.13 [A] No `#' or `##' preprocessor operators</strong> (<code>--misra_2004=19.13</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1830">1830</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.14 [R] Correct use of `defined' preprocessor operator</strong> (<code>--misra_2004=19.14</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1831">1831</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.15 [R] Prevent contents of header files from being included more than once</strong> (<code>--misra_2004=19.15</code>) &#8212; A diagnostic is issued if the front end does not recognize an <code>#ifndef...#define...#endif</code> include guard. Because <strong>assert.h</strong> does not conform to this rule, a diagnostic is issued if you include this header file and enable this rule.
                                                
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1882">1882</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.16 [R] Conditionally excluded preprocessor directives must be syntactically valid</strong> (<code>--misra_2004=19.16</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_11">11</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19.17 [R] All related conditional preprocessor directives must reside in the same file</strong> (<code>--misra_2004=19.17</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_36">36</a> and <a href="ghs_help://$MULTI.error_37">37</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_19">
         <p>The following MISRA rules are enforced both by <code>#error</code> directives in the standard library headers, and by diagnostics emitted by the <code>elxr</code> linker. The linker diagnostics prevent programs from circumventing these rules by calling forbidden functions without including
            the standard headers (after suppressing MISRA 2004 Rule 8.1). The linker prevents any use of the forbidden functions in any
            library modules that are pulled into the link.
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>20.1 [R] No definition, redefinition, or undefinition of reserved words and standard library names</strong> (<code>--misra_2004=20.1</code>) &#8212; Enforced.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_45">45</a>, <a href="ghs_help://$MULTI.error_46">46</a>, <a href="ghs_help://$MULTI.error_1861">1861</a>, and <a href="ghs_help://$MULTI.error_1885">1885</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.2 [R] Standard library macro, object, and function names cannot be reused</strong> (<code>--misra_2004=20.2</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.3 [R] Check validity of values passed to library functions</strong> (<code>--misra_2004=20.3</code>) &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.4 [R] Dynamic heap memory allocation cannot be used</strong> (<code>--misra_2004=20.4</code>) &#8212; Enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.5 [R] The error indicator `errno' cannot be used</strong> (<code>--misra_2004=20.5</code>) &#8212; Enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.6 [R] Macro `offsetof' in &lt;stddef.h&gt; cannot be used</strong> (<code>--misra_2004=20.6</code>) &#8212; Enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.7 [R] The `setjmp' and `longjmp' facilities cannot be used</strong> (<code>--misra_2004=20.7</code>) &#8212; Enforced. Because the debugging memory library <strong>libdbmem.a</strong> uses <code>setjmp()</code>, building an otherwise conforming program with <code>-check=alloc</code> might trigger the associated <code>elxr</code> diagnostic.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.8 [R] The facilities of &lt;signal.h&gt; cannot be used</strong> (<code>--misra_2004=20.8</code>) &#8212; Enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.9 [R] No use of &lt;stdio.h&gt; in production code</strong> (<code>--misra_2004=20.9</code>) &#8212; Enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.10 [R] Functions `atof', `atoi', and `atol' are not used</strong> (<code>--misra_2004=20.10</code>) &#8212; Enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.11 [R] Functions `abort', `exit', `getenv', and `system' are not used</strong> (<code>--misra_2004=20.11</code>) &#8212; Enforced. Because the default startup code uses <code>exit()</code>, an otherwise conforming program might trigger the associated <code>elxr</code> diagnostic.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>20.12 [R] The facilities of &lt;time.h&gt; cannot be used</strong> (<code>--misra_2004=20.12</code>) &#8212; Enforced.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Misra2004Rules_20">
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>21.1 [R] Run-time checking</strong> (<code>--misra_2004=21.1</code>) &#8212; Enforced by performing run-time error checks for array bounds, assignment bounds, NULL pointer dereference, divide-by-zero,
                     and unresolved switch statement condition. For more information about run-time error checking, see <a href="ghs_help://build_v800.bod.RuntimeErrorChecks">Run-Time Error Checks</a>. The <code>--no_misra_runtime</code> option disables this rule.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRAReqLevel">
         <p>Controls the diagnostic messages generated upon a violation of the MISRA 
                                 <strong>required</strong> rules. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Errors</strong> (<code>--misra_req=error</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Warnings</strong> (<code>--misra_req=warn</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Silent</strong> (<code>--misra_req=silent</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRAAdvLevel">
         <p>Controls the diagnostic messages generated upon a violation of the MISRA 
                                 <strong>advisory</strong> rules. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Errors</strong> (<code>--misra_adv=error</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Warnings</strong> (<code>--misra_adv=warn</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Silent</strong> (<code>--misra_adv=silent</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARuntime">
         <p>Controls the performance of run-time checks for the MISRA rules that require them. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--misra_runtime</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_misra_runtime</code>)
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
         <p>Rules with associated run-time checks include:
            
            <ul>
               <li>
                  <p>MISRA 1998 rules 4, 38, and 107</p>
               </li>
               <li>
                  <p>MISRA 2004 rules 12.8 and 21.1</p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_0">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>1. [R] ISO 9899 C conformance w/o extensions</strong> &#8212; Enables Strict ANSI C. This option enables <code>-ANSI</code>, which disables recognition of many non-standard keywords and extensions. Errors issued because of this check are not identified
                     as MISRA errors, and their severities are unaffected by MISRA classification or the <code>--misra_req</code> option.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>2. [A] Code other than C must conform to standard interface</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>3. [A] Inline assembly only in functions with no other code</strong> 
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>4. [A] Run-time checking</strong> &#8212; Implemented through run-time checking. This option sets <code>-check=assignbound</code>, <code>-check=bound</code>, <code>-check=nilderef</code>, <code>-check=zerodivide</code>, and <code>-check=switch</code>. For more information about run-time error checking, see <a href="ghs_help://build_v800.bod.RuntimeErrorChecks">Run-Time Error Checks</a>. The option <code>--no_misra_runtime</code> turns off this rule completely. The option <code>--no_misra_runtime</code> disables both this rule and rule 107, as well as the run-time component of rule 38.
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_1">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>5. [R] Only ISO C characters and escape sequences used</strong> &#8212; Disables recognition of the <code>\e</code> escape in GNU mode. Issues a MISRA diagnostic on each use of a multibyte character literal (such as a Kanji character).
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>6. [R] Values of char types restricted to subset of ISO 10646-1</strong> &#8212; All Green Hills compilers use the ASCII standard for mapping character sets to numeric values. This property cannot be
                     turned off.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>7. [R] No trigraphs</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8. [R] No multibyte chars and wide strings</strong> &#8212; Issues a MISRA diagnostic on each use of a multibyte character literal (such as a Kanji character).
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_2">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>9. [R] No nested comments</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>10. [A] No 'commented out' sections of code</strong> &#8212; Disallows the following characters inside of a comment:
                  </p>
                  <p>
                     
                                                   
                     <ul>
                        <li>
                           <p>semicolon followed by a new-line character</p>
                        </li>
                        <li>
                           <p>open or close curly braces</p>
                        </li>
                     </ul>
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_3">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>11. [R] No more than 31 chars to determine an identifier</strong> &#8212; Enforced by truncating all identifiers at 31 characters.
                  </p>
                  <p>Errors issued because of this check are not identified as MISRA errors, and their severities are unaffected by MISRA classification
                     or the <code>--misra_req</code> option.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1772">1772</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>12. [A] No identifiers with the same names in different namespaces</strong>
                                                   
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_4">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>13. [A] Basic types used only in `typedef's</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>14. [R] `char' always used as `signed char' or `unsigned char'</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>15. [A] Floating point implementation complies to a standard</strong> &#8212; The Green Hills compilers use the IEEE floating-point representation. This rule cannot be turned off.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>16. [R] No underlying use of bits in floating point expressions</strong> &#8212; The Green Hills compilers disallow any use of bit-wise operators (such as <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, etc.) by default. When this rule is enabled, a diagnostic is issued for union members of floating-point type.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>17. [R] `typedef' names shall not be reused</strong>
                                                   
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_5">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>18. [A] Numeric constants need suffixes when appropriate</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>19. [R] No octal constants (other than zero)</strong>
                                                   
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_6">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>20. [R] All objects and functions declared before used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>21. [R] No use of same id name in inner and outer scope</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>22. [A] Function scope declarations whenever possible</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>23. [A] Static linkage of file scope declarations when possible</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>24. [R] No internal and external linkages of same identifiers</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>25. [R] Only one external definition of external identifier</strong> &#8212; Enforced in the compiler and <code>elxr</code>.
                  </p>
                  <p>Associated diagnostics include <a href="ghs_help://$MULTI.error_1797">1797</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>26. [R] Compatible multiple declarations of the same object/function</strong> &#8212; The Green Hills compilers allow only compatible declarations of multiply-declared objects and functions within the same
                     translation unit (by default). No such checks are performed across different translation units.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>27. [A] External objects declared in no more than one file</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>28. [A] The `register' storage class specifier should not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>29. [R] The use of tag shall agree with its declaration</strong>
                                                   
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_7">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>30. [R] Automatic variables initialized before used</strong> &#8212; Enforced for simple cases.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>31. [R] Braces used in non-zero initialization of arrays/structs</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>32. [R] All or only first enumerator may be explicitly initialized</strong>
                                                   
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_8">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>33. [R] No side effects in right hand operand of `&amp;&amp;' or `||'</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>34. [R] Operands of `&amp;&amp;' and `||' shall be primary expressions</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>35. [R] Assignment operators not used in Boolean expressions</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>36. [A] Logical and bitwise operators should not be confused</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>37. [R] No bitwise operations on signed integer types</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>38. [R] Right hand value of shift operand must be in range</strong> &#8212; Both compile-time and run-time checks are performed. The run-time check is turned off when the option <code>--no_misra_runtime</code> is passed.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>39. [R] No unary minus operand on unsigned expressions</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>40. [A] No side effects in the `sizeof' operand</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>41. [A] Implementation of division determined and documented</strong> &#8212; This behavior is dependent on the hardware configuration of the target. Most Green Hills compilers, however, round the
                     division result toward 0 (including Power Architecture, MIPS, TriCore, and x86).
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>42. [R] No comma operators except in control expr of `for' loops</strong>
                                                   
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_9">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>43. [R] No implicit conversions which might lose information</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>44. [A] Redundant explicit cast should not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>45. [R] Type casting to or from pointers should not be used</strong>
                                                   
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_10">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>46. [R] No expression with values dependent on evaluation order</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>47. [A] No dependence placed on C precedence rules</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>48. [A] Mixed precision arithmetic must use explicit casting</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>49. [A] Test value against zero unless expression Boolean</strong> &#8212; Not enforced. The Green Hills C compilers do not have built-in types which would represent the Boolean type.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>50. [R] Floating point values not tested for (in)equality</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>51. [A] No wraparound in constant unsigned expressions</strong>
                                                   
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_11">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>52. [R] There shall be no unreachable code</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>53. [R] All non-null statements shall have a side-effect</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>54. [R] Null statement must occur on line by itself</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>55. [A] No labels except in `switch' statements</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>56. [R] The `goto' statement shall not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>57. [R] The `continue' statement shall not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>58. [R] No `break' statement except in `switch'</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>59. [R] Dependent statements always enclosed in braces</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>60. [A] All `if' and `else if' constructs must have an `else'</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>61. [R] Every non-empty `case' clause terminated with `break'</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>62. [R] All `switch' statements should contain a `default' clause</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>63. [A] No Boolean values in `switch' expressions</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>64. [R] `switch' statements need at least one `case'</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>65. [R] No floating-point variables in loop counters</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>66. [A] Only loop control expression in `for' statement header</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>67. [A] No modification of control variables in `for' loop body</strong> &#8212; Not enforced.
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_12">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>68. [R] Functions always declared at file scope</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>69. [R] No variable argument functions</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>70. [R] No direct or indirect recursion</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>71. [R] Functions always have prototype declarations</strong> This option sets <code>--prototype_errors</code> or <code>--prototype_warnings</code>, depending on the MISRA C Required Rules Level (see <strong>Functions Without Prototypes</strong> in <a href="ghs_help://build_v800.section.c_c___messages">C/C++ Messages</a>).
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>72. [R] Function declaration and definition match prototypes</strong> &#8212; Always enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>73. [R] Identifiers given for all or none of function parameters</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>74. [R] Declaration and definition match parameter names</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>75. [R] Every function shall have an explicit return type</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>76. [R] Functions with no parameters should have `void' parameter</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>77. [R] Unqualified arguments of callee and caller compatible</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>78. [R] Number of arguments matches the function prototype</strong> &#8212; Always enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>79. [R] Values returned by `void' functions not used</strong> &#8212; Always enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>80. [R] No void expressions passed as parameters</strong> &#8212; Always enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>81. [A] `const' present when needed on reference parameters</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>82. [A] A function should have a single point of exit</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>83. [R] Return expression matches function type</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>84. [R] No expressions returned from `void' functions</strong> &#8212; Always enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>85. [A] Functions called with empty () if no parameters</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>86. [A] If error information returned, it should be tested</strong> &#8212; Not enforced.
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_13">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>87. [R] Only preprocessing directives before #include</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>88. [R] Only standard characters in file names for #include</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>89. [R] #include directive followed by &lt;filename&gt; or 'filename'</strong> &#8212; Always enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>90. [R] C macros only as constant, function-like, or specifier/qualifier</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>91. [R] Macros not `#define'd or `#undef'd within a block</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>92. [A] #undef should not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>93. [A] Function used instead of function-like macro when possible</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>94. [R] Function-like macro called with all of its arguments</strong> &#8212; Always enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>95. [R] No preprocessing directives in function-like macros</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>96. [R] Use of parentheses in function-like macros</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>97. [A] Identifiers in pre-processing directives defined before used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>98. [R] Only one use of `#' or `##' operator in any one macro</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>99. [R] Uses of #pragmas documented and explained</strong> &#8212; This book lists all <code>#pragma</code> constructs, their usage and effects (see <a href="ghs_help://build_v800.section.pragma_directives">Pragma Directives</a>).
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>100. [R] Correct use of `defined' preprocessor operator</strong> &#8212; Always enforced.
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_14">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>101. [A] Pointer arithmetic should not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>102. [A] No more than 2 levels of pointer indirection</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>103. [R] Relational operators not used except on same object</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>104. [R] No non-constant pointers to functions</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>105. [R] Function and a pointer to it match in prototypes</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>106. [R] Address of automatic variable not used out of scope</strong> &#8212; The compiler checks if an address of a local variable is assigned to a global value.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>107. [R] The NULL pointer should not be dereferenced</strong> &#8212; Performed via a run-time check (<code>-check=nilderef</code>). For more information about run-time error checking, see <a href="ghs_help://build_v800.bod.RuntimeErrorChecks">Run-Time Error Checks</a>. The option <code>--no_misra_runtime</code> disables both this rule and rule 4, as well as the run-time component of rule 38.
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_15">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>108. [R] All members of structures/union fully specified</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>109. [R] Overlapping variable storage should not be used</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>110. [R] Unions not used to access sub-parts of larger data types</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>111. [R] Bit fields can only have `unsigned int' or `signed int' types</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>112. [R] Bit fields of `signed int' type must be at least 2 bits long</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>113. [R] All members can be accessed only through their name</strong>
                                                   
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.MISRARules_16">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>114. [R] No redefinition of reserved words and standard library names</strong> &#8212; Always enforced. The Green Hills compilers do not allow redefinitions of C reserved words. Furthermore, the predefined
                     macro names defined, <code>__LINE__</code>, <code>__FILE__</code>, <code>__DATE__</code>, <code>__TIME__</code>, and <code>__STDC__</code> cannot be redefined.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>115. [R] Standard library function names shall not be reused</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>116. [R] All library production code conforms to MISRA</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>117. [R] Check validity of value passed to library functions</strong> &#8212; Not enforced.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>118. [R] Dynamic heap memory allocation shall not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>119. [R] The error indicator `errno' shall not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>120. [R] Macro `offsetof' in &lt;stddef.h&gt; shall not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>121. [R] &lt;locale.h&gt; and `setlocale' function shall not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>122. [R] The `setjmp' and `longjmp' facilities shall not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>123. [R] The facilities of &lt;signal.h&gt; shall not be used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>124. [R] No use of &lt;stdio.h&gt; in production code</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>125. [R] Functions `atof', `atoi', and `atol' not used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>126. [R] Functions `abort', `exit', `getenv', and `system' not used</strong>
                                                   
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>127. [R] The facilities of &lt;time.h&gt; shall not be used</strong>
                                                   
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.CharIsSigned">
         <p>Specifies the signedness of the <code>char</code> type. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Signed</strong> (<code>--signed_chars</code>)  &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Unsigned</strong> (<code>--unsigned_chars</code>)
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
         <p>Note that the standard libraries are built with the default signedness. While most library routines work the same way regardless
            of the signedness of the <code>char</code> type, <code>localeconv()</code> uses the default value of <code>CHAR_MAX</code>, which will not match <code>CHAR_MAX</code> in the application if the signedness is changed.
         </p>
      </div>
      <hr>
      <div id="bod.BitFieldsAreSigned">
         <p>Specifies the treatment of bitfields that are not explicitly declared <code>signed</code> or <code>unsigned</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Signed</strong> (<code>--signed_fields</code>) &#8212; [default] &#8212; Multiple-bit bitfields declared with an integer type have the signedness of their declared type. Bitfields
                     declared with an enumeration type may be either signed or unsigned to accommodate the sign and the magnitude of their enumerators.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Unsigned</strong> (<code>--unsigned_fields</code>) Bitfields declared with an integer type are unsigned. Bitfields declared with an enumeration type are unsigned unless the
                     enumeration type has a negative enumerator.
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.signedness_of_bit_fields">Signedness of Bitfields</a>.
         </p>
      </div>
      <hr>
      <div id="bod.PointersAreSigned">
         <p>Specifies the signedness of pointers and addresses. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Signed</strong> (<code>--signed_pointer</code>) &#8212; Pointers are signed. Because the libraries are built with <code>--unsigned_pointer</code>, operations that rely on memory spanning <code>0</code> may not work consistently between user code and libraries when using this option.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Unsigned</strong> (<code>--unsigned_pointer</code>) &#8212; [default] Pointers are unsigned.
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.ShortEnum">
         <p>Controls the allocation of enumerations. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--short_enum</code>) &#8212; Store enumerations in the smallest possible type.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_short_enum</code>) &#8212; [default] Store enumerations as integers.
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.LongLong">
         <p>Controls support for the <code>long long</code> data type. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--long_long</code>) &#8212; [default] Support the <code>long long</code> data type.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_long_long</code>) &#8212; Do not support the <code>long long</code> data type.
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
         <p>
                                 <code>--no_long_long</code> is supported only in ANSI and GNU C modes. It is not supported on any CPU with 64-bit registers, nor is it supported in INTEGRITY, u-velOSity, or embedded Linux platforms. In addition, certain target-specific header files may require the <code>long long</code> type to exist.
         </p>
      </div>
      <hr>
      <div id="bod.Time64Bits">
         <p>By default, <code>time_t</code> has the type <code>long</code>. For targets where <code>long</code> is 32 bits, this option allows you to change the size of <code>time_t</code> to <code>long long</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>32 bits</strong> (<code>-time32</code>) &#8212; [default] <code>time_t</code> has the type <code>long</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>64 bits</strong> (<code>-time64</code>) &#8212; On targets where <code>long</code> is 32 bits, <code>time_t</code> has the type <code>long long</code> (otherwise, this option is ignored). This option is not supported with Embedded Linux.
                  </p>
               </li>
            </ul>The linker associates calls to C library functions that use <code>time_t</code> to definitions of the function with an alternate name. For more information, see <a href="ghs_help://build_v800.section.special_function_names">Standard Function Names Converted by the Linker</a>.
         </p>
      </div>
      <hr>
      <div id="bod.StructPacking">
         <p><strong>Note:</strong> Support for structure packing in C++ is limited. See the release notes for more information.
         </p>
         <p>Controls the default maximum alignment of all objects of types <code>struct</code> and <code>class</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>None</strong> (<code>-pack=none</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>1-byte</strong> (<code>-pack=1</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>2-byte</strong> (<code>-pack=2</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>4-byte</strong> (<code>-pack=4</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8-byte</strong> (<code>-pack=8</code>)
                  </p>
               </li>
            </ul>
                                 
                                 
                              
         </p>
         <p>No <code>struct</code> or <code>class</code> or member of a <code>struct</code> or <code>class</code> will have an alignment greater than the specified value, unless the setting is overridden by the <code>#pragma pack</code> directive (see <a href="ghs_help://build_v800.section.general_pragmas">General Pragma Directives</a>).
         </p>
         <p>If you specify <strong>None</strong>, no packing alignment is specified to the compiler; structures, classes, and their members are aligned to their alignment
            requirements.
         </p>
      </div>
      <hr>
      <div id="bod.MisalignPack">
         <p>Specifies whether your target handles misaligned data access. If enabled, the compiler will use misaligned accesses to manage
            packed code.On RH850 devices, this requires that the MA bit of the MCTL register be set. The default startup library code will take care of this if the program was linked with this option enabled. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-misalign_pack</code>) &#8212;  Misaligned data access is handled by your target. When specifying this option, continue to use the <code>__packed</code> keyword when pointing to a packed structure, because the compiler must avoid generating certain assembly instructions in
                     this case. For more information, see  <a href="ghs_help://build_v800.section.structure_packing_type_qualifier">Pointing to Packed Structures with the __packed Type Qualifier</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_misalign_pack</code>) &#8212; Misaligned data access is not handled by your target. The compiler generates extra code to handle packed references. 
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>
                                 <code>-misalign_pack</code> is useful on processors that support unaligned memory accesses, such as the V850ES. Accessing unaligned data still requires more instructions on average than accessing data that is aligned.
         </p>
         <p>
            
                                 When using the Green Hills V850 and RH850 simulator (<code>simrh850</code>) to run code compiled with this option, the simulator must be configured to support unaligned memory accesses. See <code>-rh850_misalign</code> in <a href="ghs_help://$CONNECTING.section_cust_conn_simrh850">Using Custom Multi-core Simulator for V850 and RH850 (simrh850) Connections</a>
                              
         </p>
      </div>
      <hr>
      <div id="bod.NoCommons">
         <p>Controls the allocation of uninitialized global variables. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Treat as Common Data</strong> (<code>--commons</code>) &#8212; [default] Treats a declaration at the outermost level of a C file such as <code>int foo;</code> as <strong>common</strong> data. Common data can be defined multiple times, and all declarations will be merged by the linker. For example, multiple
                     files may have the declaration <code>int foo;</code> and the linker will merge them all into the same data entity.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Treat as Unique Definitions</strong> (<code>--no_commons</code>) &#8212; Allocates uninitialized global variables to a section and initializes them to zero at program startup. This may improve
                     optimizations by giving the compiler optimizer more information about the location of the variable.
                  </p>
                  <p>However, if your code contains multiple declarations such as <code>int foo;</code> (which would cause the linker to find multiple definition spots for <code>foo</code>), this setting may also cause <code>multiply defined symbol</code> linker errors. In particular, you may not use a definition such as <code>int foo;</code> in a header file if it will be included in more than one source file. You can avoid these linker errors by using the <code>extern</code> keyword for declarations and having a single definition point. For example:
                  </p>
                  <p>
                     
                                                   <br><pre>int foo;        /* used in just one place, or */

int foo=0;      /* used in just one place */

extern int foo; /* used in all other places */</pre><br>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.UniqueStrings">
         <p>This option is deprecated and may be removed in future versions of MULTI.</p>
         <p>Controls the creation of a separate space for all strings, even those which are equivalent. Permitted settings for this option
            are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--unique_strings</code>) &#8212; Create a separate space for all strings.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_unique_strings</code>) &#8212; [default] Do not create separate spaces for each instance of an equivalent string.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.KeepStaticSymbols">
         <p>Controls the retention of symbols for variable and routines that are declared <code>static</code>, but are not used. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--keep_static_symbols</code>) &#8212; Retain unused static variables and routines.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_keep_static_symbols</code>) &#8212; [default] Discard unused static variables and routines.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.SupportVLAs">
         <p>Enables or disables support for variable length arrays (VLAs) in 
                                    <code>-c99</code>, <code>-C99</code>, and 
                                 <code>-gcc</code> modes. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--vla</code>) &#8212; [default] Enables support for VLAs.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_vla</code>) &#8212; Disables support for VLAs.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.AltTokens">
         <p>Controls support for digraphs in C and C++. In C++, this option also controls whether operator keywords <code>and</code>, <code>or</code>, <code>bitand</code>, <code>bitor</code>, <code>and_eq</code>, <code>or_eq</code>, etc, are recognized. In C, the same tokens are provided as <code>#define</code> directives in <strong>iso646.h</strong>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--alternative_tokens</code>) &#8212; [default] Enables you to write C and C++ without using punctuation that might not be available on some international keyboards.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_alternative_tokens</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>The following table covers alternatives enabled by this option:
            
            <table border="1">
               <tr>
                  <th>Punctuation
                     
                  </th>
                  <th>Alternative
                     
                  </th>
               </tr>
               <tr>
                  <td><code>[</code></td>
                  <td><code>&lt;:</code></td>
               </tr>
               <tr>
                  <td><code>]</code></td>
                  <td><code>:&gt;</code></td>
               </tr>
               <tr>
                  <td><code>{</code></td>
                  <td><code>&lt;%</code></td>
               </tr>
               <tr>
                  <td><code>}</code></td>
                  <td><code>%&gt;</code></td>
               </tr>
               <tr>
                  <td><code>#</code></td>
                  <td><code>%:</code></td>
               </tr>
               <tr>
                  <td><code>&amp;&amp;</code></td>
                  <td><code>and</code></td>
               </tr>
               <tr>
                  <td><code>&amp;=</code></td>
                  <td><code>and_eq</code></td>
               </tr>
               <tr>
                  <td><code>&amp;</code></td>
                  <td><code>bitand</code></td>
               </tr>
               <tr>
                  <td><code>|</code></td>
                  <td><code>bitor</code></td>
               </tr>
               <tr>
                  <td><code>~</code></td>
                  <td><code>compl</code></td>
               </tr>
               <tr>
                  <td><code>!</code></td>
                  <td><code>not</code></td>
               </tr>
               <tr>
                  <td><code>!=</code></td>
                  <td><code>not_eq</code></td>
               </tr>
               <tr>
                  <td><code>||</code></td>
                  <td><code>or</code></td>
               </tr>
               <tr>
                  <td><code>|=</code></td>
                  <td><code>or_eq</code></td>
               </tr>
               <tr>
                  <td><code>^</code></td>
                  <td><code>xor</code></td>
               </tr>
               <tr>
                  <td><code>^=</code></td>
                  <td><code>xor_eq</code></td>
               </tr>
            </table>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Kanji">
         <p>Controls the character encoding for multibyte extended characters. This option also affects the <code>mbtowc()</code> and <code>wctomb()</code> library functions defined in <strong>libind.a</strong>, <strong>libutf8.c</strong>, and <strong>lib8bit.a</strong>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>EUC on Host and Target</strong> (<code>-kanji=euc</code>) &#8212; [default for Solaris hosts] Specifies Kanji character interpretation using the EUC format on the host and target.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Shift-JIS on Host and Target</strong> (<code>-kanji=shiftjis</code>) &#8212; [default for non-Solaris hosts] Specifies Kanji character interpretation using the Shift-JIS format on the host and target.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>EUC on Host and Shift-JIS on Target</strong> (<code>-kanji=euc/shiftjis</code>) &#8212; Specifies Kanji character interpretation using the EUC format on the host and the Shift-JIS format on the target.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Shift-JIS on Host and UTF-8 on Target</strong> (<code>-kanji=shiftjis/utf8</code>) &#8212; Specifies Kanji character interpretation using the Shift-JIS format on the host, UTF-8 as the target multi-byte character encoding, and UTF-32 as the target wide character encoding.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>UTF-8 on Host and Target</strong> (<code>-kanji=utf8</code>) &#8212; Specifies UTF-8 as the multi-byte character encoding and UTF-32 as the wide-character encoding.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>8-bit Codepage on Host and Target</strong> (<code>-kanji=none</code>) &#8212; Use 8-bit code pages (for example, ISO 8859-1). In this mode there are no multibyte characters; the mapping from bytes to characters is one-to-one.
                  </p>
               </li>
            </ul>
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.Namespaces">
         <p>Controls support for namespaces. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--namespaces</code>) &#8212; [default for C++ and EEC++]
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_namespaces</code>) &#8212; [default for EC++]
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.StdNamespace">
         <p>Controls the implicit use of the <code>std</code> namespace when standard header files are included. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--using_std</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_using_std</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.RangeBasedForLoops">
         <p>Controls support for C++11-style range-based for loops. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--range_based_for</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_range_based_for</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>Range-based for loops are not supported when namespaces are disabled.</p>
         <p>Range-based for loops whose range expressions involve other C++11 features such as initializer lists and <code>rvalue</code> references are not supported.
         </p>
      </div>
      <hr>
      <div id="bod.BoolSupport">
         <p>Controls support for the <code>bool</code> type. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--bool</code>) &#8212; [default] Also defines the preprocessor symbol <code>_BOOL</code>, allowing code to determine when a <code>typedef</code> statement should be used to define the <code>bool</code> type.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_bool</code>)
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.RestrictSupport">
         <p>Controls support for the <code>restrict</code> keyword. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--restrict</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_restrict</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>This keyword is a C99 feature that can be used to indicate that a pointer is not aliased.</p>
      </div>
      <hr>
      <div id="bod.NoInlineKeyword">
         <p>Controls whether the <code>__noinline</code> keyword has an effect on member function templates and member functions of class templates. Permitted settings for this option
            are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--enable_noinline</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--disable_noinline</code>) &#8212; [default] The compiler ignores the <code>__noinline</code> keyword for member function templates and member functions of class templates.
                  </p>
               </li>
            </ul>For more information, see <a href="ghs_help://build_v800.section.inlining_with_cplusplus">Additional C++ Inlining Information</a>.
         </p>
      </div>
      <hr>
      <div id="bod.InstantiateExternInline">
         <p>Controls instantiation of <code>extern inline</code> functions and inline member functions of classes that have external linkage. 
                                       <code>&#8211;instantiate_extern_inline</code> is the default if <code>--large_vtbl_offsets</code> is on. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--instantiate_extern_inline</code>) &#8212; Produces exactly one out-of-line copy in the program for each <code>inline</code> function that requires one. The prelinker ensures that there is one copy, unless you use the <code>--link_once_templates</code> option, in which case this is enforced with link-once sections (see <a href="ghs_help://build_v800.bod.TemplateInstantiation">Link-Once Template Instantiation</a>). This option might increase compile time.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_instantiate_extern_inline</code>) &#8212; Produces an out-of-line copy of each <code>extern inline</code> function and each inline member function of a class with external linkage in each module that requires a copy. These out-of-line
                     copies share static data. As a result:
                     
                     <ul>
                        <li>
                           <p>If your code compares pointers to such functions from different modules, they will not be equal.</p>
                        </li>
                        <li>
                           <p>Your code size may be larger.</p>
                        </li>
                     </ul>
                                                   
                  </p>
                  <p>For more information about inlining functions in C++, see <a href="ghs_help://build_v800.section.manual_inlining">Manual Inlining</a>.
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.NewStyleCasts">
         <p>Controls the use of new-style casts (like <code>static_cast&lt; &gt;</code> and <code>reinterpret_cast &lt; &gt;</code>) with Embedded C++. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--new_style_casts</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_new_style_casts</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.AutoTypeSupport">
         <p>Controls the use of the <code>auto</code> keyword as a type specifier for C++11-style type deduction. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--auto_type</code>) &#8212; A variable's type may be omitted and the <code>auto</code> keyword used instead to have the type automatically deduced from the variable's initializer.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_auto_type</code>) &#8212; [default] The <code>auto</code> keyword is treated as a storage class specifier.
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.CtorsDtors">
         <p>Controls the insertion of code at the beginning of <code>main()</code> to call <code>_main()</code> which is responsible for invoking constructors on global objects that require them, and for invoking <code>atexit()</code> to cause the appropriate destructors to be invoked when the program finishes. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--enable_ctors_dtors</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--disable_ctors_dtors</code>)
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>This option only controls the insertion of the call to <code>_main()</code> (and hence the inclusion of <code>_main()</code> from the C++ library) and does not affect the generation of code and data related to invoking constructors for global objects.
         </p>
      </div>
      <hr>
      <div id="bod.NewOutsideOfConstructor">
         <p>Controls the generation of a call to <code>operator new</code> in the prologue of each constructor that optionally allocates memory for the object being constructed. The default setting
            is conditional: if <code>--no_large_vtbl_offsets</code> is used, the default is <code>--new_inside_of_constructor</code>. If <code>--large_vtbl_offsets</code> is used, the default is <code>--new_outside_of_constructor</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      
                                                      
                                                      <strong>Outside</strong> (<code>--new_outside_of_constructor</code>) &#8212; Does not call <code>new</code> from within any constructor, which decreases the size of the constructor but increases the number of instructions required
                     to dynamically allocate a class object. This setting generates faster code when dynamic allocation of single objects is infrequent
                     (for instance, when most class objects are allocated on the stack).
                  </p>
               </li>
               <li>
                  <p>
                                                      
                                                      
                                                      <strong>Inside</strong> (<code>--new_inside_of_constructor</code>) &#8212; Places a call to <code>new</code> inside each constructor, which increases the size of the constructor but decreases the number of instructions required to
                     dynamically allocate a class object. Using this setting generates faster code when dynamic allocation of single objects is
                     common (for instance, when most objects are allocated via <code>operator new</code>).
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>The compiler also places a call to <code>operator delete</code> in the epilogue of each destructor. This code is required for the correct handling of virtual destructors in the presence
            of a user-defined <code>operator delete</code>, and is not affected by <code>--new_outside_of_constructor</code>.
         </p>
         <p>Mixing <code>--new_inside_of_constructor</code> and <code>--new_outside_of_constructor</code> within the same project may lead to undefined behavior. If an expression of the form <code>p = new C</code> is compiled with <code>--new_inside_of_constructor</code> and the definition of <code>C::C()</code> was compiled with <code>--new_outside_of_constructor</code>, neither the caller nor the callee will allocate memory for <code>*p</code>, leading to unexpected behavior. However, if all constructors are compiled with the default <code>--new_inside_of_constructor</code>, the rest of the program may safely (but inefficiently) be compiled with <code>--new_outside_of_constructor</code>.
         </p>
      </div>
      <hr>
      <div id="bod.RttiSupport">
         <p>Controls support for Run-Time Type Information (RTTI) features <code>dynamic_cast</code> and <code>typeid</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--rtti</code>) &#8212; [default for C++. Not supported with EC++ or EEC++]
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_rtti</code>) &#8212; [default for EC++ and EEC++]
                  </p>
               </li>
            </ul>
                                    
                                 
         </p>
      </div>
      <hr>
      <div id="bod.ReadonlyTypeinfo">
         <p>Controls the treatment of RTTI variables. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--readonly_typeinfo</code>) &#8212; [default] Forces RTTI variables to be treated as <code>const</code> in the compiler. In most cases, <code>const</code> variables end up in the read-only data.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_readonly_typeinfo</code>)
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.VirtualTables">
         <p>Controls the definition of virtual function tables in instances when the compiler heuristic provides no guidance. The virtual
            function table for a class is defined in a compilation if the compilation contains a definition of the first non-inline, non-pure
            virtual function of the class. For classes that contain no such function, the default is to define the virtual function table
            (but to define it as a local static entity). Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>Force</strong> (<code>--force_vtbl</code>) &#8212; Forces the definition of virtual function tables for such classes, but does not force the definitions to be local.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Standard</strong> (<code>--standard_vtbl</code>) &#8212; [default] Defines the virtual function table as a local static entity.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Suppress</strong> (<code>--suppress_vtbl</code>) &#8212; Suppresses the definition of virtual function tables for such classes.
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.ReadonlyVirtualTables">
         <p>Controls whether virtual tables are treated as <code>const</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--readonly_virtual_tables</code>) &#8212; [default] Forces virtual function tables to be treated as <code>const</code> in the compiler. In most cases, <code>const</code> tables end up in the read-only data.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_readonly_virtual_tables</code>)
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.LargeVirtualTableOffsets">
         <p>Controls the limit on the size of classes with virtual inheritance. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>Size of Pointer</strong> (<code>--large_vtbl_offsets</code>) &#8212; [default] There is a 4 gigabyte limit on the size of classes with virtual inheritance. Code built with this option is not compatible
                     with INTEGRITY 11 or earlier, with code built using Green Hills Compiler 2012.5 or earlier, or with code built using the <code>--no_large_vtbl_offsets</code> option. It is also not compatible with versions of MULTI that shipped with prior releases, such as MULTI 6.1.4. This setting is incompatible with the <code>--no_link_once_templates</code> option.
                                                   
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Size of Unsigned Short</strong> (<code>--no_large_vtbl_offsets</code>) &#8212; There is a 32 kilobyte limit on the size of classes with virtual inheritance. The virtual inheritance model in code built
                     with this option is compatible with that in code built with Green Hills Compiler 2012.5 and earlier. This setting is deprecated.
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>If you try to link two modules that are not compatible because of this option, the linker will issue the following diagnostic:
            <br><pre>[elxr] (error) Possible C++ virtual function table format incompatibility between modules.</pre><br> 
                                 
         </p>
      </div>
      <hr>
      <div id="bod.TemplateInstantiation">
         <p>Controls the link-once method of non-export template instantiation. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--link_once_templates</code>) &#8212; [default]
                                                   
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_link_once_templates</code>)
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.GuidingDecls">
         <p>Controls recognition of <strong>guiding declarations</strong> of template functions. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--guiding_decls</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_guiding_decls</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                    
                                    
                                    
                                 
         </p>
         <p>A guiding declaration is a function declaration that matches an instance of a function template but has no explicit definition
            (since its definition derives from the function template). For example:
            <br><pre>template &lt;class T&gt; void f(T t) {
    // ...
}
void f(int);</pre><br>When regarded as a guiding declaration, <code>f(int)</code> is an instance of the template; otherwise it is an independent function for which a definition must be supplied. If this
            option is disabled and <strong>C/C++ Compiler&#8594;C++&#8594;Templates&#8594;Support for Old-Style Specializations</strong>
                                    
                                     remains enabled, a specialization of a non-member template function is not recognized. It is treated as a definition of an
            independent function.
         </p>
      </div>
      <hr>
      <div id="bod.ImplicitInclude">
         <p>Controls implicit inclusion of source files as a method of finding definitions of template entities to be instantiated. For
            more information, see <a href="ghs_help://build_v800.section.implicit_inclusion">Implicit Inclusion</a>. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--implicit_include</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_implicit_include</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.ImplicitTypename">
         <p>Controls the implicit determination, from context, of whether a template parameter-dependent name is a type or a nontype. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--implicit_typename</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_implicit_typename</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                    
                                    
                                 
         </p>
      </div>
      <hr>
      <div id="bod.OldSpecializations">
         <p>Controls the treatment of old-style template specializations (that is, specializations that do not use the <code>template&lt;&gt;</code> syntax). Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--old_specializations</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_old_specializations</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                    
                                    
                                 
         </p>
      </div>
      <hr>
      <div id="bod.OneInstantiationPerObject">
         <p>Controls whether template instantiations are put in separate object files. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--one_instantiation_per_object</code>) &#8212; Puts each instantiation of a template or <code>extern inline</code> function (see <a href="ghs_help://build_v800.bod.InstantiateExternInline">Instantiate Extern Inline</a>) in a separate template instantiation object file, with a unique filename that corresponds to the name of the instantiated
                     entity. The primary object file (the object file corresponding to the original source file) contains everything else in the
                     compilation; that is, everything that is not an instantiation.
                  </p>
                  <p>The <code>gbuild</code> options <code>-clean</code> and <code>-cleanfirst</code> and the <strong>clean</strong> menu items in the Project Manager do not delete template instantiation object files (though they do delete primary object
                     files).
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Hybrid</strong> (<code>--hybrid_one_instantiation_per_object</code>) &#8212; Puts each instantiation in the compilation in a separate object file, except where they are created by <code>#pragma instantiate</code>. Instances created by <code>#pragma instantiate</code> are added to the primary object file generated from the source file in which they appear.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_one_instantiation_per_object</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                    
                                    
                                 
         </p>
         <p>If you are creating a library, we recommend that you set this option to <strong>On</strong> or <strong>Hybrid</strong>. By putting each instantiation in a separate object file within the library, only those instantiations that are needed will
            be pulled in, thus reducing code size. One of these options must be enabled if two different libraries include some of the
            same instantiations, in order to avoid multiply defined symbols.
         </p>
      </div>
      <hr>
      <div id="bod.InstantiationDir">
         <p>When <strong>C/C++ Compiler&#8594;C++&#8594;Templates&#8594;One Instantiation Per Object</strong>
                                    
                                     is enabled (<code>--one_instantiation_per_object</code>), this option can be used to specify or create a <var>directory</var> into which the generated object files should be put. Multiple projects may not share an instantiation directory. The equivalent
            driver option is:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>--instantiation_dir=<var>directory</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>The default instantiation directory is <strong>./template_dir</strong>.
         </p>
         <p>
                                    
                                    
                                    If the directory setting used for <code>-instantiation_dir</code> is a relative path, that path is resolved relative to the Object File Output Directory (<code>-object_dir</code>). If <code>-object_dir</code> is not set, then the Instantiation Directory path is relative to the current working directory.
         </p>
      </div>
      <hr>
      <div id="bod.DepName">
         <p>Controls the separate lookup of names in templates at the time the template is parsed and at the time it is instantiated.
            Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--dep_name</code>) &#8212; [default for <code>--g++</code> and <code>--STD</code> modes] Also implies <strong>C/C++ Compiler&#8594;C++&#8594;Templates&#8594;Parse Templates in Generic Form</strong>
                                                      
                                                       (<code>--parse_templates</code>).
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_dep_name</code>) &#8212; [default for all other modes]
                  </p>
               </li>
            </ul>
                                    
                                    
                                    
                                 
         </p>
      </div>
      <hr>
      <div id="bod.ParseTemplates">
         <p>Controls the parsing of nonclass templates in their generic form (i.e., even if they are not really instantiated). Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--parse_templates</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_parse_templates</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>This option is implied by <strong>Dependent Name Processing</strong> (see <a href="ghs_help://build_v800.bod.DepName">Dependent Name Processing</a>).
         </p>
      </div>
      <hr>
      <div id="bod.ExportTemplates">
         <p>This option is deprecated and will be removed in a future release.</p>
         <p>Controls recognition of exported templates. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--export</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_export</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                    
                                    
                                    
                                 
         </p>
         <p>This option enables <strong>C/C++ Compiler&#8594;C++&#8594;Templates&#8594;Dependent Name Processing</strong>
                                    
                                     (<code>--dep_name</code>) (see above). It cannot be used with <strong>C/C++ Compiler&#8594;C++&#8594;Templates&#8594;Implicit Source File Inclusion</strong>
                                    
                                     (<code>--implicit_include</code>).
         </p>
         <p>No levels of interprocedural optimizations are supported with export templates. If any level is selected it will be disabled.</p>
      </div>
      <hr>
      <div id="bod.PreLinkAgainst">
         <p>Specifies an external object file or executable to notify the prelinker of existing template instances. The equivalent driver
            option is:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>-prelink_against <var>file</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.DeferFunctionTemplates">
         <p>If function templates are being parsed in their generic form (i.e. <code>--parse_templates</code> is on), this option controls whether the parsing of the generic form of a template happens immediately upon the template's
            definition or is deferred until the end of the file. Furthermore, unused function templates will not be parsed at all (not
            even in their generic form). If <code>--no_parse_templates</code> is selected or defaulted to, this option has no effect. Note that this option is primarily for GNU compatibility.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--defer_parse_function_templates</code>) &#8212; Referenced function templates are parsed in their generic form at the end of the file. Unreferenced function templates
                     will not be parsed at all. This option is enabled by default in the <code>--g++</code> dialect.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_defer_parse_function_templates</code>) &#8212; All function templates will be parsed in their generic form when their definition is seen. This option is enabled by default
                     in all other dialects.
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.SourceListing">
         <p>Controls the generation of a source listing. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Generate Default Listing</strong> (<code>-list</code>) &#8212; Creates a listing by using the name of the object file with the <strong>.lst</strong> extension.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Generate User-Specified Listing</strong> (<code>-list=<var>filename</var>
                                                   </code>) &#8212; Creates a listing with the specified <var>filename</var>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Suppress Listing</strong> (<code>-no_list</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.SourceListingDir">
         <p>Outputs assembly listing files in the specified directory. By default, listing files are output in the same directory as the
            object file. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-list_dir=<var>directory</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.PreProcessAssemblyFiles">
         <p>Controls whether assembly files with standard extensions such as <strong>.s</strong> and <strong>.asm</strong> are preprocessed. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-preprocess_assembly_files</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_preprocess_assembly_files</code>) &#8212; [default] Only assembly files with special extensions are preprocessed.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.PreProcessSpecialAssemblyFiles">
         <p>Controls whether assembly files with a <strong>.800</strong> extension are preprocessed. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-preprocess_special_assembly_files</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_preprocess_special_assembly_files</code>) &#8212; Files with a <strong>.800</strong> extension are not preprocessed.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.InterleaveSourceAndAssembly">
         <p>Controls the interleaving of your original source code with the generated assembly code. Normally used with the <strong>Assembler&#8594;Source Listing Generation</strong>
                              
                               option. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-passsource</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-nopasssource</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>Not every line of the original source code will appear in the output.</p>
      </div>
      <hr>
      <div id="bod.MoreAsmOptions">
         <p>Passes the specified assembler options to the <code>ease850</code> assembler command line. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-asm=<var>options</var>
                                                   </code> &#8212; To pass multiple options, separate the options by spaces and enclose the whole string in quotes, or specify  <code>-asm=<var>options</var>
                                                   </code> multiple times.
                  </p>
                  <p>
                                                For example:
                     <br><pre>-asm="-nogen -ref -w"</pre><br>or:
                     <br><pre>-asm=-nogen -asm=-ref -asm=-w</pre><br>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>
                               For a full list of assembler options which may be passed in this manner, see <a href="ghs_help://build_v800.chapter.the_assembler">The ease850 Assembler</a>.
                           
         </p>
      </div>
      <hr>
      <div id="bod.AsmCommandFile">
         <p>Passes the options specified in <var>filename</var> directly to the assembler. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-asmcmd=<var>filename</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>The file must contain only one assembler option per line. For example:</p><br><pre>-nogen
-ref
-w</pre><br><p>For a full list of assembler options which may be passed in this manner, see <a href="ghs_help://build_v800.chapter.the_assembler">The ease850 Assembler</a>.
         </p>
      </div>
      <hr>
      <div id="bod.Asm3gSupport">
         <p>Controls assembler support for the <code>.inspect</code> and 
                                 <code>.struct</code> 
                              directives, and the <code>offsetof()</code> and <code>sizeof()</code> operators. These allow you to parse C header files to get type information, and use it to define objects in assembly. For
            more information, see <a href="ghs_help://build_v800.chapter.assembler_directives">Assembler Directives</a>, and <a href="ghs_help://build_v800.section.assembler_asm3g_operators">C Type Information Operators</a>. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-asm3g</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-noasm3g</code>) &#8212; [default]
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.LinkerOutput">
         <p>Controls the form of linker output. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Executable / Located Program</strong> (<code>-locatedprogram</code>) &#8212; [default] Generates an executable program.
                                             
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Relocatable Object File</strong> (<code>-relobj</code>) &#8212; Generates a relocatable object file, suitable for passing as input to another run of the linker. Implies <code>-nostdlib</code>, meaning the linker does not link in any startup files or libraries, and <code>-undefined</code>, meaning the linker does not allocate common variables or give errors for undefined symbols, as <strong>Relocatable Program</strong> does.
                  </p>
                  <p>
                                                If you are generating debug information for a relocatable object file with <code>-G</code> and the machine that will be performing the subsequent link does not have access to the original <strong>.o</strong> or <strong>.dbo</strong> files, pass the <code>-search_for_dba</code> option. This option creates a <strong>.dba</strong> file that you can distribute with the relocatable object file to provide debug information to MULTI. When performing subsequent
                     links with the relocatable object file, continue to pass the <code>-search_for_dba</code> option. This option passes <code>-r</code> to the linker.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Relocatable Program</strong> (<code>-relprog</code>) &#8212; Retains relocation information in the output file. The resulting file is suitable for execution. Some of the final link
                     steps, including but not limited to C++ constructors and special symbols, are not guaranteed to have relocations, and thus
                     might not be valid if the output file is loaded at a different address. This option passes <code>-a</code> to the linker.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.AdditionalOutput">
         <p>Creates the specified output type in addition to the project executable. The syntax <code>-<var>format</var>=<var>name</var>
                                 </code> allows you to specify the name of the file. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Memory Image File</strong> (<code>-memory</code>, <code>-memory=<var>name</var>
                                                   </code>) &#8212; Generates output file with <code>.mem</code> extension containing the output of the image as translated by the <code>gmemfile</code> utility program. For more information about <code>gmemfile</code>, see <a href="ghs_help://build_v800.section.the_gmemfile_utility_program">The gmemfile Utility Program</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>S-Record File</strong> (<code>-srec</code>, <code>-srec=<var>name</var>
                                                   </code>) &#8212; Generates output file with <code>.run</code> extension containing the output of the image as translated by the <code>gsrec</code> utility program. For more information about <code>gsrec</code>, see <a href="ghs_help://build_v800.section.the_gsrec_utility_program">The gsrec Utility Program</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>HEX386 File</strong> (<code>-hex</code>, <code>-hex=<var>name</var>
                                                   </code>) &#8212; Generates output file in HEX386 format with <code>.run</code> extension containing the output of the image as translated by the <code>gsrec</code> utility program with <code>-hex386</code> passed to it. For more information about <code>gsrec</code>, see <a href="ghs_help://build_v800.section.the_gsrec_utility_program">The gsrec Utility Program</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>None</strong> (<code>--no_additional_output</code>) &#8212; [default] You can use this option in a MULTI Project (<strong>.gpj</strong>) file, but there is no equivalent driver option.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.Strip">
         <p>Controls <strong>stripping</strong> the executable at the conclusion of linking. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-strip</code>) &#8212; Stripping involves removing line number, symbol table, and debugging information to reduce the file size of the executable.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-nostrip</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For information about stripping executables after link-time, see <a href="ghs_help://build_v800.section.the_gstrip_utility_program">The gstrip Utility Program</a>.
         </p>
      </div>
      <hr>
      <div id="bod.EntryPoint">
         <p>Specifies the program entry point or start address. The argument must be the name of a symbol in an executable section or
            an address in an executable section. (See <a href="ghs_help://build_v800.section.program_entry_point">Specifying the Program Entry Point</a>.) Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Start Address</strong> (<code>-entry <var>symbol</var>
                                                   </code>|<code>-e <var>symbol</var>
                                                   </code>) &#8212; The default symbol is <code>_start</code>.
                                             
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>No Entry Symbol</strong> (<code>-noentry</code>)
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.Linker_Qyn">
         <p>Controls whether the assembler and linker output tools version information into object files. Similar to using <code>#pragma ident</code> (see <a href="ghs_help://build_v800.section.general_pragmas">General Pragma Directives</a>). Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-Qy</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-Qn</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.PreProcessLinkerDirective">
         <p>Controls the level of preprocessing performed on linker directives files. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Full</strong> (<code>--preprocess_linker_directive_full</code>) &#8212; The C preprocessor preprocesses linker directives files.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Partial</strong> (<code>--preprocess_linker_directive</code>) &#8212; The C preprocessor resolves preprocessing directives such as <code>#include</code>, <code>#if</code>, and <code>#ifdef</code>. The preprocessor expands macros in preprocessing directives, but not in the rest of the file.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>--no_preprocess_linker_directive</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.LinkerWarnings">
         <p>Controls the display of linker warnings. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Display</strong> (<code>-linker_warnings</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Suppress</strong> (<code>-no_linker_warnings</code>)
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.RawImport">
         <p>
                              Imports data from arbitrary files (such as binary files) into a section named <code>.raw</code>. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-rawimport</code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>If your section map does not specify a section named <code>.raw</code>, the linker issues a warning. To silence the warning, add a section named <code>.raw</code> to your section map.
         </p>
         <p>Alternatively, you can select a section for each imported file using section inclusion commands in your linker directives
            (<strong>.ld</strong>) file. For example, to import the file <strong>rawdata.bin</strong> and place the data in the section <code>.myrawdata</code>, use <code>-rawimport rawdata.bin</code> and add the following line to your section map:
            <br><pre>.myrawdata :{rawdata.bin(.raw)}
</pre><br>By default, imported sections become read-only data sections. To make a section writable or executable, use the <code>SHFLAGS</code> section attribute. To access the data, adapt the following example:
            <br><pre>extern char __ghsbegin_myrawdata[], __ghsend_myrawdata[];

int main() {
  const char *p=__ghsbegin_myrawdata;
  /* print contents of raw section, one byte at a time */
  while( p &lt; __ghsend_myrawdata ){
      printf("0x%02x ", (unsigned char)*p);
      p++;
  }
  return 0;
}</pre><br>For more information, see <a href="ghs_help://build_v800.section.section_attributes">Using Section Attributes</a> and <a href="ghs_help://build_v800.section.section_maps">Defining a Section Map with the SECTIONS Directive</a>.
         </p>
      </div>
      <hr>
      <div id="bod.LinkerDirectiveFiles">
         <p>Passes <var>file</var> with a non-standard extension to the linker as a linker directives file, instead of any default file. You can use this option
            multiple times.
         </p>
         <p>The equivalent driver option is:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-T <var>directives_file</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>The following list describes how the compiler interprets <code>-T</code> depending on the name of <var>file</var>:
            
            <ul>
               <li>
                  <p>
                                                <var>file</var> has a known linker directives extension (<strong>.ld</strong>) &#8212; While the compiler passes the file to the linker, <code>-T</code> is not necessary. In this case, pass just the filename to the driver.
                  </p>
               </li>
               <li>
                  <p>
                                                <var>file</var> has an extension commonly used for source files or object files (<strong>.c</strong>, <strong>.obj</strong>, <strong>.a</strong>, etc.) &#8212; The compiler issues the following warning and ignores <code>-T</code>:
                     <br><pre>Warning: Option "-T" ignored due to invalid suffix of argument <var>file</var>.
Use .ld as suffix</pre><br>
                                             
                  </p>
               </li>
               <li>
                  <p>
                                                <var>file</var> begins with a hyphen (<code>-</code>) &#8212; The compiler issues the following warning and ignores <code>-T</code>:
                     <br><pre>Warning: Option "-T" ignored due to invalid argument -<var>file</var>.
expected directory or filename, without leading - </pre><br>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.MoreLnkOptionsInitial">
         <p>
                              
                              
                              
                              Passes the specified linker <var>options</var> to the <code>elxr</code> linker command line at the very beginning of the line, before any <strong>.ld</strong> files, and before any other options. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-lnk0=<var>options</var>
                                                   </code> &#8212; To pass multiple options, separate the options by spaces and enclose the entire string in quotes, or specify <code>-lnk0=<var>options</var>
                                                   </code> multiple times.
                  </p>
                  <p>
                                                For example:
                     <br><pre>-lnk0="-multiple -undefined"</pre><br>or:
                     <br><pre>-lnk0=-multiple -lnk0=-undefined</pre><br>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For more information about linker-specific options, see <a href="ghs_help://build_v800.section.elxr_linker_options">Linker-Specific Options</a>.
         </p>
         <p>For additional information about passing linker options directly, see <a href="ghs_help://build_v800.bod.MoreLnkOptions">Additional Linker Options (before start file)</a>.
         </p>
      </div>
      <hr>
      <div id="bod.MoreLnkOptions">
         <p>Passes the specified linker <var>options</var> to the linker command line after any <strong>.ld</strong> files and after most default options, but before the start files. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-lnk=<var>options</var>
                                                   </code> &#8212; To pass multiple options, separate the options by spaces and enclose the whole string in quotes, or specify <code>-lnk=<var>options</var>
                                                   </code> multiple times.
                  </p>
                  <p>
                                                For example:
                     <br><pre>-lnk="-multiple -undefined"</pre><br>or:
                     <br><pre>-lnk=-multiple -lnk=-undefined</pre><br>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>
                               
                              There are three options for passing options through to the linker command line. Each of the three options places its argument
            on the linker command line in a different location as described in the following list:
            
            <ul>
               <li>
                  <p>
                                                <code>-lnk0=</code> should be used for options that must appear at the very beginning of the linker command line, before the linker directives
                     files, and before any options that are passed by the driver.
                  </p>
               </li>
               <li>
                  <p>
                                                <code>-lnk=</code> causes the options to appear after many of the drivers options, but before any object files. Options that enable or disable
                     a feature have a higher precedence if passed with <code>-lnk=</code> than with <code>-lnk0=</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                <code>-Wl</code> should be used in the rare case that an option must appear in between object files on the linker command line, or if an option
                     must appear at the end of the linker command line. The position of the <code>-Wl</code> option on the driver command line determines its position on the linker command line, relative to all source and object files.
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For more information about linker-specific options, see <a href="ghs_help://build_v800.section.elxr_linker_options">Linker-Specific Options</a>.
         </p>
      </div>
      <hr>
      <div id="bod.MoreLnkOptionsBeforeLd">
         <p>
                               
                              Passes the specified linker options to the linker in approximately the position that it appears on the driver command line.
            The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-Wl,<var>option</var>[,<var>option</var>]&#8230;</code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For more information about linker-specific options, see <a href="ghs_help://build_v800.section.elxr_linker_options">Linker-Specific Options</a>.
         </p>
         <p>For additional information about passing linker options directly, see <a href="ghs_help://build_v800.bod.MoreLnkOptions">Additional Linker Options (before start file)</a>.
         </p>
      </div>
      <hr>
      <div id="bod.LnkCommandFile">
         <p>Passes the options specified in <var>filename</var> directly to the linker. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-lnkcmd=<var>filename</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>The file must contain only one linker option per line. For example:</p>
         <p>
            
                              <br><pre>-nogen
-ref
-w</pre><br>
                           
         </p>
         <p>For more information about linker-specific options, see <a href="ghs_help://build_v800.section.elxr_linker_options">Linker-Specific Options</a>.
         </p>
      </div>
      <hr>
      <div id="bod.WholeArchive">
         <p>Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>--whole-archive</code>) &#8212; Cause all files to be extracted from any library that appears after the option <code>--whole-archive</code> on the command line until <code>--no-whole-archive</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>--no-whole-archive</code>) &#8212; [default] Undo the effect of any <code>--whole-archive</code> option for any libraries after the option <code>--no-whole-archive</code> until <code>--whole-archive</code>.
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>These options only apply to libraries specified on the <code>ccv850</code> command line and not to any libraries selected implicitly by the <code>ccv850</code> command. These options can be used when creating a merged archive if the option <code>-merge_archive</code> is also used.
                           
         </p>
         <p>If the same library is specified on the command line twice, all of its contents will be extracted twice even if only one instance
            of that library on the command line is after <code>--whole-archive</code>.
         </p>
      </div>
      <hr>
      <div id="bod.LinkRejectDuplicateLibSyms">
         <p>Controls whether an error is reported when a symbol is defined in multiple libraries on the link line. Permitted settings
            for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-link_reject_duplicate_lib_syms</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_link_reject_duplicate_lib_syms</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.LinkAllowDuplicateGHSSyms">
         <p>When rejecting duplicate symbols, controls whether those known to be generated by the compiler (as opposed to those present
            in source) are allowed. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-link_allow_duplicate_ghs_syms</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_link_allow_duplicate_ghs_syms</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.LinkAllowDuplicateLinkonceSyms">
         <p>When rejecting duplicate symbols, controls whether those in <code>.ghs.linkonce</code> sections are allowed. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-link_allow_duplicate_linkonce_syms</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_link_allow_duplicate_linkonce_syms</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.Elxr_DuplicateWhitelist">
         <p>When rejecting duplicate symbols, allows those present in the specified whitelist. A whitelist is a text file with one symbol
            per newline. To allow all symbols from a library, use <code>@libfoo.a</code> where <code>libfoo.a</code> is the base name of the library. Path information should be omitted, and symbols will be allowed from any library with that
            name. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-duplicate_whitelist=<var>whitelist</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.Elxr_Delete">
         <p>Controls the removal from the executable of functions that are unused and unreferenced. Permitted settings for this option
            are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-delete</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_delete</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For a list of functions that have been deleted, pass the <code>-lnk=-v</code> option. Certain options that create references to functions may inhibit <code>-delete</code>. For more information, see <a href="ghs_help://build_v800.section.deleting_unused_functions">Deleting Unused Functions</a>.
         </p>
      </div>
      <hr>
      <div id="bod.CodeFactor">
         <p>Controls the code factoring optimization, which reduces code size by merging redundant sequences of object code at link-time.
            We recommend that you use this optimization only if your primary goal is reducing program size; for most programs, code factoring
            increases branching and decreases execution speed. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-codefactor</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_codefactor</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information see <a href="ghs_help://build_v800.section.code_factoring">Code Factoring</a>.
         </p>
      </div>
      <hr>
      <div id="bod.LinkIgnoreDebugReferences">
         <p>Controls whether or not the linker ignores relocations from DWARF debug sections when you are using the <code>-delete</code> option. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-ignore_debug_references</code>) &#8212; [default] Ignores relocations from DWARF debug sections when using <code>-delete</code>. DWARF debug information will contain references to deleted functions that may break some third-party debuggers.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_ignore_debug_references</code>) &#8212; Does not ignore relocations from DWARF debug sections when using <code>-delete</code>. DWARF debugging information generated by <code>-dual_debug</code> greatly reduces the effectiveness of <code>-delete</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.StartFiles">
         <p>Controls the start files to be linked into the executable. The default is to use the Green Hills start files. Permitted settings
            for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Use Specified Start Files</strong> (<code>-startfiles=<var>filename</var>[,<var>filename</var>&#8230;]</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Use Start Files</strong> (<code>-nostartfiles</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.EndFile">
         <p>Specifies end files to be linked into the executable. End files are the last object files passed on the command line to the
            linker. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-endfile=<var>filename</var>[,<var>filename</var>&#8230;]</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.StartFileDir">
         <p>Specifies the directory that contains start files, end files, and the default linker directives file. The effect of this option
            on each type of file is overridden by <code>-startfiles</code>, <code>-endfile</code>, and <code>-directive_dir</code>. If you are building an INTEGRITY project that is not a kernel, this option has no effect on the location of the default
            linker directives file. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-startfile_dir=<var>directory</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Elxr_Multiple">
         <p>Controls the treatment of multiply-defined symbols. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Errors</strong> (<code>-no_multiple</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Silent</strong> (<code>-multiple</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>We recommend that you do not use <code>-multiple</code>, because some optimizations may assume that all objects and functions have one definition (except <code>weak</code> functions and <code>COMMON</code> variables).
         </p>
      </div>
      <hr>
      <div id="bod.Undefined">
         <p>Controls the treatment of undefined symbol references. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Errors</strong> (<code>-no_undefined</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Silent</strong> (<code>-undefined</code>) &#8212; The linker gives each undefined symbol an address of zero, or a zero offset if you are using PID. If the symbol would normally be assigned to a special data area, it is given an address in the appropriate special data area
                     section.
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>We recommend that you do not use <code>-undefined</code>, because some optimizations may assume that all objects and functions have one definition (except <code>weak</code> functions and <code>COMMON</code> variables).
         </p>
      </div>
      <hr>
      <div id="bod.LinkerConstants">
         <p>Sets a default value that can be used in section and memory maps. This option overrides any default value specified in a linker
            directives file. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-C<var>name</var>=<var>value</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.LinkerUndefineds">
         <p>Forces an undefined symbol reference for <var>symbol</var>, as if there had been some use of the symbol in one of the modules to be linked. This may cause modules to be linked in from
            libraries that would not otherwise be included. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-u <var>symbol</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Elxr_ExtractAll">
         <p>Pulls in every exported symbol from the specified library, instead of pulling in only those symbols that are required. The
            equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-extractall=<var>library</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Where the <var>library</var> parameter must exactly match the way that the library is specified on the command line. For example, use <code>-ltest</code> for the <var>library</var> parameter instead of <code>libtest.a</code>.
         </p>
         <p>To pull in all the symbols from two or more libraries, pass multiple <code>-extractall</code> options, or pass one <code>-extractall</code> option with a comma-separated list of library names. For example, the following are equivalent:
         </p><br><pre>-extractall=-lfoo,-lbar
-extractall=-lfoo -extractall=-lbar</pre><br><p><strong>Note:</strong> The builder may expand relative paths for any libraries specified as files, requiring you to use the full path as the argument
            to <code>-extractall</code>.To specify the full path in a portable manner, see the <code>%expand_path</code> macro function in <a href="ghs_help://build_v800.section.macro_functions">Macro Functions</a>.
         </p>
      </div>
      <hr>
      <div id="bod.Elxr_ExportAll">
         <p>Exports all symbols from the specified library. The equivalent driver option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-exportall=<var>library</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Where the <var>library</var> parameter must exactly match the way that the library is specified on the command line. For example, use <code>-ltest</code> for the <var>library</var> parameter instead of <code>libtest.a</code>.
         </p>
         <p>To export all the symbols from two or more libraries, pass multiple <code>-exportall</code> options, or pass one <code>-exportall</code> option with a comma-separated list of library names. For example, the following are equivalent:
         </p><br><pre>-exportall=-lfoo,-lbar
-exportall=-lfoo -exportall=-lbar</pre><br></div>
      <hr>
      <div id="bod.LinkerAbsAgainst">
         <p>Makes available symbol names and addresses from a separately linked, fully located file during linking. The linker does not
            include the contents of the file in the output; it only imports those symbol addresses necessary for the current link. This
            option is useful when one linker image must refer to symbols that are located in another separately linked image. The equivalent
            driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-A <var>file</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Where <var>file</var> must be a file linked with the <code>-locatedprogram</code> option.
         </p>
         <p>When linking one INTEGRITY POSIX DLL, you may use <code>-A</code> to link against another. For example:
            <br><pre>--posix_dll -o lib1.dll -A lib2.dll</pre><br>This tells the linker that it is expected that <code>lib1.dll</code> will only be loaded into a program which has already loaded <code>lib2.dll</code>. The linker will allow unresolved symbols in <code>lib1.dll</code> provided that they are exported by <code>lib2.dll</code>. This is in preference to doing:
            <br><pre>--posix_dll -o lib1.dll -undefined</pre><br>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Map">
         <p>Controls the generation of a map file. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Generate Default Map File</strong> (<code>-map</code>) &#8212; [default] Creates a map file with the name of the object file plus a <strong>.map</strong> extension.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Generate User-Specified Map File</strong> (<code>-map=<var>filename</var>
                                                      </code>) &#8212; Creates a map file with the specified <var>filename</var>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Suppress Map</strong> (<code>-nomap</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.KeepMap">
         <p>Controls the retention of the map file in the event of a link error. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-keepmap</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-nokeepmap</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MapLines">
         <p>Specifies the length, <var>n</var>, of a map file page. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-maplines=<var>n</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MapFileSorting">
         <p>Controls the method for ordering the map file. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Alphabetic</strong> (<code>-Ma</code>) &#8212; [default] Generates a listing of symbols sorted alphabetically by name.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Numeric</strong> (<code>-Mn</code>) &#8212; Generates a listing of symbols sorted numerically by address.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Both Alphabetic and Numeric</strong> (<code>-Man</code>|<code>-Mna</code>) &#8212; Generates both a listing of symbols sorted alphabetically by name and a listing of symbols sorted numerically by address.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Mx">
         <p>Controls the generation of cross-reference information in the map file. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Mx</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MapUndefined">
         <p>Marks unreferenced symbols in the map file.</p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Mu</code>) &#8212; Adds an extra column to the map file's table of symbols that contains <code>D</code> for symbols which are unreferenced and therefore able to be deleted. This includes symbols that have already been deleted
                     by the <code>-delete</code> option (if passed). This column contains <code>U</code> for any other symbols that remain unresolved, including undefined weak symbols. It is possible that some unreferenced symbols
                     are not marked with <code>D</code>, either because they overlap with reachable symbols or because they are referenced from profiling or debugging information.
                     For more information, see <a href="ghs_help://build_v800.section.deleting_unused_functions">Deleting Unused Functions</a>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MapLocals">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Ml</code>) &#8212; Adds list of locals to the linker-generated map file. This list does not contain zero-sized symbols or compiler-generated
                     symbols.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MapEofnSymbols">
         <p>Controls whether symbols of the form <code>__ghs_eofn_<var>name</var>
                                    </code> appear in the map file, where <var>name</var> is the name of a function. These symbols may be generated by the compiler under certain circumstances, such as when <code>DWARF</code> is being output. By default, end-of-function symbols appear in the map files unless the program is built with <code>mapfile_type=2</code> (see <a href="ghs_help://build_v800.section.elxr_linker_options">Linker-Specific Options</a>). Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_map_eofn_symbols</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-map_eofn_symbols</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.GSize">
         <p>Controls use of the <code>gsize</code> utility to determine the size of the output executable. <code>gsize</code> creates a file called <strong><var>executable_name</var>.siz</strong>, which contains a list of the sizes of the ROM sections of the output executable. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-gsize</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_gsize</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.the_gsize_utility_program">The gsize Utility Program</a>.
         </p>
      </div>
      <hr>
      <div id="bod.Overlap">
         <p>Controls the treatment of overlapping sections. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Errors on Any Overlap</strong> (<code>-strict_overlap_check</code>) &#8212; Issues errors for all overlapping sections, even when a section is zero bytes in size.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Errors on Non-Zero Overlap</strong> (<code>-nooverlap</code>) &#8212; [default] Issues errors for overlapping sections, except when one or both of the sections is zero bytes in size.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Warnings</strong> (<code>-overlap_warn</code>) &#8212; Similar to <code>-nooverlap</code>, but issues warnings instead of errors.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Silent</strong> (<code>-overlap</code>) &#8212; No warnings or errors are issued for overlapping sections.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Checksum">
         <p>
                                 Controls the creation of section checksums. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-checksum</code>) &#8212; Appends a 4-byte checksum to the end of every initialized program section using a standard 32-bit CRC algorithm.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-nochecksum</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>The algorithm is a standard 32-bit CRC using the polynomial <code>0x10211021</code> (by default), or <code>0x04C11DB7</code> (for INTEGRITY). For information about how to use these checksums, see <a href="ghs_help://build_v800.section.verifying_program_identity">Verifying Program Integrity</a>. Sample source code for verifying checksums is included in <strong>src/libstartup/cksum.c</strong> of your installation.
         </p>
      </div>
      <hr>
      <div id="bod.GlobalTypeCheck">
         <p>Controls the level of link-time global variable type checking. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Full</strong> (<code>-globalcheck=full</code>) &#8212; Generates warnings in the event of inconsistent types for the definition and uses of global variables, or where type checking
                     information is unavailable.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Normal</strong> (<code>-globalcheck=normal</code>) &#8212; Generates warnings in the event of inconsistent types for the definition and uses of global variables only where type
                     checking information is available.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>None</strong> (<code>-globalcheck=none</code>) &#8212; [default] Does not generate or use global variable type checking information.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>The link-time global variable type checking verifies that the definition and all uses of a global variable agree on the data
            type of the variable (size and signedness).  Qualifiers such as <code>const</code> and <code>volatile</code> can optionally also be checked by using <code>-globalcheck_qualifiers</code> (see <a href="ghs_help://build_v800.bod.GlobalTypeCheckQualifiers">Link-Time Global Variable Type Qualifiers</a>)
         </p>
         <p>This option should be passed both when compiling and when linking.</p>
         <p><strong>Note:</strong> Full type checking (<code>-globalcheck=full</code>) requires that all files in the project be built with type checking.  The standard libraries are not built with this option
            enabled, so the linker may generate warnings about missing type declarations for any library variables that are used in code
            where <code>-globalcheck=full</code> is passed.  Some options, such as run-time error checking, may generate implicit references to variables in the libraries.In most cases, it is recommended that you use <code>-globalcheck=normal</code> for type checking.
         </p>
      </div>
      <hr>
      <div id="bod.GlobalTypeCheckQualifiers">
         <p>Controls whether the linker verifies qualifiers such as <code>const</code> and <code>volatile</code> when performing link-time global variable type checking.  Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-globalcheck_qualifiers</code>) &#8212; The type checking, if enabled, verifies qualifiers on the type in addition to size and signedness.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_globalcheck_qualifiers</code>) &#8212; [default] The type checking, if enabled, verifies only size and signedness.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Warnings">
         <p>Controls the display of <strong>warnings</strong> for most Green Hills tools. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Display</strong> (<code>--warnings</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Suppress</strong> (<code>-w</code>)
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.Remarks">
         <p>Controls the display of <strong>remarks</strong> for most Green Hills tools. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Display</strong> (<code>--remarks</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Suppress</strong> (<code>--no_remarks</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.ErrMax">
         <p>Limits to <var>n</var> the number of error messages the compiler or linker prints before quitting. The default is 100 and the minimum is 2.
         </p>
         <p>The equivalent driver option is:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-errmax=<var>n</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>Some errors are catastrophic, and the compiler stops the compilation process after encountering such an error, regardless
            of whether the error limit has been reached.
         </p>
      </div>
      <hr>
      <div id="bod.RedirectStdErr">
         <p>Specifies a file to which all error output is redirected. This option is not supported when parallel build mode is enabled
            (<code>-parallel</code>). The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-stderr=<var>filename</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.QuitAfterWarnings">
         <p>Controls whether the build will terminate with an error if any warnings are generated, providing the ability to treat all
            driver warnings as errors. This option does not affect warnings issued by the Builder. To treat Builder warnings as errors,
            pass the <code>-strict</code> option to the Builder (for more information, see <a href="ghs_help://build_v800.section.the_gbuild_utility_program">The gbuild Utility Program</a>. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>--quit_after_warnings</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>--no_quit_after_warnings</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.VersionInformation">
         <p>Instructs the compiler and other tools to print its copyright banner and version number. Permitted settings for this option
            are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-V</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>--no_version</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.VersionInfo">
         <p>Creates or appends version and build information to the <code>.comment</code> section of any object file generated by the assembler or compiler. (These are strings identifying the version of the compiler
            and any driver options passed when the object was built.) Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-version_info</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_version_info</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GreenHillsStandardMode">
         <p>Enables Green Hills Standard Mode, which enables warnings and errors that enforce a stricter coding standard than regular
            C and C++. It was designed to aid you in avoiding common pitfalls when designing complex programs. The versions of the standard
            are named after the year they were finalized. The year does not necessarily match the version number of the Green Hills Compiler.
            To suppress a diagnostic issued by this mode, use <code>--diag_suppress=</code> (see <a href="ghs_help://build_v800.bod.DiagSuppress">Set Message to Silent</a>). Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>None</strong> (<code>--ghstd=none</code>) &#8212; Explicitly disables Green Hills Standard Mode. Use this option on children of a project for which Green Hills Standard
                     Mode is enabled to disable it for those children.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>2010</strong> (<code>--ghstd=2010</code>) &#8212; Enables the 2010 version of Green Hills Standard Mode. This option is equivalent to <code>--coding_standard=ghstd2010 -Wformat</code>. For a list of diagnostics promoted or enabled by this option, see <a href="ghs_help://build_v800.section.csp_ghstd2010"> GHS Standard Mode</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>last</strong> (<code>--ghstd=last</code>) &#8212; Use the most recent version of Green Hills Standard mode.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.CodingStandard">
         <p>Specifies a coding standard profile. For information about coding standard profile syntax and creating your own profiles,
            see <a href="ghs_help://build_v800.chapter.green_hills_coding_standards">Coding Standards</a>. The equivalent driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>--coding_standard=<var>filename</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>Where <var>filename</var> is the name of a coding standard in the <strong>defaults\coding_standards</strong> subdirectory of your compiler installation (such as <code>ghstd2010</code>). Otherwise, the argument is processed as the name of a coding standard relative to the current directory.
         </p>
      </div>
      <hr>
      <div id="bod.BriefDiagnostics">
         <p>Controls a mode in which a shorter form of the diagnostic output is used. When enabled, the original source line is not displayed
            and the error message text is not wrapped when it is too long to fit on a single line. Permitted settings for this option
            are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--brief_diagnostics</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_brief_diagnostics</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.WrapDiagnostics">
         <p>Controls whether diagnostic messages are wrapped when they are too long to fit on a single line. Permitted settings for this
            option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--wrap_diagnostics</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_wrap_diagnostics</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ErrorBasename">
         <p>Controls whether full pathnames are given for files mentioned in diagnostic messages. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-error_basename</code>) &#8212; Filenames in diagnostic messages include only the name of the file. No path information is provided.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_error_basename</code>) &#8212; [default] &#8212; Filenames in diagnostic messages include the path information that was passed to the driver.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FunctionsWithoutPrototypes">
         <p>Controls the treatment of functions that are referenced or called when no prototype has been provided. Permitted settings
            for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Errors</strong> (<code>--prototype_errors</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Warnings</strong> (<code>--prototype_warnings</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Silent</strong> (<code>--prototype_silent</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.AsmMessages">
         <p>Controls the treatment of <code>asm</code> statements. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Errors</strong> (<code>--asm_errors</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Warnings</strong> (<code>--asm_warnings</code>) &#8212; [default for strict ANSI C and strict ANSI C++]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Silent</strong> (<code>--asm_silent</code>) &#8212; [default for all other C and C++ modes]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>In strict ANSI C, the spelling <code>asm</code> is not part of the C language. It is unknown to the compiler and may be used as the name of a variable or function. To write
            an <code>asm</code> macro in strict ANSI C or strict ISO 
                                    C99
                                 , you must use <code>__asm</code>. In non-strict ANSI C and ISO 
                                    C99, and in C++, the two spellings (<code>asm</code> and <code>__asm</code>) are identical.
         </p>
         <p>Any correct use of <code>__asm</code> may still give a diagnostic indicating that <code>__asm</code> is non-standard.
         </p>
      </div>
      <hr>
      <div id="bod.UnknownPragmaMessages">
         <p>Controls the treatment of <code>#pragma</code> directives that are not recognized by the compiler. Green Hills extension <code>#pragma</code> directives (those prefixed with <code>#pragma ghs</code>) are always recognized by the compiler, even if the extension directives do not correspond to known or supported behaviors.
            Incorrect uses of Green Hills extension <code>#pragma</code> directives are diagnosed according to the "Incorrect Pragma Directives" option. See <a href="ghs_help://build_v800.bod.IncorrectPragmaMessages">Incorrect Pragma Directives</a> and <a href="ghs_help://build_v800.section.ghs_extension_pragmas">Green Hills Extension Pragma Directives</a>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Errors</strong> (<code>--unknown_pragma_errors</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Warnings</strong> (<code>--unknown_pragma_warnings</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Silent</strong> (<code>--unknown_pragma_silent</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IncorrectPragmaMessages">
         <p>Controls the treatment of valid <code>#pragma</code> directives that use the wrong syntax. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Errors</strong> (<code>--incorrect_pragma_errors</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Warnings</strong> (<code>--incorrect_pragma_warnings</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Silent</strong> (<code>--incorrect_pragma_silent</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Ecom_Gnu_WFormat">
         <p>Controls argument type checking against the format string in calls to <code>printf()</code> and <code>scanf()</code>. The checking is only performed if the format string is a constant. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Wformat</code>) &#8212; The compiler performs argument type checking against <code>printf()</code> and <code>scanf()</code> format strings. This option also defines the <code>__CHECK_PRINTF__</code> macro.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Wno-format</code>) &#8212; [default] The compiler does not perform argument type checking against <code>printf()</code> or <code>scanf()</code> format strings.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option has no effect if Green Hills header files are not used.</p>
      </div>
      <hr>
      <div id="bod.Ecom_Gnu_WImplicitInt">
         <p>Controls a warning that is issued if the return type of a function is not declared before it is called (thus causing the return
            type to be implicitly declared <code>int</code>). Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Wimplicit-int</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Wno-implicit-int</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For broader prototype checking, see <strong>Compiler Diagnostics&#8594;C/C++ Messages&#8594;Functions Without Prototypes</strong>
                                 
                                 .
         </p>
      </div>
      <hr>
      <div id="bod.Ecom_Gnu_WShadow">
         <p>Controls a warning that is issued if the declaration of a local variable <strong>shadows</strong> the declaration of a variable of the same name declared at the global scope, or at an outer scope. Permitted settings for
            this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Wshadow</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Wno-shadow</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Ecom_Gnu_WTrigraphs">
         <p>Controls a warning that is issued for any use of trigraphs. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Wtrigraphs</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Wno-trigraphs</code>) &#8212; [default]
                  </p>
               </li>
            </ul>This option does not control diagnostic 1967, which warns about trigraphs that may unintentionally affect semantics. To disable
            this diagnostic as well, use <code>--diag_suppress 1967</code>.
         </p>
      </div>
      <hr>
      <div id="bod.Ecom_Gnu_WUndef">
         <p>Controls a warning that is issued for undefined symbols in preprocessor expressions. Such undefined symbols are always given
            the value of 0. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Wundef</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Wno-undef</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.DiagError">
         <p>Sets the specified compiler diagnostic messages to the level of <strong>error</strong>:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>--diag_error=<var>n[,n2]...</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.DiagWarning">
         <p>Sets the specified compiler diagnostic messages to the level of <strong>warning</strong>:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>--diag_warning=<var>n[,n2]...</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.DiagRemark">
         <p>Sets the specified compiler diagnostic messages to the level of <strong>remark</strong>:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>--diag_remark=<var>n[,n2]...</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.DiagSuppress">
         <p>Sets the specified diagnostics message to the level of <strong>silent</strong>. The equivalent driver option is:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>--diag_suppress <var>n[,n2]...</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.DisplayErrorNumber">
         <p>Controls the display of diagnostic error message numbers in the compiler and in assemblers that support this feature. Permitted
            settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--display_error_number</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_display_error_number</code>)
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>When a generated diagnostic error message number has a <code>-D</code> suffix, it is discretionary. For example:
            <br><pre>"hello.c", line 24: warning #549-D:
variable "i" is used before its value is set
</pre><br>
                                 
         </p>
         <p>The severity level of discretionary diagnostics may be changed using the preceding options.</p>
      </div>
      <hr>
      <div id="bod.AsmDiagError">
         <p>Sets the specified <code>asm</code> diagnostic messages to the level of error:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-asm_diag_error=<var>n[,n2]...</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.AsmDiagWarning">
         <p>Sets the specified <code>asm</code> diagnostic messages to the level of warning:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-asm_diag_warning=<var>n[,n2]...</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.AsmDiagSuppress">
         <p>Sets the specified <code>asm</code> diagnostic messages to the level of silent:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-asm_diag_suppress=<var>n[,n2]...</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ElxrDiagError">
         <p>Sets the specified <code>elxr</code> diagnostic messages to the level of error:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-elxr_diag_error=<var>n[,n2]...</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ElxrDiagWarning">
         <p>Sets the specified <code>elxr</code> diagnostic messages to the level of warning:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-elxr_diag_warning=<var>n[,n2]...</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ElxrDiagSuppress">
         <p>Sets the specified <code>elxr</code> diagnostic messages to the level of silent:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-elxr_diag_suppress=<var>n[,n2]...</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.DoubleCheckLevel">
         <p>Each level performs a different degree of processing. The higher the level, the more bugs can be identified, and a longer
            processing time is required. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>None</strong> (<code>-double_check.level=none</code>) &#8212; [default] DoubleCheck is disabled.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Low</strong> (<code>-double_check.level=low</code>) &#8212; Looks for all types of bugs, but does not follow execution paths involving function calls. DoubleCheck runs quickly and
                     should not greatly affect the time required to compile files.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Medium</strong> (<code>-double_check.level=medium</code>) &#8212; Looks for all types of bugs, and follows execution paths through calls between functions in all source files. This extra
                     processing requires more time than the low level.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>High</strong> (<code>-double_check.level=high</code>) &#8212; Extends the medium level by investigating even more interprocedural execution paths. This requires more processing time
                     than the medium level.
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>The medium and high levels require two-pass compilation. The first pass summarizes the contents of source files. The second
            pass uses the summaries of all source files when compiling each file to identify potential intermodule paths.
         </p>
         <p>For more information about DoubleCheck and these options, see <a href="ghs_help://build_v800.chapter.doublecheck">The DoubleCheck Source Analysis Tool</a>.
         </p>
      </div>
      <hr>
      <div id="bod.DoubleCheckReport">
         <p>Sets the name of the report file DoubleCheck generates. The equivalent driver option is:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-double_check.report=</code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For more information about <code>-double_check.report=</code>, see <a href="ghs_help://build_v800.section.doublecheck_report">Specifying a DoubleCheck Report File</a>.
         </p>
      </div>
      <hr>
      <div id="bod.DoubleCheckConfig">
         <p>Specifies the configuration file containing function properties. The equivalent driver option is:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-double_check.config=</code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For more information about <code>-double_check.config=</code>, see <a href="ghs_help://build_v800.section.doublecheck_config">Specifying Function Properties in a DoubleCheck Configuration File</a>.
         </p>
      </div>
      <hr>
      <div id="bod.DoubleCheckIgnore">
         <p>Disables a particular DoubleCheck error message or warning message for a specific file or part of a build hierarchy. The equivalent
            driver option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-double_check.ignore=</code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For more information about <code>-double_check.ignore=</code>, see <a href="ghs_help://build_v800.section.doublecheck_ignore">Ignoring Source Analysis Errors and Warnings</a>.
         </p>
      </div>
      <hr>
      <div id="bod.DoubleCheckSeverity">
         <p>Specifies whether DoubleCheck error or warning messages stop the build process. Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-double_check.stop_build=off</code>) &#8212; [default] DoubleCheck error and warning messages do not stop the build.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Errors Only</strong> (<code>-double_check.stop_build=errors</code>) &#8212; Only DoubleCheck error messages stop the build.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Warnings and Errors</strong> (<code>-double_check.stop_build=warnings</code>) &#8212; Both DoubleCheck error and warning messages stop the build.
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>For more information about <code>-double_check.stop_build=</code>, see <a href="ghs_help://build_v800.section.doublecheck_stop_build">Promoting Source Analysis Errors and Warnings</a>.
         </p>
      </div>
      <hr>
      <div id="bod.GCores_OutputName">
         <p>Specify the name of the final image.</p>
         <p> If executed from the command line, the default is <strong>multi_cores.mca</strong>.
         </p>
         <p> The <strong>.mca</strong> extension is compulsory for MultiCoreArchive final image names. If no extension is provided (or provided a different one) it will be automatically changed to <strong>.mca</strong> and a warning will be issued.
         </p>
         <p>The equivalent option is:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-o <var>filename.mca</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_SharedImports">
         <p>Allows the shared module to import symbols from the cores. This is done utilizing a two-pass build process. The shared module
            is first built with undefined symbol errors disabled. This allows the cores to then be built importing symbols from the shared
            module. The shared module is then re-built with undefined symbol errors enabled and importing undefined symbols from the core
            modules. Because of the nature of this method, users should take caution to prevent the shared module from referencing symbols
            (defined or undefined) unintentionally that may exist in a core module. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-shared_imports</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_shared_imports</code>) &#8212; [default] 
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_AllowOverlap">
         <p>By default <code>gcores</code> will warn if any symbol or code in a shared module (built as part of the <code>-share</code> option) overlaps with any symbol or address in a core-specific module.  Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-allow_overlap</code>) &#8212; Disables these warnings. 
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_allow_overlap</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_CrossCoreImports">
         <p>By default the core-specific files are not allowed to reference symbols in other core-specific files. This option attempts
            to allow such symbol referencing. Use with caution, as duplicate or undefined symbol names used between the components may
            result in undesirable linkage. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-cross_core_imports</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_cross_core_imports</code>) &#8212; [default] 
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_Common">
         <p>Specifies a list of driver options that are used in the final linking stage for each core and the shared module. If <code>gcores</code> is called from the command line, these options are used together with the options specified in <code>-core</code> or <code>-share</code> to build the core or the shared module. The option or options have to be enclosed between braces {  } . The equivalent option
            is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-common { <var>common options</var> }</code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_Driver">
         <p>Specify the driver/compiler for which to build the cores and the shared module. If omitted, the default is <code>ccv850</code>. The equivalent option is:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-driver=<var>driver</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_Cpu">
         <p>Specify the processor for which to build the cores and the shared module. The equivalent option is:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <code>-cpu=<var>cpu</var>
                                                   </code>
                                             
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_KeepTempFiles">
         <p>Do not remove temporary files.</p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-keeptempfiles</code>) &#8212; <code>gcores</code> does not remove temporary files.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-nokeeptempfiles</code>) &#8212; [default] <code>gcores</code> removes temporary files.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_SharedLibs">
         <p>Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-shared_libs</code>) &#8212;
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_shared_libs</code>) &#8212;
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_AllocSharedMem">
         <p>Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-alloc_shared_mem</code>) &#8212;
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_alloc_shared_mem</code>) &#8212;
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_ExportedAbsolutesOnly">
         <p>Restricts the symbols that can be imported from either another core or from the shared module to those that have been explicitly
            exported in the module that defines them. 
         </p>
         <p>Three methods are available to export symbols:
            
            <ul>
               <li>
                  <p>Through the <code>#pragma ghs exported</code> pragma directive in the source code. This will export the symbol defined under the <code>#pragma</code> line.
                  </p>
               </li>
               <li>
                  <p>Through the driver option <code>-exportall=library</code>. This will export all the symbols of the provided library.
                  </p>
               </li>
               <li>
                  <p>Through a file <strong>library.ghsexports</strong>. If a file named <strong>library.ghsexports</strong> is found in the same directory as the library <strong>library.a</strong> is generated, the symbols (each one in its own line) specified in the file will be exported.
                  </p>
               </li>
            </ul>
                           
         </p>
         <p>The symbol names included in the file <strong>.ghsexports</strong> must be the same as the ones existing in the symbol table of the library in question. Please add an underscore <code>("_")</code> to the beginning of the variable or function.
         </p>
         <p>For instance, if a library <strong>libshared_0.a</strong> is exporting through its <strong>libshared_0.ghsexports</strong> file the variable <code>common_lib0_var2</code> and the function <code>common_lib0_f0</code>, then the symbols to add in <strong>libshared_0.ghsexports</strong> will be (contents of the file <strong>libshared_0.ghsexports</strong>) :
            <br><pre>_common_lib0_f0
_common_lib0_var2</pre><br>
                           
         </p>
         <p>In order to add a dependency to the <strong>.ghsexports</strong> file, use the Builder options <code>:depends</code>, <code>:dependsRelative</code> or <code>:dependsNonRelative</code> in the Core or SharedMemory project file.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>On</strong> (<code>-exported_absolutes_only</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>Off</strong> (<code>-no_exported_absolutes_only</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.GCores_AdditionalOutput">
         <p>Creates the specified output type in addition to the MultiCoreArchive final image. The syntax <code>-<var>format</var>=<var>name</var>
                                 </code> allows you to specify the name of the file. Permitted settings for this option are:
         </p>
         <p>
            
                              
            <ul>
               <li>
                  <p>
                                                <strong>S-Record File</strong> (<code>-srec</code>, <code>-srec=<var>name</var>
                                                   </code>) &#8212; Generates output file with <code>.run</code> extension containing the output of the MultiCoreArchive image as translated by the <code>gsrec</code> utility program. For more information about <code>gsrec</code>, see <a href="ghs_help://build_v800.section.the_gsrec_utility_program">The gsrec Utility Program</a>.
                  </p>
               </li>
               <li>
                  <p>
                                                <strong>HEX386 File</strong> (<code>-hex</code>, <code>-hex=<var>name</var>
                                                   </code>) &#8212; Generates output file in HEX386 format with <code>.run</code> extension containing the output of the MultiCoreArchive image as translated by the <code>gsrec</code> utility program with <code>-hex386</code> passed to it. For more information about <code>gsrec</code>, see <a href="ghs_help://build_v800.section.the_gsrec_utility_program">The gsrec Utility Program</a>.
                  </p>
               </li>
            </ul>
                           
         </p>
      </div>
      <hr>
      <div id="bod.TargetProcessor">
         <p>Specifies code generation for a particular target <var>processor</var> (see <a href="ghs_help://build_v800.section.processor_variants">V850 and RH850 Processor Variants</a>).
         </p>
         <p>
                                 If you specify a processor, the driver selects the appropriate instruction set and a generic <strong>.ld</strong> file. For more information about these <strong>.ld</strong> files, see <a href="ghs_help://build_v800.section.working_with_ld_files">Working with Linker Directives Files</a>. You can override the default <strong>.ld</strong> file by specifying an alternate linker directives file elsewhere on the command line. For a more detailed discussion on <strong>.ld</strong> files, see <a href="ghs_help://build_v800.section.linker_directives_files">Configuring the Linker with Linker Directives Files</a>.
         </p>
         <p>The equivalent driver option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Generic CPU</strong> (<code>-cpu=<var>cpu</var>
                                                      </code>) &#8212; To obtain a list of supported processors from the command line, enter <code>-cpu=?</code> (or <code>-cpu=\?</code> in many shells).
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ppc_AdditionalSdaReg">
         <p>Specifies up to five additional SDA and ZDA base pointers, beginning at 
                                    <code>R20</code>
                                 . The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-additional_sda_reg=<var>n</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>For more information, see <a href="ghs_help://build_v800.section.specifying_additional_sda_registers">Specifying Additional Registers for Special Data Areas</a>.
         </p>
      </div>
      <hr>
      <div id="bod.AdditionalSdaCommon">
         <p>Causes the compiler to generate code that is compatible with all settings of <code>-additional_sda_reg</code>=<var>n</var>. 
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-additional_sda_common</code>) &#8212; Generate code that can be safely linked with modules that use additional SDA registers.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_additional_sda_common</code>) &#8212; [default] Generate code that assumes no additional SDA registers will be used.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.InitRamAtStartup">
         <p>Controls whether to perform RAM initialization during startup for a program built to boot from ROM.</p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-init_ram_at_startup</code>) &#8212; Perform initialization of RAM during startup.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_init_ram_at_startup</code>) &#8212; [default] Do not perform RAM initialization during startup. 
                  </p>
               </li>
            </ul>For more information, see <a href="ghs_help://build_v800.section.runtime_ram_initialization">Run-Time RAM Initialization and RAM Initialization Table</a>).
         </p>
      </div>
      <hr>
      <div id="bod.RamInitVal">
         <p>Specifies a 32-bit word pattern value used for initializing RAM at startup. If not explicitly specified, the default value
            is 0. This option is only effective when <code>-init_ram_at_startup</code> is passed. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-ram_init_val=<var>value</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.InlinePrologue">
         <p>Controls the manner in which the compiler generates each function prologue and epilogue. Permitted settings for this option
            are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-inline_prologue</code>) &#8212; Forces the compiler to use inline code sequences. This option may adversely impact the size of the generated code, so
                     it should only be used when necessary (for example, when the routines may not exist in memory yet).
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_inline_prologue</code>) &#8212; Do not force the compiler to use inline code sequences.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>By default, the compiler selects the most efficient method based on optimization settings and registers that must be saved.</p>
      </div>
      <hr>
      <div id="bod.BigSwitch">
         <p>Controls the size of switch statement offset entries. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-bigswitch</code>) &#8212; Use a 32-bit offset. This option is necessary when compiling a file with a very large switch statement. The assembler or linker
                     will give a specific error if this option is needed for a particular file. Otherwise the option is not necessary.
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-nobigswitch</code>) &#8212; [default] Use a 16-bit or 22-bit offset, which results in smaller code.
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.SwitchTable">
         <p>Controls how the compiler evaluates switch statements. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--switch_table</code>) &#8212; [default] The compiler evaluates switch statements using any means including jump tables.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_switch_table</code>) &#8212; The compiler evaluates switch statements using a series of conventional compare and branch instructions.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FloatingPointWarnFloat">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>-Wfloat</code>) &#8212; Warns for any use of floating point. This option has no effect on the code generated by the compiler. This option also
                     does not hide declarations in the standard C headers, so warnings will occur if certain header files are used, even if the
                     declarations in those header files are not needed.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>-Wnofloat</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.FloatingPointWarnDouble">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>-Wdouble</code>) &#8212; Warns for any use of double precision floating point or long double precision floating point. This option has no effect
                     on the code generated by the compiler. This option also does not hide declarations in the standard C headers, so warnings
                     will occur if certain header files are used, even if the declarations in those header files are not needed.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>-Wnodouble</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.FloatingPointNoDouble">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>-fnodouble</code>) &#8212; Gives a fatal error for any use of double precision floating point, as well as long double precision floating point, but
                     allows single precision. All floating point literals must have the <code>f</code> suffix, or they are rejected with an error. All declarations that use the types <code>double</code> or <code>long double</code> are hidden in the standard C header files so that the header files may still be included without error. No error is given
                     when a single precision floating point expression is passed to a function that is not declared with a prototype or to a function
                     that takes variable parameters, even though the floating point expression will be promoted to double precision before being
                     passed.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>-fnonodouble</code>) &#8212; [default] Takes no special action with respect to double precision floating point or long double precision floating point.
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>See also the <code>-fnone</code> option in <a href="ghs_help://build_v800.bod.FPCoprocessor">Floating-Point Mode</a>; it completely disables floating point in the compiler and may cause different libraries to be selected. If <code>-fnone</code> is used together with either <code>-fnonodouble</code> or <code>-fnodouble</code>, <code>-fnone</code> always takes precedence.
         </p>
      </div>
      <hr>
      <div id="bod.CompilationMode">
         <p>Controls binary code generation. By default, the toolchain generates binary object files directly from source code rather
            than via the creation of assembly language files. Since the assembler is not invoked, binary code generation significantly
            decreases compile time.
         </p>
         <p>Certain options, such as <code>-dual_debug</code>, are incompatible with binary code generation, and binary code generation will default to off if these are selected. Also,
            binary code generation is automatically disabled on individual files if the compiler determines that the file uses features
            (such as embedded assembly) that are incompatible with binary code generation.
         </p>
         <p>This option does not control the output file format. To generate a binary output file, see the <code>-memory</code> driver option in <a href="ghs_help://build_v800.bod.AdditionalOutput">Generate Additional Output</a>.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-obj</code>) &#8212; Enables direct binary generation.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-noobj</code>) &#8212; Disables direct binary generation.
                  </p>
               </li>
            </ul>
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.TempDirectory">
         <p>Specifies a <var>directory</var> for writing temporary files to. This option is useful if your default temporary directory is on a small file system that
            might run out of disk space during compilations which involve inlining or template processing. The equivalent driver option
            is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-tmp=<var>directory</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>(Linux/Solaris) By default, temporary files are written to the first of the following directories that exists:</p>
         <ul>
            <li>
               <p>The directory specified by the environment variable <code>TMPDIR</code>.
               </p>
            </li>
            <li>
               <p>The directory specified by the constant value of variable <code>P_tmpdir</code> (usually <strong>/var/tmp</strong> on Solaris and <strong>/tmp</strong> on Linux), which is defined in the operating system header file (usually located in <strong>/usr/include/stdio.h</strong>).
               </p>
            </li>
            <li>
               <p>
                                             <strong>/tmp</strong>.
               </p>
            </li>
         </ul>
         <p>(Windows) By default, temporary files are written to the first of the following directories that exists:</p>
         <ul>
            <li>
               <p>The directory specified by the environment variable <code>TMP</code>.
               </p>
            </li>
            <li>
               <p>The directory specified by the constant value of variable <code>P_tmpdir</code> (usually the root directory of the current drive), which is defined in the operating system header file.
               </p>
            </li>
            <li>
               <p>The current working directory.</p>
            </li>
         </ul>
      </div>
      <hr>
      <div id="bod.KeepTempFiles">
         <p>Controls whether temporary files generated during compilation are retained. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Retain</strong> (<code>-keeptempfiles</code>) &#8212; Prevents the deletion of temporary files after they are used. If an assembly language file is created by the compiler,
                     this option will place it in the current directory instead of the temporary directory.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Delete</strong> (<code>-nokeeptempfiles</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.KeepAsmFiles">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Retain</strong> (<code>-keepasmfiles</code>) &#8212; Produces an <strong>.s</strong> file when the compiler is invoked on a C or C++ file to produce an object file. The <strong>.s</strong> file resides in the same location and has the same base name as the <strong>.o</strong> file. This option implies <code>-noobj</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Delete</strong> (<code>-nokeepasmfiles</code>) &#8212; [Default] Does not produce <strong>.s</strong> files.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>The position of this option on the command line does not matter.</p>
      </div>
      <hr>
      <div id="bod.KeepCppFiles">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Retain</strong> (<code>-keepcppfiles</code>) &#8212; Produces an <strong>.i</strong> file (preprocessed output) when the compiler is invoked on a C or C++ file. Produces an <strong>.si</strong> file when the preprocessor is invoked on an assembly file as a result of building with <code>-preprocess_assembly_files</code> (see <a href="ghs_help://build_v800.bod.PreProcessAssemblyFiles">Preprocess Assembly Files</a>). The <strong>.i</strong> and <strong>.si</strong> files reside in the same location and have the same base name as the <strong>.s</strong> and/or <strong>.o</strong> file.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Delete</strong> (<code>-nokeepcppfiles</code>) &#8212; [Default] Does not produce <strong>.i</strong> files.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>The position of this option on the command line does not matter.</p>
      </div>
      <hr>
      <div id="bod.InputLanguage">
         <p>Explicitly specifies that a program or archive contains object files or libraries that contain C++. The equivalent driver
            option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-language=<var>language</var>
                                                      </code> &#8212; where <var>language</var> is one of:
                  </p>
                  <p>
                     
                                                   
                     <ul>
                        <li>
                           <p>
                                                                     <code>c</code> (this option has no effect; all programs are assumed to contain C object files.)
                           </p>
                        </li>
                        <li>
                           <p>
                                                                     <code>cxx</code>
                                                                  
                           </p>
                        </li>
                     </ul>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>At link time and archive time, the driver must know if any object files or libraries contain languages other than C in order
            to select the correct libraries and perform any special processing. If your project includes object files or libraries that
            were compiled from a different language, you must set <code>-language=<var>language</var>
                                    </code> on that project. This option has no effect when set on an input file.
         </p>
         <p>If your project includes source files that contain other languages and those files appear on the command line, you do not
            need to set this option. If you invoke the driver directly using <code>cxv850</code>, <code>-language=cxx</code> is implied.
         </p>
      </div>
      <hr>
      <div id="bod.AnyOutputSuffix">
         <p>Controls the acceptance of non-standard output suffixes. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Accepted</strong> (<code>--any_output_suffix</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Not Accepted</strong> (<code>--no_any_output_suffix</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.SpecialSourceDirNonRelative">
         <p>Specifies a <var>directory</var> in which the builder should search for source files relative to the location of your Top Project. The syntax for this option
            is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:sourceDirNonRelative=<var>directory</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This is a <strong>Builder</strong>-only option. There is no equivalent driver option.
         </p>
      </div>
      <hr>
      <div id="bod.SpecialOutputDirRelative">
         <p>Specifies the path to where object files (and any custom file types) are written, relative to the location of the current
            project <strong>.gpj</strong> file. The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:outputDirRelative=<var>directory</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option is most useful for custom tools that do not allow you to specify a directory for intermediate output. For projects
            that use only Green Hills Tools, use <code>-object_dir</code> instead. <code>-object_dir</code> overrides this option.
         </p>
         <p>This is a Builder-only option. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialBinDir">
         <p>Specifies the path to where final executable output files are written, relative to the location of your Top Project (usually
            <strong>default.gpj</strong>). The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:binDir=<var>directory</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialBinDirRelative">
         <p>Specifies the path to where final executable output files are written, relative to the location of the current <strong>.gpj</strong> project file. The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:binDirRelative=<var>directory</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialDepends">
         <p>Specifies that the present file <strong>must</strong> be rebuilt if the specified file, relative to the location of your source directory, changes. The syntax for this option
            is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:depends=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialDependsRelative">
         <p>Specifies that the present file <strong>must</strong> be rebuilt if the specified file, relative to the location of the present <strong>.gpj</strong> project file, changes. The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:dependsRelative=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialDependsNonRelative">
         <p>Specifies that the present file <strong>must</strong> be rebuilt if the specified file, relative to the location of your Top Project (usually <strong>default.gpj</strong>), changes. The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:dependsNonRelative=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialNoSelfDepend">
         <p>Specifies that changes to this Green Hills Project (<strong>.gpj</strong>) file do not cause it or any of its children to be rebuilt. The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:noSelfDepend</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialNoDepends">
         <p>Specifies that the present file <strong>must not</strong> be rebuilt if the specified file changes. This option overrides a previous <code>:depends</code> option on a <strong>.gpj</strong> file specified in a parent project. To prevent changes to a <strong>.gpj</strong> file from causing a rebuild, use <code>:noSelfDepend</code> instead. The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:nodepends=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialOutputName">
         <p>Specifies a name for the output file of a build item. Use this only for file types that do not accept <code>-o</code> or any other option that sets an output name. The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:outputName=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialAppendExtension">
         <p>Appends the default file extension to the output filename if it does not already have an extension, or replaces the existing
            extension if it does. For example, this option would replace the extension of an object file with <strong>.o</strong> (Linux/Solaris) or <strong>.obj</strong> (Windows). This option is not usually necessary unless you have manually changed the output name of the file. The syntax
            for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:appendExtension</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialPreExec">
         <p>Specifies commands that are executed before the file is processed. The commands are executed immediately before the processing
            step for the file. If the file has no processing step, the commands are not executed. The following table lists the processing
            step for common file types:
            
            <table border="1">
               <tr>
                  <th>File Type
                     
                  </th>
                  <th>Processing Step
                     
                  </th>
               </tr>
               <tr>
                  <td>
                     <p>C/C++ Source</p>
                  </td>
                  <td>
                     <p>Compilation</p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>Assembly Source</p>
                  </td>
                  <td>
                     <p>Assembling</p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>Program</p>
                  </td>
                  <td>
                     <p>Linking</p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>Library</p>
                  </td>
                  <td>
                     <p>Archiving</p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>C/C++ Header</p>
                  </td>
                  <td>
                     <p>None</p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>Project</p>
                  </td>
                  <td>
                     <p>None</p>
                  </td>
               </tr>
            </table>For example:
            
            <ul>
               <li>
                  <p>If you set <code>:preExec</code> on a Program, the commands are run after compiling the source files in the Program, but before linking it.
                  </p>
               </li>
               <li>
                  <p>If you set <code>:preExec</code> on a C/C++ Header file, the commands are not run.
                  </p>
               </li>
            </ul>If you are performing a parallel build, and it is not safe to execute the specified commands while other build operations
            are running, use this option. See also <a href="ghs_help://build_v800.bod.SpecialPreExecSafe">Safe Commands to Execute Before Associated Command</a>.
         </p>
         <p>The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:preexec=<var>command</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>If <var>command</var> must include information about the file being processed, use a context sensitive variable (see <a href="ghs_help://build_v800.section.context_sensitive">Context Sensitive Variables</a>).
         </p>
         <p>If you only want to execute the command when processing a file in certain contexts, use a conditional control statement (see
            <a href="ghs_help://build_v800.section.conditional_control">Conditional Control Statements</a>). For example, to run <strong>preProc.bat</strong> on a file only when building on a Windows host, use the following option:
            <br><pre>{streq(__MULTI_HOST__, "win32")} :preExec="preProc.bat <var>filename</var>"</pre><br>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialPreExecSafe">
         <p>Specifies commands that are executed before the file is processed. These commands are guaranteed to be performed before the
            processing step, but may not be performed immediately before. Commands specified with this option must be <strong>safe</strong>; they must not modify any files related to the build (such as projects, source files, or object files). If you are performing
            a parallel build, use this option instead of <code>:preExec</code> to execute safe commands while other build operations are running, because it may speed up the build process. The syntax
            for this option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>:preexecSafe=<var>command</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information about when files are processed, see <a href="ghs_help://build_v800.bod.SpecialPreExec">Commands to Execute Before Associated Command</a>.
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialPreExecShell">
         <p>Specifies commands to be executed in a shell before the file is processed. For more information about when files are processed,
            see <a href="ghs_help://build_v800.bod.SpecialPreExec">Commands to Execute Before Associated Command</a>.
         </p>
         <p>If you are performing a parallel build, and it is not safe to execute the specified commands while other build operations
            are running, use this option. See also <a href="ghs_help://build_v800.bod.SpecialPreExecShellSafe">Safe Commands to Execute Before Associated Command (via Shell)</a>.
         </p>
         <p>The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:preexecShell=<var>command</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>MULTI prepends the following text to <var>command</var> depending on your host's operating system:
            
            <ul>
               <li>
                  <p>Windows &#8212; <code>
                                                         <var>COMSPEC</var> /c</code>, where <var>COMSPEC</var> is the value of the <code>COMSPEC</code> environment variable (usually <code>cmd</code>).
                  </p>
               </li>
               <li>
                  <p>Linux and Solaris &#8212; <code>/bin/sh -c</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialPreExecShellSafe">
         <p>Specifies commands that are executed in a command prompt or shell before the file is processed. These commands are guaranteed
            to be performed before the processing step, but may not be performed immediately before. Commands specified with this option
            must be <strong>safe</strong>; they must not modify any files related to the build (such as projects, source files, or object files). If you are performing
            a parallel build, use this option instead of <code>:preExecShell</code> to execute safe commands while other build operations are running, because it may speed up the build process.
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>:preexecShellSafe=<var>command</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>MULTI prepends the following text to <var>command</var> depending on your host's operating system:
            
            <ul>
               <li>
                  <p>Windows &#8212; <code>
                                                         <var>COMSPEC</var> /c</code>, where <var>COMSPEC</var> is the value of the <code>COMSPEC</code> environment variable (usually <code>cmd</code>).
                  </p>
               </li>
               <li>
                  <p>Linux and Solaris &#8212; <code>/bin/sh -c</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialPostExec">
         <p>Specifies commands that are executed after the file is processed. The commands are executed immediately after the processing
            step for the file. If the file has no processing step, the commands are not executed. The following table lists the processing
            step for common file types:
            
            <table border="1">
               <tr>
                  <th>File Type
                     
                  </th>
                  <th>Processing Step
                     
                  </th>
               </tr>
               <tr>
                  <td>
                     <p>C/C++ Source</p>
                  </td>
                  <td>
                     <p>Compilation</p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>Assembly Source</p>
                  </td>
                  <td>
                     <p>Assembling</p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>Program</p>
                  </td>
                  <td>
                     <p>Linking</p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>Library</p>
                  </td>
                  <td>
                     <p>Archiving</p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>C/C++ Header</p>
                  </td>
                  <td>
                     <p>None</p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>Project</p>
                  </td>
                  <td>
                     <p>None</p>
                  </td>
               </tr>
            </table>For example:
            
            <ul>
               <li>
                  <p>If you set <code>:postExec</code> on an Assembly Source file, the commands are run after assembling the file, but before linking it.
                  </p>
               </li>
               <li>
                  <p>If you set <code>:postExec</code> on a C/C++ Header file, the commands are not run.
                  </p>
               </li>
            </ul>If you are performing a parallel build, and it is not safe to execute the specified commands while other build operations
            are running, use this option. See also <a href="ghs_help://build_v800.bod.SpecialPostExecSafe">Safe Commands to Execute After Associated Command</a>.
         </p>
         <p>The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:postexec=<var>command</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>If <var>command</var> must include information about the file being processed, use a context sensitive variable (see <a href="ghs_help://build_v800.section.context_sensitive">Context Sensitive Variables</a>).
         </p>
         <p>If you only want to execute the command when processing a file in certain contexts, use a conditional control statement (see
            <a href="ghs_help://build_v800.section.conditional_control">Conditional Control Statements</a>). For example, to run <strong>postProc.bat</strong> on a Program's output file when building on a Windows host, use the following option:
            <br><pre>{streq(__MULTI_HOST__, "win32")} :postExec="postProc.bat $(OUTPUTFILE)"</pre><br>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialPostExecSafe">
         <p>Specifies commands that are executed after the file is processed. These commands are guaranteed to be performed after the
            processing step, but may not be performed immediately after. Commands specified with this option must be <strong>safe</strong>; they must not modify any files related to the build (such as projects, source files, or object files). If you are performing
            a parallel build, use this option instead of <code>:postExec</code> to execute safe commands while other build operations are running, because it may speed up the build process. The syntax
            for this option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>:postexecSafe=<var>command</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information about when files are processed, see <a href="ghs_help://build_v800.bod.SpecialPostExec">Commands to Execute After Associated Command</a>.
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialPostExecShell">
         <p>Specifies commands to be executed in a command prompt or shell after the file is processed. For more information about when
            files are processed, see <a href="ghs_help://build_v800.bod.SpecialPostExec">Commands to Execute After Associated Command</a>.
         </p>
         <p>If you are performing a parallel build, and it is not safe to execute the specified commands while other build operations
            are running, use this option. See also <a href="ghs_help://build_v800.bod.SpecialPostExecShellSafe">Safe Commands to Execute After Associated Command (via Shell)</a>.
         </p>
         <p>The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:postexecShell=<var>command</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>MULTI prepends the following text to <var>command</var> depending on your host's operating system:
            
            <ul>
               <li>
                  <p>Windows &#8212; <code>
                                                         <var>COMSPEC</var> /c</code>, where <var>COMSPEC</var> is the value of the <code>COMSPEC</code> environment variable (usually <code>cmd</code>).
                  </p>
               </li>
               <li>
                  <p>Linux and Solaris &#8212; <code>/bin/sh -c</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialPostExecShellSafe">
         <p>Specifies commands that are executed in a command prompt or shell after the file is processed. These commands are guaranteed
            to be performed after the processing step, but may not be performed immediately after. Commands specified with this option
            must be <strong>safe</strong>; they must not modify any files related to the build (such as projects, source files, or object files). If you are performing
            a parallel build, use this option instead of <code>:postExecShell</code> to execute safe commands while other build operations are running, because it may speed up the build process.
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>:postexecShellSafe=<var>command</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>MULTI prepends the following text to <var>command</var> depending on your host's operating system:
            
            <ul>
               <li>
                  <p>Windows &#8212; <code>
                                                         <var>COMSPEC</var> /c</code>, where <var>COMSPEC</var> is the value of the <code>COMSPEC</code> environment variable (usually <code>cmd</code>).
                  </p>
               </li>
               <li>
                  <p>Linux and Solaris &#8212; <code>/bin/sh -c</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialExtraOutputFile">
         <p>Specifies any non-standard output files that are generated during building, so that the <strong>Builder</strong> can include them in file cleanup. The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:extraOutputFile=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialSelect">
         <p>For use with the Select One project type. Specifies a list of file extensions that determines which file in the project the
            Builder chooses. The first extension in the list has the highest priority, and the last extension has the lowest. The syntax
            for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:select=</code>
                                                   <code>
                                                         <var>arg1</var>[,<var>arg2</var>...]</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For example, if you specify <code>c,asm</code>, the Builder searches your <strong>Select One</strong> project for a <code>.c</code> file first, then a <code>.asm</code> file.
         </p>
         <p>If you specify multiple <code>:select</code> options for the same project, the builder concatenates them in the order they are specified.
         </p>
         <p>For information about Select One project types, see <a href="ghs_help://$MULTI.section.building_platformspecific_programs_from_the_same_source_files">the documentation about building platform specific programs from the same source files</a>.
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialPassThrough">
         <p>Passes unknown options to a command (any tool or utility invoked by the Builder). This is one way of quickly defining custom
            types. The syntax for this option is:
            
            <ul>
               <li>
                  <p>
                                                   <code>:passThrough=<var>argument</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialReference">
         <p>In a <strong>Reference</strong> project file, this option designates the project (<strong>.gpj</strong>) file that is the target of the reference. Create a <strong>Reference</strong> project and use this option when you want to include one project inside of another without carrying over the including project's
            options. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>:reference=<var>root_proj</var>[;<var>child_proj</var>]&#8230;[;<var>target_proj</var>]</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>
                                 <code>:reference</code> takes a string argument that is a semicolon-separated list of projects. The Builder uses this list as a path to traverse
            the project build tree and find the project you want to reference (<var>target_proj</var>). Each project in the path is the name of a file listed in the build tree, or "<code>..</code>", which refers to the parent of the previous project.
         </p>
         <p>If the first project in the list is "<code>..</code>", the Builder traverses the list beginning at the <strong>Reference</strong> project's parent.
         </p>
         <p>If the first project is the name of a file, the Builder traverses the list beginning at the Top Project.</p>
         <p>Each project in the list must match the name of a project in the build tree exactly as defined in your project files. If a
            project's location is defined using a relative or absolute disk path, you must include the disk path in the list. For example,
            if a project is defined in its parent as <strong>dir/x.gpj</strong>, the <code>:reference</code> list item for this project must be <strong>dir/x.gpj</strong>.
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialAutoInclude">
         <p>Specifies the types of files to include in a project. The syntax for this option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>:autoInclude</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information about Auto Include project types, see <a href="ghs_help://$MULTI.section.auto_include">the documentation about auto include</a>.
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.SpecialOptionsFile">
         <p>Specifies the name of an options file that contains a list of builder or driver options and linker directives (<code>.ld</code>) files to use when building a project. This option allows you to share a common set of options and linker directives files
            among multiple projects. In this file:
            
            <ul>
               <li>
                  <p>Each line must contain only one option or linker directives file.</p>
               </li>
               <li>
                  <p>If the line contains an option, it must begin with a whitespace.</p>
               </li>
               <li>
                  <p>If the line contains a linker directives file, it must begin with the filename.</p>
               </li>
            </ul>The lines in this file are processed as if they were present in the <strong>.gpj</strong> file <code>:optionsFile</code> is set in. These lines may use macros.
         </p>
         <p>The syntax for this option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>:optionsFile=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>where <var>filename</var> is a path to an options file relative to your Top Project. Options files often have the <strong>.opt</strong> extension by convention, but this is not a requirement.
         </p>
         <p>This option controls behavior in the Builder. There is no equivalent driver option.</p>
      </div>
      <hr>
      <div id="bod.CompilerDirectory">
         <p>Specifies an alternate location from which to invoke the compiler. The equivalent driver option is:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>-Y0,<var>directory</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.LibrarySearchDirectory">
         <p>Specifies an alternate location to search for the standard system libraries if they are not found in the default location.
            The equivalent driver option is:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>-YL,<var>directory</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>To search for libraries in another location before searching the default location, use the <code>-L<var>directory</var>
                                       </code> option.
         </p>
         <p>If you are not using the default startup code, note that this option changes only the search path for libraries. This means
            that the linker always takes <strong>crt0.o</strong> from the default location, even if it finds <strong>libstartup.a</strong> and <strong>libsys.a</strong> in another specified location. For more information about how to configure your project to use custom startup code, see <a href="ghs_help://$MULTI.section.settings_standalone">the documentation about settings for Stand-Alone programs</a>.
                                 
         </p>
      </div>
      <hr>
      <div id="bod.AssemblerDirectory">
         <p>Specifies an alternate location from which to invoke the assembler. The equivalent driver option is:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>-Ya,<var>directory</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.LinkerDirectory">
         <p>Specifies an alternate location from which to invoke the linker. The equivalent driver option is:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>-Yl,<var>directory</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.Host64">
         <p>Specifies whether the compiler driver selects 64-bit versions of supported toolchain components when both 32-bit and 64-bit
            versions are available. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>-host64</code>) &#8212; The driver selects any available 64-bit versions of toolchain components.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>-no_host64</code>) &#8212; The driver selects 32-bit toolchain components only.
                  </p>
               </li>
            </ul>
                                    <code>-host64</code> is the default setting for 64-bit Windows and Linux hosts. (64-bit toolchain components are not supported on Solaris hosts.)
            This option does not affect the driver's behavior for components with explicitly specified locations (see <a href="ghs_help://build_v800.bod.LinkerDirectory">Alternate Linker Directory</a>).
         </p>
      </div>
      <hr>
      <div id="bod.InlineTiny">
         <p>Controls the inlining of very small functions. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--inline_tiny_functions</code>) &#8212; This setting is implied by an <strong>Optimization&#8594;Optimization Strategy</strong>
                                                   
                                                    setting of <strong>Optimize for Speed</strong> (<code>-Ospeed</code>), <code>-Osize</code>, or <code>-Ogeneral</code> unless <strong>Debugging&#8594;Debugging Level</strong>
                                                   
                                                    is set to <code>-g</code> or <code>-G</code> or <strong>C++ Inlining</strong> is set to <code>-no_inlining</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_inline_tiny_functions</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.automatic_inlining">Automatic Inlining</a>.
         </p>
      </div>
      <hr>
      <div id="bod.InliningConstantMathFunctions">
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oinline_constant_math</code>) &#8212; Allows inlining of math functions with constant parameters if this has been enabled by an optimization strategy.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Ono_inline_constant_math</code>) &#8212; Disables inlining of math functions with constant parameters if this has been enabled by an optimization strategy.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.inline_constant_math_func">Inlining Constant Math Functions</a>.
         </p>
      </div>
      <hr>
      <div id="bod.InliningCMemoryFunctions">
         <p>Explicitly controls the inlining of C Memory Functions. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Omemfuncs</code>) &#8212; Enables the inlining of C memory functions unless <code>-Onone</code>, <code>-Odebug</code>, <code>-Omoredebug</code>, or <code>-Omaxdebug</code> is enabled.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onomemfuncs</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.inlining_c_memory">Inlining of C Memory Functions</a>.
         </p>
      </div>
      <hr>
      <div id="bod.ConvertCMemsetToMemclr">
         <p>Allows you to disable an optimization that replaces <code>memset</code> function calls with a constant zero parameter to <code>__gh_memclr32</code> or <code>__gh_memclr</code>, depending on the optimization strategy and whether the memory is known to be aligned. Permitted settings for this option
            are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onomemclr</code>) &#8212; Disables this optimization if it is enabled by another optimization option (such as an optimization strategy). You may
                     want to use this option if you define your own <code>memset</code> function.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Omemclr</code>) &#8212; [default] Cancels the effect of <code>-Onomemclr</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.InliningCStringFunctions">
         <p>Controls the inlining of some C string functions. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onostrfuncs</code>) &#8212; Disables the inlining of C string functions if they have been enabled by an optimization strategy.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Ostrfuncs</code>) &#8212; Enables the inlining of C string functions, unless <code>-Omaxdebug</code>, <code>-Omoredebug</code>, <code>-Odebug</code>, or <code>-Onone</code> is enabled.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.inlining_c_strings">Inlining of C String Functions</a>.
         </p>
      </div>
      <hr>
      <div id="bod.SimplifyCPrintFunctions">
         <p>Controls print function optimization. You may need to set this option to <strong>off</strong> if you define your own print functions (such as <code>fprintf()</code>, <code>fputs()</code>, <code>printf()</code>, <code>puts()</code>, etc.) Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoprintfuncs</code>) &#8212; Disables print function optimizations if they are enabled by another optimization option (such as an optimization strategy).
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oprintfuncs</code>) &#8212; Cancels the effect of <code>-Onoprintfuncs</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ExplodeJumps">
         <p>Allows you to disable the explode jump optimization. This optimization will replace jump instructions with the code they would
            otherwise jump to, duplicating code to remove the jump instruction for speed. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oexplodejumps</code>) &#8212; Cancels the effect of <code>-Onoexplodejumps</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoexplodejumps</code>) &#8212; Disables this optimization if it is enabled by another optimization option (such as an optimization strategy).
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.LoopUnrolling">
         <p>Controls the <strong>Loop Unrolling</strong> optimization. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onounroll</code>) &#8212; Disables loop unrolling if it has been enabled by an optimization strategy.
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Ounroll</code>) &#8212; Cancels the effect of <code>-Onounroll</code>.
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.loop_unrolling_optimization">Loop Unrolling</a>.
         </p>
      </div>
      <hr>
      <div id="bod.RegisterAllocationByColoring">
         <p>Controls the dynamic storage of variables in registers. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-overload</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-nooverload</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option has limited effect when <code>-extend_liveness</code> is enabled, such as with <code>-Omoredebug</code> or <code>-Omaxdebug</code>.
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.register_allocation">Register Allocation by Coloring</a>.
         </p>
      </div>
      <hr>
      <div id="bod.AutoRegisterAlloc">
         <p>Controls the automatic allocation of local variables to registers. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-autoregister</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-noautoregister</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.automatic_register_allocation">Automatic Register Allocation</a>.
         </p>
      </div>
      <hr>
      <div id="bod.CommonSubexpressionElimination">
         <p>Controls the <strong>Common Subexpression Elimination</strong> optimization. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onocse</code>) &#8212; Disables common subexpression elimination if it has been enabled by an optimization strategy.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Ocse</code>) &#8212; Cancels the effect of <code>-Onocse</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.subexpression_elimination">Common Subexpression Elimination</a>.
         </p>
      </div>
      <hr>
      <div id="bod.TailRecursion">
         <p>Controls the <strong>Tail Recursion</strong> optimization. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onotailrecursion</code>) &#8212; Disables tail recursion if it has been enabled by an optimization strategy.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Otailrecursion</code>) &#8212; Cancels the effect of <code>-Onotailrecursion</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.tail_recursion">Tail Calls</a>.
         </p>
      </div>
      <hr>
      <div id="bod.ConstantPropagation">
         <p>Controls the <strong>Constant Propagation</strong> optimization. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoconstprop</code>) &#8212; Disables constant propagation if it has been enabled by an optimization strategy.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Oconstprop</code>) &#8212; Cancels the effect of <code>-Onoconstprop</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.constant_propagation">Constant Propagation</a>.
         </p>
      </div>
      <hr>
      <div id="bod.MinMaxOptimization">
         <p>Controls the <strong>C/C++ Minimum/Maximum</strong> optimization. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onominmax</code>) &#8212; Disables minimum/maximum optimization if it has been enabled by an optimization strategy.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Ominmax</code>) &#8212; Cancels the effect of <code>-Onominmax</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.c_min_max">C/C++ Minimum/Maximum Optimization</a>.
         </p>
      </div>
      <hr>
      <div id="bod.MemoryOptimization">
         <p>Controls <strong>Memory</strong> optimizations. This optimization is enabled by all optimization strategies except <code>-Onone</code> and <code>-Omaxdebug</code>. If no optimization strategy is selected, this option enables <code>-Ogeneral</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-OM</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onomemory</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.memory_optimization">Memory Optimization</a>.
         </p>
      </div>
      <hr>
      <div id="bod.LoopOptimizations">
         <p>Turns on all the <strong>General Use</strong> optimizations, together with loop strength reduction, loop unrolling, and loop invariant analysis. This optimization is enabled by <code>-Ospeed</code>. If no optimization strategy is selected, this option enables <code>-Ospeed</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-OL</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onoloop</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.loop_optimizations">Loop Optimizations</a>.
         </p>
      </div>
      <hr>
      <div id="bod.PeepholeOptimizations">
         <p>Controls peephole optimizations. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onopeephole</code>) &#8212; Disables peephole optimizations if they have been enabled by an optimization strategy.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Opeep</code>) &#8212; Cancels the effect of <code>-Onopeephole</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.peephole">Peephole Optimization</a>.
         </p>
      </div>
      <hr>
      <div id="bod.PipelineOptimizations">
         <p>Controls pipeline optimizations. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-Onopipeline</code>) &#8212; Disables pipeline optimizations if they have been enabled by an optimization strategy.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-Opipeline</code>) &#8212; Cancels the effect of <code>-Onopipeline</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.pipeline">Pipeline Instruction Scheduling</a>.
         </p>
      </div>
      <hr>
      <div id="bod.GnuCompatibilityOptimizationOptions">
         <p>For convenience, Green Hills provides compatibility with the general GNU optimization options. For precise control over the
            compiler, we recommend that you use Optimization Strategies instead (see <a href="ghs_help://build_v800.bod.OptimizationStrategy">Optimization Strategy</a>). Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-O0</code> &#8212; Use <code>-Onone</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <code>-O1</code> &#8212; Use <code>-Ogeneral</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <code>-O2</code> &#8212; Use <code>-Ospeed</code> and <code>-Onounroll</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <code>-O3</code> &#8212; Use <code>-Ospeed</code>, <code>-OI</code>, and <code>-OB</code>.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.EntryExitLogging">
         <p>Controls whether the compiler generates function entry/exit instrumentation. This setting defaults to &#8220;Off&#8221;. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_gen_entry_exit_history</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-gen_entry_exit_history</code>)
                  </p>
               </li>
            </ul>For more information about function entry/exit generation, see <a href="ghs_help://build_v800.bod.EntryExitLinking">Function Entry/Exit Logging</a>.
         </p>
      </div>
      <hr>
      <div id="bod.EntryExitArgLogging">
         <p>Controls whether the compiler generates function entry/exit instrumentation with function arguments. Permitted settings for
            this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_gen_entry_exit_arg_history</code>) &#8212; [default] Function entry/exit logging instructions are not generated by the compiler.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-gen_entry_exit_arg_history</code>) &#8212; Function entry/exit logging instructions are generated by the compiler in the prologue and epilogue of each logged function.
                  </p>
               </li>
            </ul>For more information about function entry/exit generation, see 
                                    <a href="ghs_help://build_v800.section.rh850_swtrace_support.fee_logging">Logging Function Entry and Exit (FEE) Events</a>
                                 .
         </p>
      </div>
      <hr>
      <div id="bod.RecordEagleTag">
         <p>Indicated EAGLE signals are enabled by the linker. Signals can be disabled at run-time with the <code>eagleconfig</code> MULTI command. Please note that the <code>eagleconfig</code> command is only available for MULTI 7 or newer. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-record_eagle_signal=<var>signal1[,signal2...]</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MuteEagleTag">
         <p>Indicated EAGLE signals are disabled by the linker. Signals can be enabled at run-time with the <code>eagleconfig</code> MULTI command. Please note that the <code>eagleconfig</code> command is only available for MULTI 7 or newer. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-mute_eagle_signal=<var>signal1[,signal2...]</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.StripEagleTag">
         <p>Indicated EAGLE signals are stripped from the code by the linker. (Stripped code is similar though not identical to code without
            EAGLE signals.) Stripped signals cannot be enabled at run-time with the <code>eagleconfig</code> MULTI command. Please note that the <code>eagleconfig</code> command is only available for MULTI 7 or newer. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-strip_eagle_signal=<var>signal1[,signal2...]</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.TargetWalkableStack">
         <p>Creates a frame pointer in register <code>r28</code>. You can use this option to perform stack traces if you do not have debug information, however, optimizations  might cause
            gaps in the stack trace. The current V850 and RH850 libraries are built with the <code>-ga</code> option to support stack traces. Without this option, some routines do not create a stack frame to reduce code size and improve
            performance. You must be careful if you decide to use this option, however, as it may produce unexpected complications, such
            as disabling good leaf procedure optimization. Using <code>-ga</code> without <code>-G</code> may only guarantee a stack trace and use of the return button in the MULTI Debugger.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-gtws</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-nogtws</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.OLimitWithoutDebug">
         <p>Instructs the compiler to limit optimizations for debugging, even when debug information is not being generated. By default,
            <code>-Olimit=peephole</code> and <code>-Olimit=pipeline</code> are only meaningful when debug information is enabled. However, the compiler can still make some attempt to restrict optimizations
            to assist debugging, even when debug information is never generated. Note that the results will not be as good as they would
            be if debug information were enabled. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-glimits</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-noglimits</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ConsistentCode">
         <p>Instructs the compiler to produce the same code with the <code>--no_debug</code> option as it does with either <code>-g</code> or <code>-G</code>. Do not use this option with <code>-g</code>, <code>-gs</code>, or <code>-G</code>. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-consistentcode</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-noconsistentcode</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FullBreakdots">
         <p>Controls the number of breakdots available in the <code>MULTI</code> Debugger. This option has an effect only when <code>-Onone</code>, <code>-Odebug</code>, <code>-Omoredebug</code>, or <code>-Omaxdebug</code> is enabled. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-full_breakdots</code>) &#8212; Increases the number of breakdots available in the MULTI Debugger, but may add additional instructions to your code. This
                     is the default setting if <code>-Omaxdebug</code> or <code>-Omoredebug</code> is enabled.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_full_breakdots</code>) &#8212; This is the default setting if <code>-Onone</code> or <code>-Odebug</code> are enabled.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ExtendLiveness">
         <p>Controls access to local automatic variables in the MULTI Debugger. This option has an effect only when <code>-Onone</code>, <code>-Odebug</code>, <code>-Omoredebug</code>, or <code>-Omaxdebug</code> is enabled. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-extend_liveness</code>) &#8212; Local automatic variables are accessible from the MULTI Debugger after they are written. This is the default setting if
                     <code>-Omaxdebug</code> or <code>-Omoredebug</code> is enabled.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_extend_liveness</code>) &#8212; Local automatic variables are accessible from the MULTI Debugger as long as they might be read before being written to.
                     This is the default setting if <code>-Onone</code> or <code>-Odebug</code> are enabled.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.DboPath">
         <p>Specifies a <var>directory</var> to search for <strong>.dbo</strong> debugging information files. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-dbopath <var>directory</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option is only needed if object files are moved between being compiled and linked.</p>
      </div>
      <hr>
      <div id="bod.SearchForDba">
         <p>
                                 Controls searching for <strong>.dba</strong> files in incremental link situations and enables creation of a <strong>.dba</strong> file corresponding to the <strong>.o</strong> file created by an incremental link.
         </p>
         <p>If you want to generate debug information for a relocatable object file (using <code>-G</code> and <code>-relobj</code>) and the machine that will be performing the subsequent link will not have access to the original <strong>.o</strong> or <strong>.dbo</strong> files, pass the <code>-search_for_dba</code> option.
         </p>
         <p>For example, the following set of options creates a <strong>myobj.dba</strong> file that you can distribute with <strong>myobj.o</strong> to provide debug information to MULTI:
            <br><pre>ccv850 file1.c file2.c -G -relobj -o myobj.o</pre><br>When performing subsequent links with <strong>myobj.o</strong>, continue to pass the <code>-search_for_dba</code> option to force <code>dblink</code> to search for <strong>myobj.dba</strong> instead of only looking for <strong>myobj.dbo</strong>.
         </p>
         <p>
                                 <code>-search_for_dba</code> is not necessary if the original <strong>.dbo</strong> files that comprise <strong>myobj.dba</strong> (<strong>file1.dbo</strong> and <strong>file2.dbo</strong> in the above example) are still available.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-search_for_dba</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_search_for_dba</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ForceFramePointer">
         <p>Controls the use of a frame pointer during code generation. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-ga</code>) &#8212; Always use a frame pointer. Implied by <strong>Debugging&#8594;Run-Time Memory Checks</strong>
                                                      
                                                      .
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-noga</code>) &#8212; [default] Use of a frame pointer is not guaranteed.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ScanSource">
         <p>Improves the code browsing features of MULTI when using code compiled by third-party compilers. This feature causes the <code>dwarf2dbo</code> or <code>stabs2dbo</code> Debug Translator to gather information directly from source files. <code>--scan_source</code> causes source scanning to occur whenever debugging information is translated as part of the project build. Permitted settings
            for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--scan_source</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_scan_source</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>You can use <code>--scan_source</code> if the root of your sources has changed. For more information about <code>--scan_source</code>, see <a href="ghs_help://build_v800.section.build_debug_different_hosts">Building and Debugging on Different Hosts</a> and <a href="ghs_help://build_v800.section.source_scanning">Source Scanning</a>.
         </p>
      </div>
      <hr>
      <div id="bod.DbgInfoExtraFile">
         <p>When this option is used, an entry for the specified file is added to the debug information generated by the compiler. This
            allows the debugger to find that file when you click its name or use the <code>e</code> command. This option is useful for including notes or text-based custom files in to the set of files the debugger can display.
            By default, the builder (command line or graphical) includes all source code and "Text" files in the debug information. The
            equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-extra_file=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.WarnDboNotFoundMax">
         <p>Limits the number of "<code>dbo not found</code>" warnings to the given number. The default limit is 9. Setting the limit to 0 hides all such warnings. The equivalent driver
            option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-warn_dbo_not_found_max=<var>n</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.WaitForDbLink">
         <p>Controls whether the compiler driver waits for debug information to be generated before exiting. The program can be executed
            immediately after the driver exits, but debugging is not possible until <code>dblink</code> has finished generating debug information. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-wait_for_dblink</code>) &#8212; [default] The compiler driver waits for <code>dblink</code> to finish generating debug information before exiting.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-do_not_wait_for_dblink</code>) &#8212; The compiler driver does not wait for <code>dblink</code>. This option is not supported with <code>-strip</code>. When using this option, do not open MULTI or other executables that require debug information until debug translation has
                     completed.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ProfileLevel">
         <p>These options are deprecated and will be removed in a future release.</p>
         <p>Controls <strong>call count</strong> profiling, which records how many times each function is called. Call count profiling is not thread safe. Permitted settings
            for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On with Call Graph</strong> (<code>-pg</code>) &#8212; 
                                                   
                                                   Generates call count information that includes the name of each caller. This information can be used to generate a call graph.
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-p</code>) &#8212; 
                                                   
                                                   Generates basic call count information.
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-pnone</code>) &#8212; [default] Disables call count profiling.
                  </p>
               </li>
            </ul>
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.CoverageAnalysis">
         <p>This option has been replaced by the <code>-coverage</code> option (see <a href="ghs_help://build_v800.bod.BlockCoverageProfiling">Profiling - Block Coverage</a>).
         </p>
         <p>Controls legacy <strong>coverage</strong> profiling, which records whether your application contains lines of code that are not used. Permitted settings for this option
            are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-a</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_coverage_analysis</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
                                 
                              
         </p>
         <p>Legacy coverage profiling might not be reliable when used in conjunction with compiler optimizations, link-time optimizations,
            and options that cause code instrumentation (for example, run-time error checking).
         </p>
      </div>
      <hr>
      <div id="bod.MulticoreConfigurationFile">
         <p>Specifies the path to a multi-core configuration file (<strong>*.ghsmc</strong>) that the MULTI Debugger uses to set up your multi-core target. Note that this option is only available for MULTI 7 or newer. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-ghsmc_file=<var>path</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see the documentation about using a multi-core configuration file.</p>
      </div>
      <hr>
      <div id="bod.MulticoreCoreCount">
         <p>Applies the project executable to any SMP hardware target whose core count is within the specified range (boundaries are included). Note that this option is only available
            for MULTI 7 or newer. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-ghsmc_core_count=<var>range</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Where <code>
                                       <var>range</var>
                                    </code> can be specified in four ways:
            
            <table border="1">
               <tr>
                  <td>
                     <p>
                                                               <code>-ghsmc_core_count=</code>
                                                               <code>
                                                                     <var>CoreCount</var>
                                                                  </code>
                                                            
                     </p>
                  </td>
                  <td>
                     <p>Enable SMP debugging when target hardware has exactly the number of cores as <code>
                                                                     <var>CoreCount</var>
                                                                  </code>.
                     </p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>
                                                               <code>-ghsmc_core_count=</code>
                                                               <code>
                                                                     <var>MinCoreCount</var>-</code>
                                                            
                     </p>
                  </td>
                  <td>
                     <p>Enable SMP debugging when target hardware has at least as many cores as <code>
                                                                     <var>MinCoreCount</var>
                                                                  </code>.
                     </p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>
                                                               <code>-ghsmc_core_count=</code>
                                                               <code>-<var>MaxCoreCount</var>
                                                                  </code>
                                                            
                     </p>
                  </td>
                  <td>
                     <p>Enable SMP debugging when target hardware has up to <code>
                                                                     <var>MaxCoreCount</var>
                                                                  </code> cores.
                     </p>
                  </td>
               </tr>
               <tr>
                  <td>
                     <p>
                                                               <code>-ghsmc_core_count=</code>
                                                               <code>
                                                                     <var>MinCoreCount</var>-</code>
                                                               <code>
                                                                     <var>MaxCoreCount</var>
                                                                  </code>
                                                            
                     </p>
                  </td>
                  <td>
                     <p>Enable SMP debugging when target hardware has a number of cores that falls within <code>
                                                                     <var>[MinCoreCount, MaxCoreCount]</var>
                                                                  </code>, inclusive.
                     </p>
                  </td>
               </tr>
            </table>
                              
         </p>
      </div>
      <hr>
      <div id="bod.XrefLevel">
         <p>Controls the amount of debugging cross-referencing information that is generated. By default, the compiler generates cross-reference
            data for each user-defined construct (describing where the construct is declared, defined, read from, written to, and so on),
            to allow the Debugger to display cross references. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>Generate for All Objects</strong> (<code>--xref=full</code>) &#8212; [default] Generates cross-referencing data for all objects.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Generate for Object Declarations and Definitions</strong> (<code>--xref=declare</code>) &#8212; Generates cross-referencing data only for the declarations and definitions of the objects.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Generate for Objects in the Global Scope</strong> (<code>--xref=global</code>) &#8212; Generates cross-referencing data for the objects that are declared in the global scope.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Do Not Generate</strong> (<code>--xref=none</code>) &#8212; Disables all cross-referencing data.
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.FullDebugInfo">
         <p>Controls the generation of debugging information for types and defines that are never used in a file. Permitted settings for
            this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>All</strong> (<code>-full_debug_info</code>) &#8212; Enables the generation of debugging information for types and defines that are never used in a file.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Reduced</strong> (<code>-no_full_debug_info</code>) &#8212; [default] Disables the generation of debugging information for types and defines that are never used in a file.
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.DualDebug">
         <p>Enables the generation of DWARF debugging information in the object file (in addition to the Green Hills <strong>.dbo</strong> format), according to the convention for your target. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>-dual_debug</code>|<code>-dwarf2</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>-no_dual_debug</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>Requires that the <strong>Debugging&#8594;Debugging Level</strong>
                                    
                                     be set to Plain or MULTI for the option to have any effect (see <a href="ghs_help://build_v800.section.debugging">Debugging Options</a>).
         </p>
      </div>
      <hr>
      <div id="bod.Dwarf2Dbo">
         <p>Controls the conversion of DWARF debugging information to the MULTI <strong>.dbo</strong> format. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>-dwarf_to_dbo</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>-no_dwarf2dbo</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>This option will normally be invoked automatically when necessary by the builder.</p>
      </div>
      <hr>
      <div id="bod.Stabs2Dbo">
         <p>Controls the conversion of Stabs debugging information to the MULTI <strong>.dbo</strong> format. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>-stabs2dbo</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>-no_stabs2dbo</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
         <p>This option will normally be invoked automatically when necessary by the builder.</p>
      </div>
      <hr>
      <div id="bod.IncludeFiles">
         <p>Includes the source code of each specified <var>filename</var> at the beginning of the compilation. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-include <var>filename</var>[,filename]...</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This can be used to establish standard macro definitions, and so on. The <var>filename</var> is searched for in the directories on the include search list.
         </p>
      </div>
      <hr>
      <div id="bod.AsmIncludeFiles">
         <p>Includes each <var>filename</var> at the beginning of any preprocessed assembly files, similar to <code>-include</code>. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>--preinclude_asm <var>filename</var>[,filename]...</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.UndefAll">
         <p>Controls the definition of the set of default symbols. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Define</strong> (<code>-stddef</code>) &#8212; [default] You can use this option in a MULTI Project (<strong>.gpj</strong>) file, but there is no equivalent driver option.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Define</strong> (<code>-nostddef</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.UnsafePredefines">
         <p>Controls the predefinition of preprocessor macros without leading underscores. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Define</strong> (<code>--unsafe_predefines</code>) &#8212; Predefine macros both with and without leading underscores.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Define</strong> (<code>--no_unsafe_predefines</code>) &#8212; [default] Predefine macros only with leading underscores.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>When compiling C++ code in Strict Standard Mode, this option has no effect.</p>
      </div>
      <hr>
      <div id="bod.StripComments">
         <p>Controls the retention of comments by the preprocessor. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Retain</strong> (<code>-C</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Strip</strong> (<code>--no_comments</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.NoStdIncludeDirs">
         <p>Controls whether the standard include directories are searched. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>Search</strong> (<code>-stdinc</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Do Not Search</strong> (<code>-nostdinc</code>)
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.CIncludeDirs">
         <p>Changes the default location in which the compiler searches for C header files. The equivalent driver option is:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>-c_include_directory <var>directory</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.StdCxxIncludeDirs">
         <p>Changes the default location in which the compiler searches for C++ header files. The equivalent driver option is:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>-std_cxx_include_directory <var>directory</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.SysIncludeDirs">
         <p>Changes the default location in which the compiler searches for system header files. This option may be specified multiple
            times to cause the compiler to search in multiple directories. Any directory that is not specified with an absolute path is
            located relative to the current working directory. The equivalent driver option is:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <code>-sys_include_directory <var>directory</var>
                                                         </code>
                                                   
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.CxxInlining">
         <p>Controls the inlining of C++ functions. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Maximum</strong> (<code>--max_inlining</code>) &#8212; Considers all appropriate functions for inlining. Appropriate functions include <code>inline</code> functions and functions defined inside of classes.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Maximum Unless Debugging</strong> (<code>--max_inlining_unless_debug</code>) &#8212; Performs maximum inlining unless debugging information is being collected.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Standard</strong> (<code>--inlining</code>) &#8212; [default] Considers only relatively small functions without control flow statements for inlining.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Standard Unless Debugging</strong> (<code>--inlining_unless_debug</code>) &#8212; Performs standard inlining unless debugging information is being collected. If debugging information is being collected,
                     this option disables inlining of C++ functions, but unlike <code>--no_inlining</code>, it does not disable <code>--inline_tiny_functions</code>, <code>-OI</code>, <code>-Oipsmallinlining</code>, and <code>-Oiponesiteinlining</code>).
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>None</strong> (<code>--no_inlining</code>) &#8212; Disables inlining of C++ functions. This option also disables <code>--inline_tiny_functions</code>, <code>-OI</code>, <code>-Oipsmallinlining</code>, and <code>-Oiponesiteinlining</code>. This option does not disable <code>-inline_trivial</code> in the linker.
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>For more information, see <a href="ghs_help://build_v800.section.inlining_with_cplusplus">Additional C++ Inlining Information</a>.
         </p>
      </div>
      <hr>
      <div id="bod.EmulatedGNUVersion">
         <p>Controls the version of the GNU compiler that the Green Hills compiler provides compatibility with. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>GNU 3.3</strong> (<code>--gnu_version=30300</code>) &#8212;  When using a GNU dialect, provide close compatibility with the GNU 3.3 compiler.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>GNU 4.3</strong> (<code>--gnu_version=40300</code>) &#8212; [default] When using a GNU dialect, provide close compatibility with the GNU 4.3 compiler.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.GNU99Inlining">
         <p>Controls how the <code>-gnu99</code> C dialect will determine the linkage for functions with the <code>inline</code> keyword. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>ISO C99 Inline Semantics</strong> (<code>-fno-gnu89-inline</code>) &#8212; [default] The <code>inline</code> keyword will be handled in accordance with the ISO C99 standard.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>GNU C89 Inline Semantics</strong> (<code>-fgnu89-inline</code>) &#8212; The <code>inline</code> keyword will be handled in a manner similar to that of earlier GNU compilers.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.SectionPrefix">
         <p>Specifies a <var>string</var> to prepend to every section name. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>--section_prefix <var>string</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.SectionSuffix">
         <p>Specifies a <var>string</var> to append to every section name. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>--section_suffix <var>string</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.WCharSize">
         <p>Controls the type of <code>wchar_t</code>, which is known to the compiler, declared in <strong>stddef.h</strong>, and used in various C library functions. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-wchar_u16</code> &#8212; [default] <code>wchar_t</code> is <code>unsigned short</code>. This option is not supported with Embedded Linux. The default setting for Embedded Linux is <code>-wchar_s32</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <code>-wchar_s32</code> &#8212; <code>wchar_t</code> is signed and 32 bits. This option is not supported with INTEGRITY.
                  </p>
               </li>
            </ul>This option also determines the C and C++ libraries selected by the driver (see <a href="ghs_help://build_v800.section.special_function_names">Standard Function Names Converted by the Linker</a>) and causes the linker to associate calls to some standard C library functions to alternate names (see <a href="ghs_help://build_v800.section.c_and_cpp_libraries">Libraries</a>). When this option is set to a non-default value, the deprecated <code>-no_floatio</code> is not supported.
         </p>
      </div>
      <hr>
      <div id="bod.LongjmpLocals">
         <p>Controls whether the values of local non-volatile variables are modified by <code>longjmp</code> calls. ANSI C standards require only that the values of volatile variables are not modified. Protecting non-volatile values
            requires additional overhead. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-locals_unchanged_by_longjmp</code>) &#8212; Guarantees that the values of all local variables are not modified by <code>longjmp</code> calls.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_locals_unchanged_by_longjmp</code>) &#8212; [default] Guarantees only that the values of volatile local variables are not modified by <code>longjmp</code> calls.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.GnuAsm">
         <p>Provides a way to enable the GNU extended <code>asm</code> syntax support. This support is unconditionally enabled in <code>-gcc</code> and <code>--g++</code> modes, and enabled by default in non-GNU modes. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>--gnu_asm</code>) &#8212; [default in GNU and non-GNU modes] Enables GNU extended <code>asm</code> syntax support for most common use cases. Not all use cases and constraints are supported.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>--no_gnu_asm</code>) &#8212; Disables GNU extended <code>asm</code> syntax support. The <code>-gcc</code> and <code>--g++</code> options override this option, because GNU mode implies support for GNU <code>asm</code> syntax.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IdentifierInsertion">
         <p>Passes the arbitrary string <var>string</var> to the output file. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-ident=<var>string</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This is the same as using the directive <code>#pragma ident "<var>string</var>"</code> in C (see <a href="ghs_help://build_v800.section.general_pragmas">General Pragma Directives</a>). This option can be used to place the date of the source file in the object file.
         </p>
      </div>
      <hr>
      <div id="bod.IdentOutput">
         <p>Controls support for identifier definition and insertion (via the Builder and driver options above, and through <code>#pragma ident "<var>string</var>"</code>). Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-identoutput</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-noidentoutput</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.LinkFilter">
         <p>Controls whether linker error output is written to a file and filtered after the link is finished, or printed to standard
            output at link time. This option is most commonly enabled for C++ programs; output is written to a file and filtered so that
            symbol names can be demangled before you view them. The error messages usually indicate undefined or multiply defined symbols.
            Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--link_filter</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_link_filter</code>)
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.CxxLinkStyle">
         <p>Controls the method for generating constructors/destructors at link-time. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>Use Linker</strong> (<code>--linker_link</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Create Array of Static Constructors/Destructors for Post-Link Phase</strong> (<code>--munch</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Do not Generate Constructors/Destructors</strong> (<code>--nocpp</code>)
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.DistinctFunctions">
         <p>Controls whether identical C and C++ functions are treated as distinct. Permitted settings for this option are:</p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--c_and_cpp_functions_are_distinct</code>) &#8212; Treat function types as distinct if their only difference is that one has <code>extern "C"</code> linkage and the other has <code>extern "C++"</code> routine linkage.
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_c_and_cpp_functions_are_distinct</code>) &#8212; [default] Do not treat such functions as distinct.
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.ImplicitExternCTypeConversion">
         <p>Controls an extension to permit implicit type conversion in C++ between a pointer to an <code>extern C</code> function and a pointer to an <code>extern C++</code> function. Also, see <a href="ghs_help://build_v800.bod.DistinctFunctions">Distinct C and C++ Functions</a>. Permitted settings for this option are:
         </p>
         <p>
            
                                    
            <ul>
               <li>
                  <p>
                                                      <strong>On</strong> (<code>--implicit_extern_c_type_conversion</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                      <strong>Off</strong> (<code>--no_implicit_extern_c_type_conversion</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                                 
         </p>
      </div>
      <hr>
      <div id="bod.AssemblerWarnings">
         <p>Controls the display of assembler warning messages. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Display</strong> (<code>--assembler_warnings</code>) &#8212;
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Suppress</strong> (<code>--no_assembler_warnings</code>) [default]
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FloatingPointScanf">
         <p>Controls the inclusion of floating-point <code>scanf()</code> code. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-no_float_scanf</code>) &#8212; Inform the compiler and linker that no calls to <code>scanf()</code> or its related functions, such as <code>fscanf()</code> or <code>sscanf()</code>, use floating point, therefore it is not necessary to bring in the support code for floating-point <code>scanf()</code>, saving space in the target program. This option is implied by <code>-fnone</code>.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-float_scanf</code>) &#8212; [default] Bring in the floating-point support code for <code>scanf()</code> if there is any call to <code>scanf()</code> or its related functions.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.LinkerDirectiveDir">
         <p>Specifies the directory containing the default linker directives file or files. This option has no effect if you explicitly
            specify a linker directives file in your project or on the command line. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-directive_dir=<var>directory</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                                 
                                 
                              
         </p>
      </div>
      <hr>
      <div id="bod.StdLibraries">
         <p>Controls the linking-in of any Green Hills standard startup files or libraries. User-specified libraries are not affected.
            Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Link</strong> (<code>-stdlib</code>) &#8212; [default] Use Green Hills standard libraries.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Do Not Link</strong> (<code>-nostdlib</code>) &#8212; Do not use Green Hills standard libraries, or link against the Green Hills or any user-defined start or end files (see
                     <a href="ghs_help://build_v800.section.start_and_end_files">Start and End Files</a>).
                  </p>
                  <p>When you use this option, the linker may return an unresolved symbol error due to references to architecture support routines,
                     even if your code has no apparent external library dependencies.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.MinLibraries">
         <p>This option causes only the target-specific run-time support library <strong>libarch.a</strong> to be searched. No other Green Hills libraries will be searched. <strong>libarch.a</strong> is the most basic library; it provides definitions of internal symbols that may be required by any file compiled with the
            Green Hills compilers. This option does not remove the <code>-L</code> option that points to the Green Hills library directories, or the start-up files (which can be done with <code>-nostartfiles</code>), and the option does not change how the linker directives files are handled.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-minlib</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Off</strong> (<code>-nominlib</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.LinkOutputMode">
         <p>Controls overwriting of an existing executable. By default, the linker overwrites any existing file with the same name as
            the specified output file. However, the driver can also save a temporary backup copy of the existing file in order to restore
            it if the link fails. If the link succeeds, the backup copy is silently deleted. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Overwrite the existing executable</strong> (<code>--link_output_mode_reuse</code>) &#8212; [default]
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Save a temporary copy unless the existing file is a symlink</strong> (<code>--link_output_mode_safe</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Save a temporary copy, even if the existing file is a symlink</strong> (<code>--link_output_mode_linksafe</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Remove the existing executable before writing a new version</strong> (<code>--link_output_mode_unlink</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.DifferentSectionTypes">
         <p>Allows the linker to combine and link sections from different object files that have different section types (for example,
            <code>SHT_PROGBITS</code> and <code>SHT_NOBITS</code>). Without this option, the linker will provide an error message and not complete the link. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>--allow_different_section_types</code>
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <code>--no_allow_different_section_types</code> &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.PAddrOffset">
         <p>Instructs the linker to make <code>p_paddr</code> (the physical address) in the ELF program headers equal to <code>p_vaddr</code> (the virtual address) plus this offset, <var>n</var>. Specifying 0 for the offset makes <code>p_paddr</code> equal to <code>p_vaddr</code>. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-paddr_offset=<var>n</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.FollowSection">
         <p>The equivalent driver option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-follow_section <var>x</var>=<var>y</var>
                                                      </code>
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <code>-follow_section "<var>x</var>=<var>y</var> [<var>start_expression</var>] [<var>attributes</var>] : [{ <var>contents</var> }] [&gt; <var>memname</var> | &gt;.]"</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Inserts a definition for section <var>y</var> into the section map immediately following the definition of section <var>x</var>. The <var>start_expression</var>, <var>attributes</var>, and <var>contents</var> of section <var>y</var> may be specified explicitly, using standard linker directives file syntax. If section <var>x</var> has the <code>ABS</code>, <code>CLEAR</code>, or <code>NOCLEAR</code> attributes, section <var>y</var> inherits them. If the section map contains a section <var>z</var> with the attribute <code>ROM(<var>x</var>)</code>, <code>CROM(<var>x</var>)</code>, or <code>ROM_NOCOPY(<var>x</var>)</code>, then a new definition for the section <code>.ROM<var>y</var>
                                    </code>, .<code>CROM<var>y</var>
                                    </code>, or <code>.ROM_NOCOPY<var>y</var>
                                    </code> is inserted following <var>z</var> as well.
         </p>
         <p>For more information about these attributes and linker directives file syntax, see <a href="ghs_help://build_v800.chapter.the_elxr_linker">The elxr Linker</a>.
         </p>
      </div>
      <hr>
      <div id="bod.LargeArchiveFormat">
         <p>Specifies when the archiver should output archives in 64-bit format, and when to print related warning messages. Permitted
            settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>When Needed (With Warnings)</strong> (<code>-auto_large_archive</code>) &#8212; [default] The archiver detects when to output a 64-bit archive and prints a warning when it does. If the archiver takes
                     a 64-bit archive as input but detects that it does not need a 64-bit output file, it prints a warning and does not use the
                     64-bit format.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>When Needed (Suppress Warnings)</strong> (<code>-quiet_auto_large_archive</code>) &#8212; The archiver detects when to output a 64-bit archive. If the archiver takes a 64-bit archive as input but detects that
                     it does not need a 64-bit output file, it does not use the 64-bit format. The archiver does not print any warnings related
                     to 64-bit archives.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Always</strong> (<code>-large_archive</code>) &#8212; The archiver always uses 64-bit archives. The archiver does not print any warnings related to 64-bit archives.
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Never</strong> (<code>-no_large_archive</code>) &#8212; The archiver never uses 64-bit archives. The archiver does not print any warnings related to 64-bit archives, but it does
                     print an error if it needs to truncate any values because the archive format does not provide enough space.
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.RejectDuplicates">
         <p>When creating an archive, controls whether an error is generated if the archive would have more than one symbol with the same
            name in its table of contents. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Generate Error</strong> (<code>-reject_duplicates</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Ignore</strong> (<code>-no_reject_duplicates</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.AllowCxxDuplicates">
         <p>When rejecting duplicate symbols in an archive, controls whether those symbols known to be generated automatically by the
            compiler in order to support C++ language features are allowed, as opposed to those present in the original source. Permitted
            settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Ignore Duplicates</strong> (<code>-allow_cxx_duplicates</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Generate Error</strong> (<code>-no_allow_cxx_duplicates</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.AllowLinkOnceDuplicates">
         <p>When rejecting duplicate symbols in an archive, controls whether those symbols in sections with names beginning with <code>.ghs.linkonce</code> are allowed. These symbols are automatically generated by the compiler to support template instantiation. Permitted settings
            for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Ignore Duplicates</strong> (<code>-allow_linkonce_duplicates</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Generate Error</strong> (<code>-no_allow_linkonce_duplicates</code>) &#8212; [default]
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.RedirectStdErrOverwrite">
         <p>Redirects error output to a file, overwriting any existing file, unlike <code>-stderr=</code> which just appends output to a file. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-stderr_overwrite=<var>filename</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>Because the overwriting takes effect when compiling each individual source file, <code>-stderr_overwrite</code> is probably only desired in a makefile situation where the <code>stderr</code> output filename is named after the input filename. For example:
            <br><pre>ccv850 file1.c -stderr_overwrite=file1.err -c
ccv850 file2.c -stderr_overwrite=file2.err -c
</pre><br> as opposed to how you might normally use <code>-stderr</code>:
            <br><pre>ccv850 file1.c -stderr=err.out -c
ccv850 file2.c -stderr=err.out -c
</pre><br>
                              
         </p>
      </div>
      <hr>
      <div id="bod.SymbolBlacklistFile">
         <p>Specifies the path to a file containing a newline-separated list of symbols. The compiler, assembler, and linker will produce
            a diagnostic if the output ELF file would reference or define a non-static symbol contained in the blacklist. Symbol names for C++ functions must be mangled.
            In the case of a build that separately performs compilation, assembly, or linkage, this option must be passed to each driver
            invocation to catch all references and definitions of blacklisted symbols. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-symbol_blacklist_file</code>=<var>filename</var>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.IdentifierBlacklistFile">
         <p>Specifies the path to a file containing a newline-separated list of identifiers. The compiler will produce a diagnostic if
            the source file contains any identifiers in the blacklist. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-identifier_blacklist_file</code>=<var>filename</var>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.XSwitches">
         <p>Specifies one or more internal compiler switches. The equivalent driver option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-X<var>switch</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.Option">
         <p>Specifies one or more internal EDG front end options. The equivalent driver option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>--option=<var>option</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.ChangeAssembler">
         <p>Specifies the assembler to use. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>Use Old Assembler</strong> (<code>-old_assembler</code>) &#8212; [default]
                                                
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>Use New Assembler</strong> (<code>-new_assembler</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.DboTrace">
         <p>Controls the collection of diagnostic information pertaining to a search for <strong>.dbo</strong> files. Permitted settings for this option are:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>On</strong> (<code>-dbo_trace</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
         <p>This option is useful if you are seeking support for an incident involving missing <strong>.dbo</strong> files.
         </p>
      </div>
      <hr>
      <div id="bod.DboVersion">
         <p>Specifies an older version of <strong>.dbo</strong> debugging information files, for use with an old MULTI Debugger. The equivalent driver option is:
         </p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>--dbo_version=<var>n</var>
                                                      </code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.AlternateSourceName">
         <p>This option is deprecated and provided for backwards compatibility only.</p>
         <p>Renames an output file. The equivalent HTML compiler option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-o</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.OmitCompression">
         <p>This option is deprecated and provided for backwards compatibility only.</p>
         <p>Omits HTML file compression. Permitted settings for this option are:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <strong>No HTML Compression</strong> (<code>-c</code>)
                  </p>
               </li>
               <li>
                  <p>
                                                   <strong>HTML Compression</strong> (<code>-C</code>)
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.AlternateCompressionTable">
         <p>This option is deprecated and provided for backwards compatibility only.</p>
         <p>Filename of alternate compression table. The equivalent HTML compiler option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-p</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
      <div id="bod.AlternateHeaderName">
         <p>This option is deprecated and provided for backwards compatibility only.</p>
         <p>Renames the generated include file. The equivalent HTML compiler option is:</p>
         <p>
            
                                 
            <ul>
               <li>
                  <p>
                                                   <code>-h</code>
                                                
                  </p>
               </li>
            </ul>
                              
         </p>
      </div>
      <hr>
   </body>
</html>