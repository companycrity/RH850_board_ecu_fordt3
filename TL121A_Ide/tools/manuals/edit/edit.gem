
<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
   
      <title>GHS Config Option Descriptions</title>
   </head>
   <body>
      <h2>GHS Config Option Descriptions</h2>
      <hr>
      <div id="cfg.RememberWindowPositions">
         <p><strong>Save window positions and sizes</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>rememberWindowPositions on</code>) &#8212; [default] Remembers the position and size of windows created by MULTI so that the next time a window of the same type
                  is created, it appears in the same location and with the same size. For example, if you resize the Project Manager window,
                  move it to a specific location on your screen, and then close the window, the next Project Manager you open appears in the
                  same place and with the same size. The first window of a given type is positioned in the saved location. Any new windows of
                  the same type are slightly offset from the location of the open window and are given the saved size. Size and position are
                  remembered even after you exit and restart MULTI.<br></li>
               <li><strong>Cleared</strong> (<code>rememberWindowPositions off</code>) &#8212; Does not remember the position and size of windows created by MULTI.<br></li>
            </ul>
         </p>
         <p><strong>Note:</strong> This setting does not apply to certain types of dialog boxes, such as modal dialog boxes, or certain windows, such as the
            <strong>Active Licenses</strong> window, the <strong>Memory Test Wizard</strong>, the <strong>Perform Memory Test</strong> window, and the <strong>Source Path</strong> window.
         </p>
      </div>
      <hr>
      <div id="cfg.CloseButtonOnTitlebar">
         <p><strong>Display close (x) buttons</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>closeButtonOnTitlebar on</code>) &#8212; A <strong>Close</strong> button will appear on window toolbars. This option only affects new windows created after you change this setting, except
                  for Debugger windows, which adjust to the new setting immediately.<br></li>
               <li><strong>Cleared</strong> (<code>closeButtonOnTitlebar off</code>) &#8212; [default] The <strong>Close</strong> button will not appear on toolbars.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.beep">
         <p><strong>Allow beeping</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>beep on</code>) &#8212; [default] MULTI beeps on various error conditions, such as a search that does not match anything.<br></li>
               <li><strong>Cleared</strong> (<code>beep off</code>) &#8212; MULTI never beeps.<br></li>
            </ul>
         </p>
         <p>For information about the <code>Beep</code> Editor command, see 
            	
            	"Miscellaneous Commands"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.tooltips">
         <p><strong>Show tooltips</strong></p>
         <p>Linux/Solaris only</p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>tooltips on</code>) &#8212; [default] Tooltips (small explanatory boxes that pop up when you hover the cursor over a GUI item) will appear if available.<br></li>
               <li><strong>Cleared</strong> (<code>tooltips off</code>) &#8212; Tooltips will never appear.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ExactCase">
         <p><strong>Match exact case in searches</strong></p>
         <p>Determines the case sensitivity of interactive text searches in the Editor and of incremental text searches in MULTI tools.
            Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>exactCase on</code>) &#8212; Searches are case-sensitive.<br></li>
               <li><strong>Cleared</strong> (<code>exactCase off</code>) &#8212; [default] Searches are case-insensitive.<br></li>
            </ul>
         </p>
         <p>This option can also be set on a per-Editor-window basis with the Search dialog box. For more information, see 
            	
            	"Interactive Searching Using the Search Dialog Box"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
         <p><strong>Note:</strong> This setting does not apply to the <code>grep</code> Editor or Debugger commands or to any of the Search in Files dialog boxes, all of which run <code>grep</code> and are case-sensitive by default.
         </p>
      </div>
      <hr>
      <div id="cfg.iSearchReturn">
         <p><strong>Escape restores view after iSearch</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>iSearchReturn on</code>) &#8212; Returns the cursor to its original position when you press Esc while in incremental search mode. See 
                  	
                  	"Incremental Searching"
                  	in the <em>MULTI: Building Applications</em> book for your target.<br></li>
               <li><strong>Cleared</strong> (<code>iSearchReturn off</code>) &#8212; [default] Does not return the cursor to its original position when you press Esc while in incremental search mode.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.moon">
         <p><strong>Phase of moon in scroll bar box</strong></p>
         <p>We at Green Hills decry the unfortunate tendency in our society whereby mankind perceives itself as disconnected from its environment. We as individuals
            pay no attention to flowers blooming or leaves falling. We live immersed in our air conditioned offices and, if we are programmers,
            we never see the light of day. In a perhaps futile effort to stop this trend, we provide all MULTI users with the current
            phase of the moon to encourage them to leave their desks and look up at the beautiful night sky.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>moon on</code>) &#8212; Displays the approximate phase of the moon in the nook of the vertical and horizontal scroll bars.<br></li>
               <li><strong>Cleared</strong> (<code>moon off</code>) &#8212; [default] The phase of the moon is not displayed.<br></li>
            </ul>
         </p>
         <p>Changes to this setting only affect new windows.</p>
      </div>
      <hr>
      <div id="cfg.ClipManLaunch">
         <p><strong>Launch clipboard manager</strong></p>
         <p>Linux/Solaris only</p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>clipManLaunch on</code>) &#8212; [default] The clipboard manager, which stores selections that have been sent to the clipboard by all applications, will
                  run after MULTI has exited, making the contents of the clipboard accessible to other applications.<br></li>
               <li><strong>Cleared</strong> (<code>clipManLaunch off</code>) &#8212; The contents of the clipboard are lost when MULTI exits.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.WarpPointer">
         <p><strong>Warp pointer</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Never</strong> (<code>warpPointer never</code>) &#8212; [default for Windows] Never move the mouse pointer automatically. The mouse cursor can only be changed by physically moving
                  the mouse.<br></li>
               <li><strong>Into Dialog Box</strong> (<code>warpPointer intoDialogue</code>) &#8212; [default for Linux/Solaris] Warp the mouse pointer to the default button of new dialog boxes that appear.<br></li>
               <li><strong>In &amp; Out of Dialog Box</strong> (<code>warpPointer in&amp;OutDialogue</code>) &#8212; Warp the mouse pointer into the default button of new dialog boxes, and warp it back to its previous location when the
                  dialog box is closed.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.PrintCommand">
         <p><strong>Print command</strong></p>
         <p>Linux/Solaris only</p>
         <p>(<code>printCommand <var>command</var>
                                                   </code>) Specifies the command used to send information to a printer. The default is <strong>lpr</strong>.
         </p>
      </div>
      <hr>
      <div id="cfg.Editor">
         <p><strong>Editor</strong></p>
         <p>Specifies which editor MULTI uses when you request an editor to start. Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>MULTI Editor</strong> (<code>extEditor_Choice "multi editor"</code>) &#8212; [default] Uses the MULTI Editor.<br></li>
               <li><strong>Emacs</strong> (<code>extEditor_Choice emacs</code>) &#8212; Uses the Emacs Editor.<br></li>
               <li><strong>Vi</strong> (<code>extEditor_Choice vi</code>) &#8212; Uses the vi Editor.<br></li>
               <li><strong>Other</strong> (<code>extEditor_Choice other</code>) &#8212; Uses an editor that is not available in the list.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.VersionControlType">
         <p><strong>Version Control</strong></p>
         <p>Specifies which version control system MULTI uses. Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Auto Detect</strong> (<code>versionControlType autoDetect</code>) &#8212; [default] Version control is auto-detected based on the file currently in use.<br></li>
               <li><strong>Disable</strong> (<code>versionControlType disable</code>) &#8212; Version control is disabled.<br></li>
               <li><strong>CVS</strong> (Concurrent Versions System) (<code>versionControlType cvs</code>) &#8212; An open-sourcenetwork-transport version control system. See 
                  	
                  	"Integrating with CVS"
                  	in the <em>MULTI: Building Applications</em> book for your target.<br></li>
               <li><strong>Subversion</strong> (<code>versionControlType subversion</code>) &#8212; An open-sourcenetwork-transport version control system. See 
                  	
                  	"Integrating with Subversion"
                  	in the <em>MULTI: Building Applications</em> book for your target.<br></li>
               <li><strong>ClearCase</strong> (<code>versionControlType clearCase</code>) &#8212; A version control system from Rational Software. See 
                  	
                  	"Integrating with ClearCase"
                  	in the <em>MULTI: Building Applications</em> book for your target.<br></li>
               <li><strong>SourceSafe</strong> (<code>versionControlType sourceSafe</code>) &#8212; (Windows only) A version control system from Microsoft. See 
                  	
                  	"Integrating with SourceSafe"
                  	in the <em>MULTI: Building Applications</em> book for your target.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.font">
         <p><strong>Source Code Font</strong></p>
         <p>(<code>font <var>font_name</var>
                                                   </code>) Opens a font selection dialog box in which you can set the source code font. This font is used for most textual display,
            including in the Debugger source pane, the command pane, and the MULTI Editor. Click <strong>Source Code Font</strong> and select a font installed on your system. The font you choose should normally be a fixed-width font so that characters
            align properly. Italic and oblique fonts should not be chosen. While some italic and oblique fonts work correctly, others
            exhibit drawing problems.
         </p>
         <p>The default font on Windows is <strong>Courier New Regular</strong>. The command to restore the default Windows font from the command pane is:
         </p>
         <p><code>configure font "courier new:13"</code></p>
         <p>The default font on Linux/Solaris is <strong>misc fixed medium semi-condensed</strong>. The command to restore the default Linux/Solaris font from the command pane is:
         </p>
         <p><code>configure font -misc-fixed-medium-r-semicondensed-*-*-120-*-*-*-*-*-*</code></p>
         <p>All MULTI tools opened during the current MULTI session are notified of changes to this option. For more information, see
            
            	
            	"Propagating Configuration Settings"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.GuiFont">
         <p><strong>GUI Font</strong></p>
         <p>(<code>guiFont <var>font_name</var>
                                                   </code>) Opens a font selection dialog box in which you can set the GUI font. This font is used for buttons, menus, and other GUI
            controls. Click <strong>GUI Font</strong> and select a font installed on your system. Italic and oblique fonts should not be chosen. While some italic and oblique
            fonts work correctly, others exhibit drawing problems.
         </p>
         <p>The default font on Windows is <strong>MS Sans Serif Regular</strong>. The command to restore the default Windows font from the command pane is:
         </p>
         <p><code>configure guiFont "ms sans serif"</code></p>
         <p>The default font on Linux/Solaris is <strong>adobe helvetica medium</strong>. The command to restore the default Linux/Solaris font from the command pane is:
         </p>
         <p><code>configure guiFont *-helvetica-medium-r-normal-*-12-*-*-*-*-*-*-*</code></p>
         <p>All MULTI tools opened during the current MULTI session are notified of changes to this option. For more information, see
            
            	
            	"Propagating Configuration Settings"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.ExtEditor_EmacsUseXTerm">
         <p><strong>Use XTerm</strong></p>
         <p>Linux/Solaris only</p>
         <p>(<code>extEditor_EmacsUseXTerm</code> for Emacs, <code>extEditor_ViUseXTerm</code> for vi, <code>extEditor_OtherUseXTerm</code> for other editors) Determines whether the external editor will be launched from within an xterm. This is equivalent to prefixing <code>xterm -e</code> to the command to launch the editor. Users with console mode editors should enable this option. You must restart MULTI for
            changes to this option to take effect.
         </p>
      </div>
      <hr>
      <div id="cfg.ExtEditor_EmacsArgumentFormat">
         <p><strong>Command line arguments</strong></p>
         <p>(<code>"extEditor_EmacsArgumentFormat +%LINE %FILE0 %FILES"</code> for Emacs, <code>"extEditor_ViArgumentFormat +%LINE %FILE0 %FILES"</code> for vi, <code>"extEditor_OtherArgumentFormat <var>command line specification</var>&#8221;</code> for other editors) Determines the arguments given to the editor when it is launched.
         </p>
         <p>Three special character sequences are replaced when the editor is run. Substitution rules follow:</p>
         <p>
            <ul>
               <li><strong>%LINE</strong> &#8212; Replaced with the line number to go to when opening the file (removed if MULTI does not specify a line number).<br></li>
               <li><strong>%FILE0</strong> &#8212; Replaced with the first file to be edited.<br></li>
               <li><strong>%FILES</strong> &#8212; Replaced with all but the first file if there is more than one file to edit (removed if MULTI only specifies one file to
                  edit). Each file is separated by a space.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.TaskbarType">
         <p><strong>Mode</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Disabled</strong> (<code>taskbarType disabled</code>) &#8212; Disables the Taskbar Organizer. In this mode, MULTI windows populate both the taskbar and the window list that appears
                  when you press the AltTab key combination.<br></li>
               <li><strong>Taskbar</strong> (<code>taskbarType taskbar</code>) &#8212; Enables taskbar mode. In taskbar mode, all MULTI windows are grouped into a single taskbar entry labeled <strong>MULTI</strong>. For more information, see 
                  	
                  	"Configuring Taskbar Organization"
                  	in the <em>MULTI: Building Applications</em> book for your target.<br></li>
               <li><strong>Tray</strong> (<code>taskbarType tray</code>) &#8212; Enables tray icon mode. In tray icon mode, all MULTI windows are grouped under a single system tray icon. For more information,
                  see 
                  	
                  	"Configuring Taskbar Organization"
                  	in the <em>MULTI: Building Applications</em> book for your target.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.TaskbarShowAllWindows">
         <p><strong>When pressing Alt-Tab, display</strong></p>
         <p>Allows you to configure the appearance of items in the AltTab list. Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>All windows</strong> (<code>taskbarShowAllWindows on</code>) &#8212; Displays all MULTI windows in the AltTab list.<br></li>
               <li><strong>Only the Taskbar Organizer</strong> (<code>taskbarShowAllWindows off</code>) &#8212; Displays a single MULTI icon in the AltTab list, regardless of the number of open MULTI windows. The setting of the option <strong>When selecting the organizer in the Alt-Tab list</strong> determines the behavior of the MULTI icon when selected.<br></li>
               <li><strong>Nothing</strong> &#8212; Does not display any MULTI windows or icons in the AltTab list.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.TaskbarGotoLastWindow">
         <p><strong>When selecting the organizer in the Alt-Tab list</strong></p>
         <p>Determines what occurs after you select the MULTI icon in the AltTab list. Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Go to the last activated window</strong> (<code>taskbarGotoLastWindow on</code>) &#8212; Returns focus to the last active MULTI window.<br></li>
               <li><strong>Show a list of all windows</strong> (<code>taskbarGotoLastWindow off</code>) &#8212; Displays a shortcut menu providing access to all open MULTI windows. For more information, see 
                  	
                  	"Taskbar Organizer Menu Options"
                  	in the <em>MULTI: Building Applications</em> book for your target.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.BlinkingCursor">
         <p></p>
         <p>Linux/Solaris only</p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] The vertical bar cursor in various windows (such as the Debugger command pane and the Editor) will blink.<br></li>
               <li><code>off</code> &#8212; The cursor will be a solid non-blinking bar.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ClearKeys">
         <p></p>
         <p>Removes all of the key bindings so they can be created from scratch with <code>keybind</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.ClearMenus">
         <p></p>
         <p>Removes all menus so they can be created from scratch using <code>menu</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.ClearMice">
         <p></p>
         <p>Removes all mouse button bindings so they can be created from scratch with the <code>mouse</code> command. 
         </p>
      </div>
      <hr>
      <div id="cfg.ClickPause">
         <p></p>
         <p>Linux/Solaris only</p>
         <p>Specifies the length of time, in <code>
                                                      <var>time</var>
                                                   </code> tenths of a second, that MULTI waits between successive button presses to recognize double or triple clicks. For example,
            if <code>
                                                      <var>time</var>
                                                   </code> is <code>4</code>, two clicks on the same button, in the same mouse location, within four tenths of a second, are treated as a double-click.
            If the two clicks are separated by more than <code>
                                                      <var>time</var>
                                                   </code> tenths of a second, they are treated as two single-clicks.
         </p>
         <p>If no mouse binding requiring multiple clicks exists for a particular mouse location, MULTI executes the mouse binding immediately
            without waiting for multiple clicks.
         </p>
         <p>The default <code>
                                                      <var>time</var>
                                                   </code> is <code>4</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.ConfigureFile">
         <p></p>
         <p>Used within a configuration file to read in another configuration file specified by <code>
                                                      <var>filename</var>
                                                   </code>. After <code>
                                                      <var>filename</var>
                                                   </code> is processed, processing of the original configuration file continues as normal.
         </p>
      </div>
      <hr>
      <div id="cfg.DimAsmStyle">
         <p></p>
         <p>Controls the style of disassembled Motorola 68000 series code. Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>remote</code> &#8212; [default] Use <code>XORmacs</code> style if the code is destined for execution on an embedded processor or Linux/Solaris style for native development.<br></li>
               <li><code>XORmacs</code> &#8212; Always use <code>XORmacs</code> style (such as <code>MOVE.L (12,A6),D0</code>).<br></li>
               <li><code>unix</code> &#8212; Always use Linux/Solaris style (such as <code>movel a6@(12),d0</code>).<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.FocusOnRaise">
         <p></p>
         <p>Linux/Solaris only</p>
         <p>Controls whether existing windows are automatically given focus when they are raised. This option does not affect windows
            when they are displayed for the first time.
         </p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] Existing windows are automatically given focus when they are raised. This setting is recommended if your window
                  manager uses a click-to-focus policy.<br></li>
               <li><code>off</code> &#8212; Existing windows are not given focus when they are raised. This setting is recommended if your window manager uses a focus-follows-mouse
                  policy.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.GrabTimeout">
         <p></p>
         <p>Linux/Solaris only</p>
         <p>Specifies an interval used to force processes to release any X-server keyboard or mouse grabs:</p>
         <p>
            <ul>
               <li>If <code>
                                                                     <var>time</var>
                                                                  </code> is less than zero &#8212; MULTI does not check to see if there are any outstanding grabs on the X-server each time it stops.<br></li>
               <li>If <code>
                                                                     <var>time</var>
                                                                  </code> is greater than zero &#8212; MULTI checks to see if the process has any outstanding grabs when the process is stopped by a signal
                  or breakpoint. If both the keyboard and the mouse are grabbed, MULTI waits <code>
                                                                     <var>time</var>
                                                                  </code> seconds before aborting the other process's grabs, and then exits.<br></li>
            </ul>
         </p>
         <p>The default <code>
                                                      <var>time</var>
                                                   </code> is <code>-1</code>.
         </p>
         <p>This option is only useful for Solaris native and Linux native development.</p>
      </div>
      <hr>
      <div id="cfg.iconify">
         <p></p>
         <p>Linux/Solaris only</p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; The next MULTI window will be minimized as an icon when it opens.<br>If you repeatedly configure this option to <code>on</code>, it will remember the number of times you have done this, and cause the next <var>num</var> windows to be created minimized (one per time you configure the option to <code>on</code>). After the correct number of windows come up minimized, this option resets itself to <code>off</code>.<br></li>
               <li><code>off</code> &#8212; [default] Does not minimize MULTI windows.<br></li>
            </ul>
         </p>
         <p>This option is only applied to the next window created and does not affect existing windows.</p>
      </div>
      <hr>
      <div id="cfg.ignoreMotion">
         <p></p>
         <p>Specifies the number of pixels the mouse can move during a press and release of a mouse button.</p>
         <p>If you move the mouse less than <code>
                                                      <var>num</var>
                                                   </code> pixels between a button press and release, the click is treated as a single click. If you move the mouse more than <code>
                                                      <var>num</var>
                                                   </code> pixels between press and release, the mouse click is no longer treated as a single click but as two independent press and
            release events.
         </p>
         <p>The default <code>
                                                      <var>num</var>
                                                   </code> is <code>4</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.MultiIconPreName">
         <p></p>
         <p>Linux/Solaris only</p>
         <p>When you iconify a window, <code>
                                                      <var>string</var>
                                                   </code> prefixes the icon name. For example, if you set <code>
                                                      <var>string</var>
                                                   </code> to <code>MULTI</code>, iconified Editor windows are named <strong>MULTI:<var>Filename</var>.c</strong> instead of <strong><var>Filename</var>.c</strong>.
         </p>
         <p>If your window manager does not support iconifying, this option has no effect. The default is an empty string.</p>
         <p>Changes to this setting only affect new windows.</p>
      </div>
      <hr>
      <div id="cfg.MultiWinPreName">
         <p></p>
         <p>Linux/Solaris only</p>
         <p>Prepends <code>
                                                      <var>string</var>
                                                   </code> to the title bar's window name. The default is an empty string.
         </p>
         <p>Changes to this setting only affect new windows.</p>
      </div>
      <hr>
      <div id="cfg.NoDecoration">
         <p></p>
         <p>Linux/Solaris only</p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; If the windows manager supports this setting, all windows appear without title bars.<br></li>
               <li><code>off</code> &#8212; [default] Windows appear with title bars.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.NumberSeparator">
         <p></p>
         <p>Specifies a character (<code>
                                                      <var>string</var>
                                                   </code>) used to break up large numbers for ease of reading. For example, specifying an underscore would cause MULTI to display <code>0x123456789</code> as <code>0x1_23456789</code>.
         </p>
         <p><code>
                                                      <var>string</var>
                                                   </code> may only be a single character. The default is an empty string, which results in MULTI not using any separator character
            to break up numbers.
         </p>
      </div>
      <hr>
      <div id="cfg.ShowGrepCommand">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; The full <code>grep</code> command prints out whenever the <code>grep</code> command is executed.<br></li>
               <li><code>off</code> &#8212; [default] The full <code>grep</code> command does not print out.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.synchronous">
         <p></p>
         <p>Linux/Solaris only</p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; Enable synchronous X-windows mode. Synchronous mode ensures that X-window calls from MULTI complete before they return. This can be useful when running MULTI on faulty X-servers.<br></li>
               <li><code>off</code> &#8212; [default] Disables synchronous X-windows mode.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.UseWMPositioning">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; MULTI allows the window manager to determine where all windows should go.<br></li>
               <li><code>off</code> &#8212; [default] MULTI automatically places windows in convenient locations.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ShowProgress">
         <p><strong>Open build details window</strong>*
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Always</strong> (<code>showProgress always</code>) &#8212; The <strong>Build Details</strong> window opens every time you build an application, even if no warnings or errors are produced.<br></li>
               <li><strong>On Warnings and Errors</strong> (<code>showProgress on warnings and errors</code>) &#8212; [default] The <strong>Build Details</strong> window opens if your build produces warnings or errors.<br></li>
               <li><strong>On Errors</strong> (<code>showProgress on errors</code>) &#8212; The <strong>Build Details</strong> window opens if your build produces errors, but does not open for warnings.<br></li>
               <li><strong>Never</strong> (<code>showProgress never</code>) &#8212; The <strong>Build Details</strong> window never opens, even if warnings or errors are produced.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AutoEditErrors">
         <p><strong>Automatically open editor on errors</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>autoEditErrors on</code>) &#8212; [default] If the <strong>Build Details</strong> window is open or is configured to open on errors, the code that caused the first error of the build is automatically displayed
                  in an Editor window.<br></li>
               <li><strong>Cleared</strong> (<code>autoEditErrors off</code>) &#8212; Errors are displayed in the <strong>Build Details</strong> window. Double-click an error to open it in an Editor window.<br></li>
            </ul>
         </p>
         <p>All MULTI tools opened during the current MULTI session are notified of changes to this option. For more information, see
            
            	
            	"Propagating Configuration Settings"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.AutoEditWarnings">
         <p><strong>On warnings</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>autoEditWarnings on</code>) &#8212; If the <strong>Build Details</strong> window is open or is configured to open on warnings, the code that caused the first warning of the build is automatically
                  displayed in an Editor window.<br></li>
               <li><strong>Cleared</strong> (<code>autoEditWarnings off</code>) &#8212; [default] Warnings are displayed in the <strong>Build Details</strong> window. Double-click a warning to open it in an Editor window.<br></li>
            </ul>
         </p>
         <p>All MULTI tools opened during the current MULTI session are notified of changes to this option. For more information, see
            
            	
            	"Propagating Configuration Settings"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.AlwaysUseMeToFixBuildErrors">
         <p><strong>Use MULTI Editor on errors (even if alternate editor is specified elsewhere)</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>alwaysUseMeToFixBuildErrors on</code>) &#8212; [default] Errors and warnings will be displayed in the MULTI Editor even if you have configured the MULTI environment
                  to use an alternative, third-party editor.<br></li>
               <li><strong>Cleared</strong> (<code>alwaysUseMeToFixBuildErrors off</code>) &#8212; Errors and warnings will be displayed in the editor you use in your MULTI environment.<br></li>
            </ul>
         </p>
         <p>All MULTI tools opened during the current MULTI session are notified of changes to this option. For more information, see
            
            	
            	"Propagating Configuration Settings"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.DefaultNPWdir">
         <p><strong>Project directory root</strong></p>
         <p>(<code>defaultNpwDir <var>string</var>
                                                </code>) Specifies the base directory where new projects are created. If left blank, new projects are created at:
         </p>
         <p>
            <ul>
               <li>Windows 7/Vista &#8212; <strong>C:\Users\<var>username</var>\My Documents\My Projects\</strong><br></li>
               <li>Windows XP &#8212; <strong>C:\Documents and Settings\<var>username</var>\My Documents\My Projects\</strong><br></li>
               <li>Linux/Solaris &#8212; <strong>~/MyProjects/</strong><br></li>
            </ul>
         </p>
         <p>The <strong>Project Wizard</strong> creates a <strong>Project<var>n</var></strong> directory in this location to act as the root directory of the project.
         </p>
         <p>All MULTI tools opened during the current MULTI session are notified of changes to this option. For more information, see
            
            	
            	"Propagating Configuration Settings"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.BuildType">
         <p><strong>Parallel Build</strong>*
         </p>
         <p>(<code>buildType parallel</code>) [default] Builds programs using the number of processes specified. See the descriptions of <strong>Number of parallel processes</strong>, <strong>Auto-detect</strong>, and <strong>Custom</strong> below.
         </p>
      </div>
      <hr>
      <div id="cfg.NumberOfParallelProcesses">
         <p><strong>Number of parallel processes</strong>*
         </p>
         <p>(<code>numParallelBuildProcesses <var>num</var>
                                                </code>) Specifies the number of processes that may be run in parallel. This option is only available with the <strong>Parallel Build</strong> option. The default <code>
                                                   <var>num</var>
                                                </code> is <code>2</code>. See the descriptions of <strong>Auto-detect</strong> and <strong>Custom</strong> below.
         </p>
      </div>
      <hr>
      <div id="cfg.AutoDetectNumParallel">
         <p><strong>Auto-detect</strong>*
         </p>
         <p>(<code>autoDetectNumParallel auto</code>) [default] Auto-detects the maximum number of processes that may be run in parallel.
         </p>
      </div>
      <hr>
      <div id="cfg.UseLockFiles">
         <p><strong>Use lock files (-lockout)</strong>*
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>useLockFiles on</code>) &#8212; Prevents multiple simultaneous builds of the same program or library by creating temporary <strong>.lck</strong> lock files.<br></li>
               <li><strong>Cleared</strong> (<code>useLockFiles off</code>) &#8212; [default] Does not create temporary <strong>.lck</strong> lock files.<br></li>
            </ul>
         </p>
         <p><strong>Note:</strong><code>-lockout</code> is the corresponding <code>gbuild</code> option. For information about the <code>gbuild</code> utility program, see the <strong>MULTI: Building Applications</strong> book for your target processor family.
         </p>
      </div>
      <hr>
      <div id="cfg.UseLowPriority">
         <p><strong>Execute tools at low priority (-nice)</strong>*
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>useLowPriority on</code>) &#8212; Executes the build with lower than normal priority&#8212;scheduling priority 10 (Linux/Solaris) or the idle priority class (Windows).<br></li>
               <li><strong>Cleared</strong> (<code>useLowPriority off</code>) &#8212; [default] Executes the build at normal priority.<br></li>
            </ul>
         </p>
         <p><strong>Note:</strong><code>-nice</code> is the corresponding <code>gbuild</code> option. For information about the <code>gbuild</code> utility program, see the <strong>MULTI: Building Applications</strong> book for your target processor family.
         </p>
      </div>
      <hr>
      <div id="cfg.ToolCommands">
         <p><strong>Show tool commands (-commands)</strong>*
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>toolCommands on</code>) &#8212; Displays commands as they are executed.<br></li>
               <li><strong>Cleared</strong> (<code>toolCommands off</code>) &#8212; [default] Does not display commands as they are executed.<br></li>
            </ul>
         </p>
         <p><strong>Note:</strong><code>-commands</code> is the corresponding <code>gbuild</code> option. For information about the <code>gbuild</code> utility program, see the <strong>MULTI: Building Applications</strong> book for your target processor family.
         </p>
      </div>
      <hr>
      <div id="cfg.BeepOnBuildCompletion">
         <p><strong>Beep when build completes</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>beepOnBuildCompletion on</code>) &#8212; Beeps at the end of a successful build. This setting only takes effect if <strong>Allow beeping</strong> on the <strong>General</strong> tab is selected (see 
                  	
                  	"The General Options Tab"
                  	in the <em>MULTI: Building Applications</em> book for your target).<br></li>
               <li><strong>Cleared</strong> (<code>beepOnBuildCompletion off</code>) &#8212; [default] Does not beep.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AutoConnectionMode">
         <p><strong>Automatically share target connections</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>autoConnectionMode on</code>) &#8212; [default] The primary target connection is used.<br></li>
               <li><strong>Cleared</strong> (<code>autoConnectionMode off</code>) &#8212; Multiple target connections can run concurrently. Advanced users who need to have multiple target connections running
                  must clear this option before starting multiple connections.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.DisplayConnectionTypeInChooser">
         <p><strong>Display connection type in Connection Chooser</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>displayConnectionTypeinChooser on</code>) &#8212; The type of a connection method is displayed in brackets after the name in the drop-down list in the <strong>Connection Chooser</strong> dialog. Custom connection methods have no type displayed.<br></li>
               <li><strong>Cleared</strong> (<code>displayConnectionTypeinChooser off</code>) &#8212; [default] Only the name of the connection method is displayed.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.VerifyHalt">
         <p><strong>Ask before halting to set breakpoint</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>verifyHalt on</code>) &#8212; [default] The Debugger will ask for confirmation before halting the process to set a breakpoint.<br></li>
               <li><strong>Cleared</strong> (<code>verifyHalt off</code>) &#8212; The Debugger will automatically halt, set the breakpoint, and continue the process without requiring user intervention.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ProcRelativeLines">
         <p><strong>Use procedure relative line numbers (vs. file relative)</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>procRelativeLines on</code>) &#8212; [default] Debugger commands, such as the <code>e</code> command, interpret line numbers as procedure relative, instead of file relative.<br></li>
               <li><strong>Cleared</strong> (<code>procRelativeLines off</code>) &#8212; Line numbers are treated as file relative.<br></li>
            </ul>
         </p>
         <p>For more information, see Specifying Line Numbers.</p>
      </div>
      <hr>
      <div id="cfg.HexMode">
         <p><strong>Display all numbers/characters as hex</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>hexMode on</code>) &#8212; All numeric values evaluated by the Debugger are displayed in hexadecimal format.<br></li>
               <li><strong>Cleared</strong> (<code>hexMode off</code>) &#8212; [default] Display format is based on the natural display format for that type. For integral types, the natural display format is decimal.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ViewUnsignedCharAsInt">
         <p><strong>View unsigned char as integer</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>viewUnsignedCharAsint on</code>) &#8212; [default] The natural display format of unsigned chars will be the same as for ints. This is useful when you want to view byte values as numeric values instead of characters.<br></li>
               <li><strong>Cleared</strong> (<code>viewUnsignedCharAsint off</code>) &#8212; The natural display format for unsigned chars is a literal character, such as 'A'.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.BackgroundMode">
         <p><strong>Coloring for multiple debuggers</strong></p>
         <p>Specifies how the background color of new Debugger windows is chosen. It is useful to turn this on when using multiple Debugger
            windows to make them visually distinct. Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><strong>Do Not Color</strong> (<code>backgroundMode off</code>) &#8212; All Debugger windows use the normal background color.<br></li>
               <li><strong>Use Color Offsets</strong> (<code>backgroundMode offset</code>) &#8212; [default] New Debugger windows will use predetermined offsets from the normal background color. This option is usually
                  best since it will pick colors near the current background color, and keep the text as legible as possible.<br></li>
               <li><strong>Use Preset Colors</strong> (<code>backgroundMode preset</code>) &#8212; New Debugger windows will use a color from a set of pre-chosen, highly distinctive colors.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.LineNumberMode">
         <p><strong>Line numbers in source pane</strong></p>
         <p>Specifies how line numbers are displayed on the left side of the Debugger source pane. Permitted settings for this option
            are:
         </p>
         <p>
            <ul>
               <li><strong>No Number</strong> (<code>lineNumberMode none</code>) &#8212; No line numbers are displayed.<br></li>
               <li><strong>File Number</strong> (<code>lineNumberMode file</code>) &#8212; The file relative line numbers are displayed.<br></li>
               <li><strong>Proc Number</strong> (<code>lineNumberMode proc</code>) &#8212; The procedure relative line numbers are displayed.<br></li>
               <li><strong>Both Numbers</strong> (<code>lineNumberMode both</code>) &#8212; [default] Both file-relative and procedure-relative line numbers are displayed.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.HoverValues">
         <p><strong>Show variable values in tooltips</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Never (fastest and safest)</strong> (<code>hoverValues never</code>) &#8212; Never show variable values in tooltips.<br></li>
               <li><strong>On Mouse Hover</strong> (<code>hoverValues always</code>) &#8212; When the mouse is positioned over a variable, show its value in a tooltip.<br></li>
               <li><strong>On Mouse Hover with Shift Key</strong> (<code>hoverValues onShift</code>) &#8212; [default] When the mouse is positioned over a variable and the Shift key is pressed, show the variable's value in a tooltip.<br></li>
            </ul>
         </p>
         <p>Variables are evaluated in the context of the blue current line pointer. If you want to view the value of a local variable, ensure that the current line pointer is positioned in the current function.</p>
      </div>
      <hr>
      <div id="cfg.ViewsAreChildrenMode">
         <p><strong>Debugger child windows</strong></p>
         <p>Windows only</p>
         <p>Controls how Debugger child windows (such as the Data Explorer and the <strong>Breakpoint</strong> window) interact with the Debugger window in terms of stacking order and focus. Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><strong>Stay above Debugger</strong> (<code>viewsAreChildrenMode children</code>) &#8212; Child windows are always displayed in front of the Debugger, and the keyboard focus stays with the Debugger when a child
                  window appears. This makes it easy to keep track of child windows and keeps the focus with the Debugger for further command
                  input, but can be annoying if the child windows start to obscure the Debugger window. Child windows can be minimized, but
                  this mode precludes partially obscuring a child window with the Debugger to save space.<br></li>
               <li><strong>Can be below Debugger</strong> (<code>viewsAreChildrenMode topLevel</code>) &#8212; [default] Child windows can be either above or below the Debugger, and keyboard focus remains with the Debugger for further
                  command input when a child window first appears. Because the keyboard focus remains with the Debugger, child windows will
                  appear to flash above the Debugger and then immediately go behind it, so this option is most useful on a large screen where
                  child windows do not overlap the Debugger when they first appear.<br></li>
               <li><strong>Are initially focused</strong> (<code>viewsAreChildrenMode keepFocus</code>) &#8212; Child windows can be either above or below the Debugger, and also receive the keyboard focus when they first appear. This
                  keeps child windows from immediately going behind the Debugger, but takes the focus away from the Debugger. Further command
                  input into the Debugger is not possible until you click the Debugger again to give it the keyboard focus.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.prompt">
         <p><strong>Command pane prompt</strong></p>
         <p>(<code>prompt <var>string</var>
                                                   </code>) Specifies the string used as a prompt in the Debugger command pane to indicate that user input is desired. The default <code>
                                                      <var>string</var>
                                                   </code> is <code>MULTI&gt;</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.ButtonConfig">
         <p><strong>Configure Debugger Buttons</strong></p>
         <p>Opens a dialog box that you can use to edit the Debugger toolbar buttons. This dialog box is only accessible from the MULTI
            Debugger. For more information, see Adding, Removing, and Rearranging Toolbar Buttons.
         </p>
      </div>
      <hr>
      <div id="cfg.MinViewSize">
         <p><strong>Minimum initial size (WxH)</strong></p>
         <p>(<code>minViewSize <var>width</var>x<var>height</var>
                                                   </code>) Specifies the minimum initial size that will be used to auto-size Data Explorer windows in characters (width) by lines (height)
            or in pixels, as specified.
         </p>
         <p>This option provides a lower limit that sets how small a Data Explorer can be, but not necessarily how small it is. The default
            <code>
                                                      <var>width</var>x<var>height</var>
                                                   </code> is <code>40x3</code>. The default units are characters/lines. To specify pixels from the command pane or in a configuration file, put a <code>p</code> after <code>
                                                      <var>width</var>x<var>height</var>
                                                   </code> (for example, <code>200x21p</code>).
         </p>
      </div>
      <hr>
      <div id="cfg.MaxViewSize">
         <p><strong>Maximum initial size (WxH)</strong></p>
         <p>(<code>maxViewSize <var>width</var>x<var>height</var>
                                                   </code>) Specifies the maximum initial size that will be used to auto-size Data Explorer windows in characters (width) by lines (height)
            or in pixels, as specified.
         </p>
         <p>This option provides an upper limit that sets how large a Data Explorer can be, but not necessarily how large it is. Even
            if the <code>minViewSize</code> option (preceding) is greater in either dimension than <code>maxViewSize</code>, the <code>maxViewSize</code> value is still used.
         </p>
         <p>The default <code>
                                                      <var>width</var>x<var>height</var>
                                                   </code> is <code>40x40</code>. The default units are characters/lines. To specify pixels from the command pane or in a configuration file, put a <code>p</code> after <code>
                                                      <var>width</var>x<var>height</var>
                                                   </code> (for example, <code>200x200p</code>).
         </p>
      </div>
      <hr>
      <div id="cfg.FirstPosition">
         <p><strong>Initial position (XxY)</strong></p>
         <p>(<code>firstPosition <var>x-coordinate</var>x<var>y-coordinate</var>
                                                   </code>) Specifies the initial position of the Data Explorer from the top-left of the screen. You may specify the position in characters
            (x-coordinate) by lines (y-coordinate) or in pixels.
         </p>
         <p>This option only applies to the first Data Explorer. Subsequent Data Explorers are offset from the first one that was created,
            preventing excessive overlap. If this option is left unspecified (blank), the Data Explorer remembers its previous position.
            The default <code>
                                                      <var>x-coordinate</var>x<var>y-coordinate</var>
                                                   </code> is <code>0x0</code>. The default units are characters/lines. To specify pixels from the command pane or in a configuration file, put a <code>p</code> after <code>
                                                      <var>x-coordinate</var>x<var>y-coordinate</var>
                                                   </code> (for example, <code>0x0p</code>).
         </p>
      </div>
      <hr>
      <div id="cfg.DerefPointer">
         <p><strong>Automatically dereference pointers</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>derefPointer on</code>) &#8212; [default] MULTI automatically follows pointers when it encounters them and prints both the pointer value and the object
                  it points to.<br></li>
               <li><strong>Cleared</strong> (<code>derefPointer off</code>) &#8212; MULTI only displays the value of the pointer.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.BpSyntaxChecking">
         <p><strong>Check syntax of breakpoints when they are set</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>bpSyntaxChecking on</code>) &#8212; [default] Commands associated with a breakpoint must pass syntax checking for the breakpoint to be set. Breakpoint commands
                  that fail syntax checking cannot be set.<br></li>
               <li><strong>Cleared</strong> (<code>bpSyntaxChecking off</code>) &#8212; A syntax error in a breakpoint command will not be detected by MULTI until the breakpoint is hit and MULTI tries to execute
                  the associated commands.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ContinuePlaybackFileOnError">
         <p><strong>Continue running script files on error</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>continuePlaybackFileOnError on</code>) &#8212; The Debugger will not stop if it encounters an error while running a script file. Instead, it will print any error output
                  and continue reading and performing commands out of that file.<br></li>
               <li><strong>Cleared</strong> (<code>continuePlaybackFileOnError off</code>) &#8212; [default] The Debugger aborts running a script file if it encounters an error.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.BlockStep">
         <p><strong>&#8220;s&#8221; (step) and &#8220;n&#8221; (next) are blocking by default</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>blockStep on</code>) &#8212; Step/next operations block subsequent commands until the step/next operations have finished.<br></li>
               <li><strong>Cleared</strong> (<code>blockStep off</code>) &#8212; [default] Step/next operations allow subsequent commands to execute before the step/next operations have finished. This
                  can cause scripts that use step/next commands to behave inconsistently.<br></li>
            </ul>
         </p>
         <p>You can make a step or next command blocking or non-blocking regardless of the setting of this option by appending an <code>n</code> (for non-blocking) or <code>b</code> (for blocking) to the command. See Single-Stepping Commands.
         </p>
         <p>See also the <code>blockRun</code> option.
         </p>
      </div>
      <hr>
      <div id="cfg.ShowAddress">
         <p><strong>Show locations of variables for &#8220;print&#8221; command</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>showAddress on</code>) &#8212; The location (address in memory or register name) of a variable is printed when using the <code>print</code> command.<br></li>
               <li><strong>Cleared</strong> (<code>showAddress off</code>) &#8212; [default] The location of a variable will not be printed; only the value is displayed.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.LeaveTypedef">
         <p><strong>Display typedef type instead of basic type</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>leaveTypeDef on</code>) &#8212; Data Explorers for structures will display the name of the type definition.<br></li>
               <li><strong>Cleared</strong> (<code>leaveTypeDef off</code>) &#8212; [default] Data Explorers for structures will display the actual self-contained type.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ShowPosInNoDisplayMode">
         <p><strong>Show position in non-GUI (-nodisplay) mode</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>showPosinNoDisplayMode on</code>) &#8212; [default] When running in non-GUI mode, MULTI will print the line of source associated with the current line pointer,
                  each time the current line pointer moves. This is the line that will be affected by the next Debugger command executed.<br></li>
               <li><strong>Cleared</strong> (<code>showPosinNoDisplayMode off</code>) &#8212; The line of source code associated with the current line will not display.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.EscHalts">
         <p><strong>Pressing Esc halts the target when connected</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>escHalts on</code>) &#8212; [default] MULTI attempts to halt the current process when you press Esc and the Debugger window is active.<br></li>
               <li><strong>Cleared</strong> (<code>escHalts off</code>) &#8212; MULTI does not attempt to halt the current process when you press Esc.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.RequestOSAPackage">
         <p><strong>Prompt for OSA package when package is not found</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>requestOsaPackage on</code>) &#8212; If MULTI determines that the program is a freeze-mode debugging project (see Freeze-Mode Debugging and OS-Awareness) but cannot determine the Operating System Awareness (OSA) package, MULTI will prompt you for the package name. You can choose the package name so that MULTI can provide the corresponding
                  debugging features, or select <strong>Cancel</strong> to continue without OSA.<br></li>
               <li><strong>Cleared</strong> (<code>requestOsaPackage off</code>) &#8212; [default] MULTI will not prompt you for the OSA package name and will continue without OSA.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.DeleteDeadTaskFromGroup">
         <p><strong>Delete dead tasks from group</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>deleteDeadTaskFromGroup on</code>) &#8212; The Task Manager will delete dead task fingerprints from the task group. For information about task groups and the meaning
                  of dead tasks, see Run-Mode Debugging.<br></li>
               <li><strong>Cleared</strong> (<code>deleteDeadTaskFromGroup off</code>) &#8212; [default] The Task Manager will not delete dead task fingerprints from the task group.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AutoVerifyROMSections">
         <p><strong>Automatically verify ROM image is up-to-date</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>autoVerifyRomSections on</code>) &#8212; When an executable residing in the target's ROM begins executing, the Debugger will automatically check whether the host
                  and target versions of the executable match. If the executable has a checksum, even slight variations between the two versions
                  will be detected. If the executable does not have a checksum, only more significant differences will be detected. For more
                  information, see Working with ROM.<br>For information about generating a checksum for an executable, see the documentation about verifying program integrity.<br></li>
               <li><strong>Cleared</strong> (<code>autoVerifyRomSections off</code>) &#8212; [default] The Debugger will not check the target's version of the executable.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AutoDWARF2dbo">
         <p><strong>Translate DWARF debugging information (requires dwarf2dbo license)</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>autoDwarf2Dbo on</code>) &#8212; Enables automatic translation of DWARF debugging information when an executable built entirely by a third-party compiler
                  that generates DWARF information is loaded. This option is only meaningful if you have licensed the DWARF Debug Translator;
                  otherwise it has no effect.<br></li>
               <li><strong>Cleared</strong> (<code>autoDwarf2Dbo off</code>) &#8212; [default] Disables automatic translation of DWARF debugging information if <strong>Translate stabs debugging information</strong> (next) is selected. If both <strong>Translate DWARF</strong>... and <strong>Translate stabs</strong>... are cleared, and the executable is built entirely by a third-party compiler, the debugging information is automatically
                  translated into the format required by the MULTI Debugger (assuming that you have licensed the appropriate Debug Translator).<br></li>
            </ul>
         </p>
         <p>For more information, including instructions about what to do if you compiled some of the object files of your executable
            with a third-party compiler and others with a Green Hills Software compiler, see the documentation about generating debugging information for applications compiled with third-party compilers.
         </p>
      </div>
      <hr>
      <div id="cfg.AutoStabs2dbo">
         <p><strong>Translate stabs debugging information (requires stabs2dbo license)</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>autoStabs2Dbo on</code>) &#8212; Enables automatic translation of Stabs debugging information when an executable built entirely by a third-party compiler
                  that generates Stabs information is loaded. This option is only meaningful if you have licensed the Stabs Debug Translator;
                  otherwise it has no effect.<br>Note that if both this option and the preceding are selected, only a DWARF translation is attempted (the DWARF Debug Translator
                  must be licensed).<br></li>
               <li><strong>Cleared</strong> (<code>autoStabs2Dbo off</code>) &#8212; [default] Disables automatic translation of Stabs debugging information if <strong>Translate DWARF debugging information</strong> (preceding) is selected. If both <strong>Translate stabs</strong>... and <strong>Translate DWARF</strong>... are cleared, and the executable is built entirely by a third-party compiler, the debugging information is automatically
                  translated into the format required by the MULTI Debugger (assuming that you have licensed the appropriate Debug Translator).<br></li>
            </ul>
         </p>
         <p>For more information, including instructions about what to do if you compiled some of the object files of your executable
            with a third-party compiler and others with a Green Hills Software compiler, see the documentation about generating debugging information for applications compiled with third-party compilers.
         </p>
      </div>
      <hr>
      <div id="cfg.UnifyViewWindows">
         <p><strong>Reuse Data Explorer</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>unifyViewWindows on</code>) &#8212; [default] Causes MULTI to display newly opened variables in an existing Data Explorer when available.<br></li>
               <li><strong>Cleared</strong> (<code>unifyViewWindows off</code>) &#8212; Causes each newly viewed variable to be displayed in a separate Data Explorer.<br></li>
            </ul>
         </p>
         <p>For more information, see Viewing and Modifying Variables with the Data Explorer.</p>
         <p>All MULTI tools opened during the current MULTI session are notified of changes to this option. For more information, see
            
            	
            	"Propagating Configuration Settings"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.LongjmpStepMode">
         <p><strong>Stepping over longjmps</strong></p>
         <p>When the Debugger performs a <strong>next operation</strong> over a subroutine that calls <code>longjmp</code> or throws a C++ exception (implemented by a call to <code>longjmp</code> internally), the subroutine does not return in the normal way because of the transfer of control within the function call.
            This is significant because the Debugger uses a temporary breakpoint just after the normal return address to implement the
            next operation. This is also true of step if there is no source available for the subroutine. When <code>longjmp</code> is called, this temporary breakpoint is bypassed because of the transfer of control, and execution can run away since the breakpoint will never be hit.
         </p>
         <p>This configuration option controls how MULTI attempts to properly catch unexpected transfers of control while stepping through
            code. Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><strong>Ignore/Run Away</strong> (<code>longjmpStepMode ignoreRunAway</code>) &#8212; [default] Allows the code to call <code>longjmp</code> without attempting to detect abnormal transfers of control.<br></li>
               <li><strong>Minimize Temp Stops</strong> (<code>longjmpStepMode minimizeTempStops</code>) &#8212; Fixes the problem in a way that does not cause temporary stops in <code>longjmp</code> as the process runs normally. This option inserts and removes a temporary breakpoint at <code>longjmp</code> for each next over a function call.<br></li>
               <li><strong>Maximize Step Speed</strong> (<code>longjmpStepMode maximizeStepSpeed</code>) &#8212; Fixes the problem in a way that minimizes the time it takes to do a next. This option leaves a permanent breakpoint at
                  <code>longjmp</code> and results in execution always halting due to a breakpoint being hit whenever the process calls <code>longjmp</code>&#8212;even during normal execution.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ServerTimeout">
         <p><strong>Debug server timeout in seconds</strong></p>
         <p>(<code>serverTimeout <var>seconds</var>
                                                      </code>) Specifies the number of seconds to wait for communication from a debug server before assuming it is dead and disconnecting
            from it.
         </p>
         <p>A timeout that is too low may cause a premature disconnect from the debug server, and is not recommended. A fairly high timeout
            can be useful for very slow debug servers or for debug servers that are being debugged. However, a high timeout can be frustrating
            if the debug server dies because the Debugger cannot accept input while it's waiting for communication from the debug server.
         </p>
         <p>The default is <code>15</code> seconds.
         </p>
      </div>
      <hr>
      <div id="cfg.ServerPollinterval">
         <p><strong>Interval to refresh Task Manager (in seconds)</strong></p>
         <p>(<code>serverPollinterval <var>seconds</var>
                                                      </code>) Specifies the polling interval in seconds. MULTI checks for interesting events happening in the underlying RTOS and refreshes
            the <strong>Task Manager</strong> periodically.
         </p>
         <p>The default is <code>1</code> second for INTEGRITY and <code>5</code> for other real-time operating systems.
         </p>
      </div>
      <hr>
      <div id="cfg.TaskMatchCriteria">
         <p><strong>Criteria to decide if a task is in a group</strong></p>
         <p>Controls how to match a task fingerprint against a task. For more information about how the fingerprint is used in the construction
            process of a task group, see Run-Mode Debugging.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Task Name</strong> (<code>taskMatchCriteria name</code>) &#8212; [default] Matches against the name of the task.<br></li>
               <li><strong>Task Identifier</strong> (<code>taskMatchCriteria id</code>) &#8212; Matches against the identifier of the task.<br></li>
               <li><strong>Task Name or Identifier</strong> (<code>taskMatchCriteria nameOrid</code>) &#8212; Matches against the name or identifier of the task.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.PromptQuitDebugger">
         <p><strong>Prompt when exiting Debugger</strong></p>
         <p>Controls whether a confirmation dialog box appears when a user attempts to close the Debugger. Permitted settings for this
            option are:
         </p>
         <p>
            <ul>
               <li><strong>Confirm If Process Started</strong> (<code>promptQuitDebugger normal</code>) &#8212; [default] The confirmation dialog box is displayed only if the Debugger is attached to a process that has been started.
                  If the Debugger is attached to a process that has not been started, the Debugger closes without displaying the confirmation
                  dialog box. In a run-mode debugging environment, the Debugger closes without displaying the confirmation dialog even though
                  the process has been started.<br></li>
               <li><strong>Always Confirm</strong> (<code>promptQuitDebugger always</code>) &#8212; The Debugger will not close until the user confirms the action in the confirmation dialog box.<br></li>
               <li><strong>Never Confirm</strong> (<code>promptQuitDebugger never</code>) &#8212; The Debugger never displays the confirmation dialog box before closing.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.MaxContainerDisplaySize">
         <p><strong>Maximum size for container display</strong></p>
         <p>(<code>maxContainerDisplaySize <var>num</var>
                                                      </code>) Sets the maximum number of elements initially displayed when a container is viewed in a Data Explorer.
         </p>
         <p>The default <code>
                                                         <var>num</var>
                                                      </code> is 20.
         </p>
      </div>
      <hr>
      <div id="cfg.ContainerSizeIncrement">
         <p><strong>Increment to maximum container size</strong></p>
         <p>(<code>containerSizeincrement <var>num</var>
                                                      </code>) Sets the number of elements to add when expanding a container that is being viewed in a Data Explorer.
         </p>
         <p>The default <code>
                                                         <var>num</var>
                                                      </code> is 10.
         </p>
      </div>
      <hr>
      <div id="cfg.AllowExecutionInBpCommand">
         <p></p>
         <p>
            <ul>
               <li><code>on</code> &#8212; Stepping and execution of command line procedure calls are allowed from within a breakpoint command. This is somewhat risky
                  because infinite breakpoint command recursion can occur if the execution from within the breakpoint command causes the same
                  or another breakpoint to be hit. The <code>resume</code> command is always allowed in a breakpoint command.<br></li>
               <li><code>off</code> &#8212; [default].<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AllowProcCallInExamine">
         <p></p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] Permits command line procedure calls during evaluation of an expression as part of an <code>examine</code> command. Clicking an expression in the Debugger's source pane automatically executes an <code>examine</code> command, so when this option is enabled (the default), clicking an expression can trigger a procedure call.<br></li>
               <li><code>off</code> &#8212; Disallows command line procedure calls during evaluation of an expression. When this option is disabled, clicking an expression
                  that involves a procedure call will result in a warning message.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AllowProcCallInOsaTask">
         <p></p>
         <p>
            <ul>
               <li><code>on</code> &#8212; Permits command line procedure calls via a freeze-mode connection to an operating system kernel in any context. This may
                  lead to overwritten register values and may only be safe if no code on your target uses floating-point registers, vector registers,
                  or other extended registers, or if your target CPU does not have these registers.<br></li>
               <li><code>off</code> &#8212; [default] Disallows command line procedure calls via a freeze-mode connection to an operating system kernel if MULTI detects
                  an executing task.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.BlockRun">
         <p></p>
         <p>
            <ul>
               <li><code>on</code> &#8212; Run/continue operations block subsequent commands until the run/continue operations have finished.<br></li>
               <li><code>off</code> &#8212; [default] Run/continue operations allow subsequent commands to execute before the run/continue operations have finished.
                  This can cause scripts that use run/continue commands to behave inconsistently.<br></li>
            </ul>
         </p>
         <p>See also Run Commands, Continue Commands, and the <code>blockStep</code> option.
         </p>
      </div>
      <hr>
      <div id="cfg.ClearButtons">
         <p></p>
         <p>Removes all the Debugger buttons (except for the <strong>Close Debugger</strong> button if it is present) so that you can create them from scratch with the <code>debugbutton</code> command (see 
            	
            	"Configuring and Customizing Toolbar Buttons"
            	in the <em>MULTI: Building Applications</em> book for your target) or the <strong>Customize Toolbar</strong> window (see Adding, Removing, and Rearranging Toolbar Buttons).
         </p>
      </div>
      <hr>
      <div id="cfg.CTextSize">
         <p></p>
         <p>Sets the maximum number of scroll back lines available in the <strong>Cmd</strong>, <strong>Trg</strong>, <strong>I/O</strong>, <strong>Srl</strong>, <strong>Py</strong>, and <strong>Tfc</strong> panes.
         </p>
         <p>If a MULTI session is in use for a long period of time, these panes can use a large amount of memory. Setting this option
            to a smaller value reduces memory usage, but also limits the number of available scroll back lines.
         </p>
         <p>The valid range for <code>
                                                      <var>num</var>
                                                   </code> is <code>10</code> &#8211; <code>10485760</code>. The default <code>
                                                      <var>num</var>
                                                   </code> is <code>10240</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.DebugButton">
         <p></p>
         <p>Lists the defined Debugger buttons. See also 
            	
            	"Configuring and Customizing Toolbar Buttons"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.DownloadWindow">
         <p></p>
         <p>The download window shows the current progress of a program download. Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] The download window will be used when downloading a program to the debug server.<br></li>
               <li><code>off</code> &#8212; The download window will not be used.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.EchoCommandsFromPlaybackFiles">
         <p></p>
         <p>
            <ul>
               <li><code>on</code> &#8212; When executing from a playback file, Debugger commands being executed will be displayed.<br></li>
               <li><code>off</code> &#8212; [default] When executing from a playback file, Debugger commands being executed will not be displayed.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.FormatStringMaxDepth">
         <p></p>
         <p>Limits the depth to which nested structs are displayed in a Data Explorer.</p>
         <p>The valid range for <code>
                                                      <var>num</var>
                                                   </code> is <code>1</code> &#8211; unlimited (<code>0x7fffffff</code>). The default <code>
                                                      <var>num</var>
                                                   </code> is <code>0x7fffffff</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.FormatStringMaxLength">
         <p></p>
         <p>Limits the length of the value displayed in each row of a Data Explorer. For example, if this is set to <code>2000</code>, only the first 2000 characters of a string will display, followed by <code>...</code> to indicate there are more characters that are not displayed. Data values displayed in a single row in a Data Explorer can
            be very long (when displaying a long string value or a structure with many nested structs, for example).
         </p>
         <p>The valid range for <code>
                                                      <var>num</var>
                                                   </code> is <code>1024</code> to 10 megabytes (<code>10485760</code>). The default <code>
                                                      <var>num</var>
                                                   </code> is <code>8192</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.Geometry">
         <p></p>
         <p>Sets the size and position of the Debugger window, where:</p>
         <p>
            <ul>
               <li><code>
                                                                     <var>width</var>
                                                                  </code> and <code>
                                                                     <var>height</var>
                                                                  </code> &#8212; Correspond to the pixel size of the Debugger window.<br></li>
               <li><code>
                                                                     <var>x_offset</var>
                                                                  </code> and <code>
                                                                     <var>y_offset</var>
                                                                  </code> &#8212; Are optional values that indicate the pixel offset at which the Debugger window appears from the top-left corner of the
                  screen for the <code>+</code> variant or from the bottom-right corner of the screen for the <code>-</code> variant. For example, the entry: <code>geometry 500x700+0+0</code> specifies a 500-pixel-wide by 700-pixel-high Debugger window that appears in the top-left corner of the screen.<br></li>
            </ul>
         </p>
         <p>The defaults depend on screen size and vary from system to system. The <code>
                                                      <var>width</var>
                                                   </code> is approximately wide enough to display 80 characters on a line.
         </p>
         <p>Changes to this option affect new Debugger windows, but not currently open windows.</p>
      </div>
      <hr>
      <div id="cfg.GlobalHeading">
         <p></p>
         <p>
            <ul>
               <li><code>on</code> &#8212; Enables the global scope entry in the Browse window.<br></li>
               <li><code>off</code> &#8212; [default] Disables global scope entry in the Browse window.<br></li>
            </ul>
         </p>
         <p>This option corresponds to the <strong>Tools</strong><b>--&gt;</b><strong>Global Scope On/Off</strong> menu item in the Browse window. See Headings in the Procedures Browse Window.
         </p>
         <p>All MULTI tools opened during the current MULTI session are notified of changes to this option. For more information, see
            
            	
            	"Propagating Configuration Settings"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
         <p>Changes to <code>globalHeading</code> affect new Browse windows, but not currently open windows.
         </p>
      </div>
      <hr>
      <div id="cfg.GotoHitsBpAtTargetAddress">
         <p></p>
         <p>
            <ul>
               <li><code>on</code> &#8212; If you are using the Debugger command <code>g</code>, any breakpoint at the destination will be hit as soon as execution begins at the new location. <br>This option also controls whether a breakpoint set on the first instruction of a procedure called from the command line is
                  hit.<br></li>
               <li><code>off</code> &#8212; [default] The breakpoint will not be hit.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.History">
         <p></p>
         <p>This option specifies how many commands to remember for the Debugger command history mechanism. For more information, see
            History Commands.
         </p>
         <p>The default <code>
                                                      <var>num</var>
                                                   </code> is <code>256</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.iconGeometry">
         <p></p>
         <p>Linux/Solaris only</p>
         <p>Specifies the dimensions (ignored by some window managers) for the icon that is used when the Debugger is minimized, where:</p>
         <p>
            <ul>
               <li><code>
                                                                     <var>width</var>
                                                                  </code> and <code>
                                                                     <var>height</var>
                                                                  </code> &#8212; Are the width and height of the icon in pixels.<br></li>
               <li><code>
                                                                     <var>x_offset</var>
                                                                  </code> and <code>
                                                                     <var>y_offset</var>
                                                                  </code> &#8212; Specify the number of pixels that the icon should be offset from the top-left corner of the screen.<br></li>
            </ul>
         </p>
         <p>The defaults are <code>32x64+0+0</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.implicitEvalEcho">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] The value of an expression is echoed when the expression is entered into the command pane.<br></li>
               <li><code>off</code> &#8212; The value of an expression is not echoed when the expression is entered into the command pane.<br></li>
            </ul>
         </p>
         <p><strong>Note:</strong> This option affects expression evaluation in the <code>%EVAL{<var>commands</var>}</code> sequence used with the <code>substitute</code> command.
         </p>
      </div>
      <hr>
      <div id="cfg.interleavedOutput">
         <p></p>
         <p>Controls whether output from Debugger panes other than the command pane (<strong>Cmd</strong>) will also be output to the command pane. Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] Output from Debugger panes other than the command pane will be output to the command pane. For example, <strong>I/O</strong> pane output will show up in the command pane with the prefix <strong>I/O:</strong>.<br></li>
               <li><code>off</code> &#8212; Output from other panes will not appear in the command pane.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.LinesNonOverlapped">
         <p></p>
         <p>By default, when the Debugger opens a Data Explorer or monitor window with <code>useWmPositioning off</code>, the new window is stacked on top of previous windows to save screen space. This option leaves the top <code>
                                                      <var>num</var>
                                                   </code> lines of the previous window visible.
         </p>
         <p>The default <code>
                                                      <var>num</var>
                                                   </code> is <code>4</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.OSAExplorerRefreshTargetList">
         <p></p>
         <p>Controls whether all OSA tasks appear in the target list. Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] Displays all OSA tasks in the target list when the <strong>OSA Explorer</strong> is open.<br></li>
               <li><code>off</code> &#8212; Does not display all OSA tasks in the target list. A subset of OSA tasks may appear if accessed by the trace analysis tools.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.OSASwitchToUserTaskAutomatically">
         <p></p>
         <p>Controls whether the Debugger automatically displays the currently executing user-mode task when the kernel is stopped while
            executing user-mode tasks. (This is in addition to automatically displaying all of the tasks in the system as controlled by
            the <code>osaTaskAutoAttachLimit</code> configuration option.)
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] Automatically displays the currently executing user-mode task.<br></li>
               <li><code>off</code> &#8212; Does not display the currently executing user-mode task.<br></li>
            </ul>
         </p>
         <p>See also Debugging in Freeze Mode.</p>
      </div>
      <hr>
      <div id="cfg.OSATaskAutoAttachLimit">
         <p></p>
         <p>Specifies the maximum number of OSA tasks to display in the Debugger target list.</p>
         <p>If the tasks have been loaded from trace data and the number of tasks exceeds this limit, one task per AddressSpace is displayed
            in the target list. For information about manually displaying additional tasks loaded from trace, see Saving and Loading a Trace Session.
         </p>
         <p>If the tasks are not loaded from trace, they are displayed consecutively until this limit is reached. For example, if <code>
                                                      <var>num</var>
                                                   </code> is set to 32 and there are 33 tasks, the 33rd task is not displayed in the target list. For information about manually displaying additional tasks that have not been loaded
            from trace, see Debugging in Freeze Mode.
         </p>
         <p>The default <code>
                                                      <var>num</var>
                                                   </code> is <code>32</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.PaddedHex">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; Forces hex values to be displayed padded to their full width with zeros. For example, a four-byte variable with a value
                  of <code>0x8</code> is displayed as <code>0x00000008</code>.<br></li>
               <li><code>off</code> &#8212; [default] Hex values are displayed as entered.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.PrepareAllCores">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; When you prepare a single core of a multi-core target (for example, via the <code>prepare_target</code> command), MULTI automatically prepares each remaining core as if you had run <code>prepare_target -verify=none</code> on the executable associated with it. (This is equivalent to choosing the <strong>Prepare Target</strong> dialog option <strong>Program already present on target. Verify: Not at all</strong> for each remaining core.) For more information, see Preparing Multiple Cores to Run a Single Executable.<br>See also the <code>-allcores</code> option to the <code>prepare_target</code> command.<br></li>
               <li><code>off</code> &#8212; [default] Each core of a multi-core target is treated independently when you prepare the target.<br>See also the <code>-onecore</code> option to the <code>prepare_target</code> command.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ProcQualifiedLocalimpliesOutermostBlock">
         <p></p>
         <p>When the current line pointer is in an inner block of a procedure and that inner block defines a variable that has the same
            name as a variable in the outer block, a procedure qualified reference to the name of the variable can either refer to the
            variable of that name in the outermost block or to the variable of that name in the current inner block. This option determines
            which of the two variables is used. Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><code>on</code> &#8212; The variable in the outermost block is used.<br></li>
               <li><code>off</code> &#8212; [default] The variable in the current inner block is used.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.QuietTogCmd">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; The <code>tog</code> command does not echo the status of the breakpoint(s) it toggles.<br>See also the <code>q</code> option for the <code>tog</code> command.<br></li>
               <li><code>off</code> &#8212; [default].<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.RecordCommentedCommandsFromMacros">
         <p></p>
         <p>When command recording is enabled, commands executed from playback files are recorded as comments. This option controls whether
            commands executed from macros are also recorded as comments. Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><code>on</code> &#8212; Commands executed from macros are recorded as comments.<br></li>
               <li><code>off</code> &#8212; [default] Commands executed from macros are not recorded as comments.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.RunRCScripts">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] Runs global, user, command line, and program script files (<strong>.rc</strong>) when a new program is debugged.<br></li>
               <li><code>off</code> &#8212; Only runs command line script files (that is, those explicitly specified on the command line with <code>-rc</code>) when a new program is debugged. This setting is equivalent to the <code>-norc</code> command line option. See also the <code>-rc</code> and <code>-norc</code> command line options.<br></li>
            </ul>
         </p>
         <p>For information about <strong>.rc</strong> script files, see 
            	
            	"Using Script Files"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.SetBPAtAdrinitWhenExecing">
         <p></p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] MULTI sets a breakpoint at the starting routine of a program when the process is run. Execution is resumed automatically
                  when this breakpoint is hit unless a user breakpoint was set at the same spot. This is necessary to prevent corrupted call
                  stack traces.<br></li>
               <li><code>off</code> &#8212; MULTI does not set a breakpoint at the starting routine of a program when the process is run.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.SharedSymbols">
         <p></p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] MULTI attempts to debug shared objects.<br></li>
               <li><code>off</code> &#8212; MULTI does not attempt to debug shared objects.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ShellConfirm">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] On Linux/Solaris, and if MULTI is running in the background, the <code>shell</code> command opens a dialog box that allows you to confirm or cancel execution of the shell command. This is helpful when MULTI
                  is running in the background because shell commands have no accessible standard output or standard error.<br>On Windows, the command window waits to be dismissed after running the shell command.<br></li>
               <li><code>off</code> &#8212; On Linux/Solaris, MULTI always executes shell commands immediately, without opening the dialog box.<br>On Windows, the command window exits immediately after running the shell command.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.SilentlyReloadSymbols">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; The Debugger automatically kills any existing process and reloads the symbols without displaying a dialog box. This is
                  useful if you are using a Debugger primarily to examine symbols and not to debug running processes.<br></li>
               <li><code>off</code> &#8212; [default] When the executable open in the Debugger changes, the Debugger displays a dialog box asking if any existing process
                  should be killed and the symbols reloaded.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.StepToBpIgnoresResumeInBpCmd">
         <p></p>
         <p>Controls whether the <code>c</code> (continue) command in a breakpoint is ignored during a single-step operation (but not during a run operation).
         </p>
         <p><strong>Note:</strong> This option determines whether a continue command is ignored, not a resume command.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; MULTI ignores the <code>c</code> command in the breakpoint command list, prints a warning, and stops the process at the breakpoint.<br></li>
               <li><code>off</code> &#8212; [default] MULTI does not ignore the <code>c</code> command in the breakpoint command list. For example, if you have a breakpoint with the command list <code>print x; c</code> and you step on to this breakpoint, the process starts running because the <code>c</code> command causes the process to continue. The <code>c</code> command inside a breakpoint always causes the process to start running, which is incorrect behavior if you want to step on
                  to that line.<br>Note that the <code>resume</code> command should be used inside breakpoint command lists. If the breakpoint's command list is <code>print x; resume</code>, the process stops when you step on to the breakpoint. If the process runs and hits the breakpoint, it will keep running
                  (the process resumes whatever it was going to do before hitting the breakpoint). <br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.TargetWindowSwitchViewOnBPHit">
         <p></p>
         <p>Controls whether the Debugger automatically switches to a task that is not currently selected in the target list when a breakpoint
            is hit in that task. Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] When a breakpoint is hit in a task that is not currently selected in the target list, the Debugger automatically
                  switches to that task if no other Debugger window is open on it and if the currently selected task is not halted. Switching
                  occurs for both software and hardware breakpoints.<br></li>
               <li><code>off</code> &#8212; The Debugger does not automatically switch to a task when a breakpoint is hit in that task.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.TBFunctionNormalBG">
         <p></p>
         <p></p>
         <p>Specifies the background color (commands end with <code>Bg</code>) or foreground color (commands end with <code>Fg</code>) for Tree Browser displays, where:
            
            <ul>
               <li><code>
                                                                     <var>Type</var>
                                                                  </code> is one of the following:<br><ul>
                     <li><code>FunctionNormal</code> (<code>tbFunctionNormalBg</code> and <code>tbFunctionNormalFg</code>) &#8212; Functions displayed in the static call Tree Browser which have debugging information.<br></li>
                     <li><code>FunctionNoinfo</code> (<code>tbFunctionNoinfoBg</code> and <code>tbFunctionNoinfoFg</code>) &#8212; Functions displayed in the static call Tree Browser which do not have debugging information.<br></li>
                     <li><code>FunctionRecursive</code> (<code>tbFunctionRecursiveBg</code> and <code>tbFunctionRecursiveFg</code>) &#8212; Functions displayed in the static call Tree Browser that may be recursive.<br></li>
                     <li><code>FunctionAdrTaken</code> (<code>tbFunctionAdrTakenBg</code> and <code>tbFunctionAdrTakenFg</code>) &#8212; Nodes representing the possibility of calls to a function through function pointer in a Tree Browser.<br></li>
                     <li><code>DynNormal</code> (<code>tbDynNormalBg</code> and <code>tbDynNormalFg</code>) &#8212; Functions displayed in the dynamic call Tree Browser with debugging information.<br></li>
                     <li><code>DynNoinfo</code> (<code>tbDynNoinfoBg</code> and <code>tbDynNoinfoFg</code>) &#8212; Functions displayed in the dynamic call Tree Browser without debugging information.<br></li>
                     <li><code>FileNormal</code> (<code>tbFileNormalBg</code> and <code>tbFileNormalFg</code>) &#8212; Files displayed in the file call Tree Browser with debugging information.<br></li>
                     <li><code>FileNoinfo</code> (<code>tbFileNoinfoBg</code> and <code>tbFileNoinfoFg</code>) &#8212; Files displayed in the file call Tree Browser without debugging information.<br></li>
                     <li><code>ClassUnion</code> (<code>tbClassUnionBg</code> and <code>tbClassUnionFg</code>) &#8212; Unions displayed in the class Tree Browser.<br></li>
                     <li><code>ClassStruct</code> (<code>tbClassStructBg</code> and <code>tbClassStructFg</code>) &#8212; Types displayed in the class Tree Browser with debugging information.<br></li>
                     <li><code>ClassNoinfo</code> (<code>tbClassNoinfoBg</code> and <code>tbClassNoinfoFg</code>) &#8212; Types displayed in the class Tree Browser without debugging information.<br></li>
                     <li><code>ClassClass</code> (<code>tbClassClassBg</code> and <code>tbClassClassFg</code>) &#8212; Class data types displayed in the class Tree Browser.<br></li>
                     <li><code>ClassEnum</code> (<code>tbClassEnumBg</code> and <code>tbClassEnumFg</code>) &#8212; Enum data types displayed in the class Tree Browser.<br></li>
                  </ul>
               </li>
               <li><code>Bg</code> or <code>Fg</code> &#8212; Specifies whether you are changing the background or foreground color of the displayed items.<br></li>
               <li><code>
                                                                     <var>color</var>
                                                                  </code> &#8212; Specifies the new color in RGB format. For more information, see 
                  	
                  	"Colors Configuration Options"
                  	in the <em>MULTI: Building Applications</em> book for your target.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ViewDef">
         <p></p>
         <p>Specifies how data will be displayed in Data Explorers, where:
            
            <ul>
               <li><code>
                                                                     <var>number_option</var>
                                                                  </code> can be one of the following:<br><ul>
                     <li><code>NaturalOrHex</code> &#8212; Numbers display in their default states unless <code>hexMode on</code> is set (see 
                        	
                        	"The Debugger Options Tab"
                        	in the <em>MULTI: Building Applications</em> book for your target).<br></li>
                     <li><code>Natural</code> &#8212; Numbers display in their default states.<br></li>
                     <li><code>Hex</code>, <code>Dec</code>, <code>Oct</code>, or <code>Binary</code> &#8212; Numbers and characters display in base 16, base 10, base 8, or base 2 notation, respectively.<br></li>
                  </ul>
               </li>
               <li><code>
                                                                     <var>eval_option</var>
                                                                  </code> specifies how the Debugger re-evaluates expressions when updating Data Explorers, and can be one of the following:
                  
                  <ul>
                     <li><code>ReEvaluate</code> &#8212; Each expression is re-evaluated in the same context as when the Data Explorer displaying it was first created.<br></li>
                     <li><code>ReEvalContext</code> &#8212; Expressions are re-evaluated within the current procedure at the top of the call stack.<br></li>
                     <li><code>ReEvalinGlobal</code> &#8212; When expressions are re-evaluated, only looks for variables in the global scope.<br></li>
                     <li><code>UseAddress</code> &#8212; Uses last valid address of variables being displayed.<br></li>
                  </ul><br></li>
               <li><code>
                                                                     <var>other_options</var>
                                                                  </code> can include any of the options listed below. (Prepending an option with a dash (<code>-</code>) disables the behavior.)<br><ul>
                     <li><code>ShowAddress</code> &#8212; Displays the address (rather than name) of the variable.<br></li>
                     <li><code>ShowFType</code> &#8212; Shows the type of each variable, class, or structure.<br></li>
                     <li><code>Alternate</code> &#8212; Displays data in an alternative format, if available.<br></li>
                     <li><code>PadHex</code> &#8212; Adds zeros to the left of hexadecimal numbers to maintain same bit width, as needed. (Otherwise, only non-zero hexadecimal
                        digits display.)<br></li>
                     <li><code>ShowBases</code> &#8212; Displays the base classes of a C++ class along with a derived instance.<br></li>
                     <li><code>ShowAllFields</code> &#8212; Displays all the fields of a complicated structure.<br></li>
                     <li><code>ShowDerived</code> &#8212; Determines the most derived C++ class type of the current object and redisplays the object cast to that type.<br></li>
                     <li><code>ExpandValue</code> &#8212; Displays the value in memory (if in readable memory) that a pointer references.<br></li>
                     <li><code>ExpandComplexMemberValue</code> &#8212; Displays arrays and structures (if in readable memory) that a pointer references. This options has no effect if <code>ExpandValue</code> is disabled.<br></li>
                     <li><code>OpenPointer</code> &#8212; Dereferences all pointers.<br></li>
                     <li><code>ShowChanges</code> &#8212; Highlights values that have changed.<br></li>
                  </ul>
               </li>
            </ul>
         </p>
         <p>The defaults are <code>NaturalOrHex ReEvalContext -ShowAddress -ShowFType -Alternate -PadHex ShowBases -ShowAllFields ShowDerived ExpandValue ExpandComplexMemberValue
               OpenPointer ShowChanges</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.WarnOnBpReplacement">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; The Debugger displays a warning before replacing a pre-existing breakpoint with a new breakpoint. This can help prevent
                  the accidental loss of breakpoints with long command lists.<br></li>
               <li><code>off</code> &#8212; [default] The Debugger does not warn you before replacing a pre-existing breakpoint.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.WarnOnCmdAdrLinePromotion">
         <p></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; The Debugger displays a warning when setting a breakpoint on a line with no corresponding assembly code.<br></li>
               <li><code>off</code> &#8212; [default].<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.OpenFilesInNewBuffers">
         <p><strong>Reuse editor windows</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>openFilesinNewBuffers on</code>) &#8212; The first file opened from a MULTI executable such as the Project Manager or Debugger opens in a new Editor window. Subsequently
                  opened files reuse the Editor window initially opened from the MULTI executable.<br></li>
               <li><strong>Cleared</strong> (<code>openFilesinNewBuffers off</code>) &#8212; [default] Every file opens in a new Editor window.<br></li>
            </ul>
         </p>
         <p>All MULTI tools opened during the current MULTI session are notified of changes to this option. For more information, see
            
            	
            	"Propagating Configuration Settings"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.EditorBackups">
         <p><strong>Create backup files when saving</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>editorBackups on</code>) &#8212; A backup of the on-disk version of a file will automatically be created before saving over it. The backup file has the
                  same name as the original file, with a tilde (<code>~</code>) appended to it.<br></li>
               <li><strong>Cleared</strong> (<code>editorBackups off</code>) &#8212; [default] Backup files will not be created.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AllowMiddleClick">
         <p><strong>Allow middle click to paste</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>allowMiddleClick on</code>) &#8212; [default for Linux/Solaris] Clicking the middle mouse button will have the same effect as pasting from the selection buffer.<br></li>
               <li><strong>Cleared</strong> (<code>allowMiddleClick off</code>) &#8212; [default for Windows] Clicking the middle mouse button will not paste from the clipboard.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.TabsAreSpaces">
         <p><strong>Enter spaces in place of tabs</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>tabsAreSpaces on</code>) &#8212; Tab characters entered into an Editor window will be replaced by an appropriate number of space characters in the Editor buffer,
                  regardless of whether the Tab is the result of pressing Tab, entering a <code>paste</code> command, or auto indenting in the Editor.<br></li>
               <li><strong>Cleared</strong> (<code>tabsAreSpaces off</code>) &#8212; [default] Space characters are not inserted in place of Tab characters.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.DragAndDrop">
         <p><strong>Drag and drop text editing</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>dragAndDrop on</code>) &#8212; Text can be moved in the Editor by selecting a block of text and dragging the mouse to a new location.<br></li>
               <li><strong>Cleared</strong> (<code>dragAndDrop off</code>) &#8212; [default] Text cannot be moved by dragging the mouse.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AllowOvertypeMode">
         <p><strong>Allow overtype mode</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>allowOvertypeMode on</code>) &#8212; Allows switching between insert and overtype mode.<br></li>
               <li><strong>Cleared</strong> (<code>allowOvertypeMode off</code>) &#8212; [default] Does not allow switching between insert and overtype mode.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.TabSize">
         <p><strong>Tab size</strong></p>
         <p>(<code>tabSize <var>spaces</var>
                                                   </code>) Specifies the number of spaces used to display a Tab in the Editor. The default is <code>8</code> spaces.
         </p>
      </div>
      <hr>
      <div id="cfg.EditIndent">
         <p><strong>Indent size</strong></p>
         <p>(<code>editindent <var>spaces</var>
                                                   </code>) Specifies the number of spaces in an indentation. The default is <code>4</code> spaces.
         </p>
      </div>
      <hr>
      <div id="cfg.EditSomeSize">
         <p><strong>Ctrl+cursor jump size</strong></p>
         <p>(<code>editSomeSize <var>num</var>
                                                   </code>) Specifies the value used by the <code>UpSome</code>, <code>DownSome</code>, <code>LeftSome</code>, and <code>RightSome</code> Editor commands. For information about these commands, see 
            	
            	"Navigation Commands"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
         <p>The default <code>
                                                      <var>num</var>
                                                   </code> is <code>5</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.editbuttonconfig">
         <p><strong>Configure Editor Buttons</strong></p>
         <p>Opens the <strong>Configure Editor Buttons</strong> dialog box, which allows you to edit the Editor buttons using the same format as the <code>editbutton</code> command. The dialog box lists currently defined buttons on the left, and available icons on the right.
         </p>
      </div>
      <hr>
      <div id="cfg.AiImplicitIndent">
         <p><strong>Auto indent as you type</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>aiimplicitindent on</code>) &#8212; [default] The Editor automatically indents the file as you type.<br></li>
               <li><strong>Cleared</strong> (<code>aiimplicitindent off</code>) &#8212; The Editor will not automatically indent your file.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AiImplicitOnlyAtInitial">
         <p><strong>Only auto indent when typing first character in line</strong></p>
         <p>Controls auto indentation. This configuration option only takes effect if <code>Auto indent as you type</code> is selected.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>aiimplicitOnlyAtinitial on</code>) &#8212; [default] The MULTI Editor only automatically indents a line when the first typed character (includes space characters)
                  is an auto-indent character. See 
                  	
                  	"Auto-Indent Characters"
                  	in the <em>MULTI: Building Applications</em> book for your target.<br></li>
               <li><strong>Cleared</strong> (<code>aiimplicitOnlyAtinitial off</code>) &#8212; The MULTI Editor automatically makes indenting adjustments when you type auto-indent characters, regardless of where they
                  appear on the line.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AiImplicitIndentInComments">
         <p><strong>Auto indent comments as you type</strong></p>
         <p>Controls auto indentation in comments. This configuration option only takes effect if <code>Auto indent as you type</code> is selected.
         </p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>aiimplicitindentinComments on</code>) &#8212; [default] Comments will be indented when auto indenting multiple lines.<br></li>
               <li><strong>Cleared</strong> (<code>aiimplicitindentinComments off</code>) &#8212; Comments are not modified unless you auto indent a single line.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AiSwitchInTwo">
         <p><strong>Double indent size when indenting body of switch</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>aiSwitchinTwo on</code>) &#8212; [default] For C or C++ source files, switch bodies are indented two levels so that case labels are indented one level
                  from the switch. For Ada source files, select bodies are indented two levels so that labels are indented one level from the
                  select.<br></li>
               <li><strong>Cleared</strong> (<code>aiSwitchinTwo off</code>) &#8212; For C or C++ source files, the case labels are even with the switch. For Ada source files, the labels are even with the
                  select.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AiTouchComments">
         <p><strong>Indent comments when indenting multiple lines</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>aiTouchComments on</code>) &#8212; [default] Comments are indented when auto indenting multiple lines.<br></li>
               <li><strong>Cleared</strong> (<code>aiTouchComments off</code>) &#8212; Comments are only indented if you auto indent a single line.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AiCommentsStayFlushLeft">
         <p><strong>Comments stick flush left</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>aiCommentsStayFlushLeft on</code>) &#8212; [default] All comments will be kept directly on the left margin.<br>To indent a comment that is stuck to the left margin while this option is selected, insert a space just before the start of
                  the comment, then auto indent the comment.<br>To move a comment to the left margin, regardless of the position where the comment started, insert a number sign (<code>#</code>) as the first character of a comment. For example, if you are coding in C, type: <code>/*#</code> and the comment is automatically moved to the left margin.<br></li>
               <li><strong>Cleared</strong> (<code>aiCommentsStayFlushLeft off</code>) &#8212; Indents will be applied to comments.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AiCharsLikeStarInComment">
         <p><strong>C chars aligned like '*' in comments</strong></p>
         <p>(<code>aiCharsLikeStarinComment <var>char_string</var>
                                                   </code>) Allows characters other than asterisks (<code>*</code>) to line up in comments as if they were asterisks. The default <code>
                                                      <var>char_string</var>
                                                   </code> is <code>-</code> (dash).
         </p>
         <p>The default setting allows correct automatic indentation of comments that have a column of <code>-</code> (dashes) down the left side, lined up under the <code>*</code> in the <code>/*</code> sequence. To have characters other than asterisks (<code>*</code>) line up in comments as if they were asterisks, make them part of the <code>
                                                      <var>char_string</var>
                                                   </code>.
         </p>
      </div>
      <hr>
      <div id="cfg.AiParenIndentMode">
         <p><strong>C paren indent mode</strong></p>
         <p>Controls how the Editor indents a line in a C/C++ source file if it starts within an open parenthesis/close parenthesis pair.
            Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><strong>Even with parentheses</strong> (<code>aiParenindentMode evenWithParen</code>) &#8212; If there is a non-whitespace character between the open parenthesis and the end of its line, the lines enclosed in parentheses
                  start at the same column as that character. Otherwise, the lines enclosed in parentheses start in the column just after the
                  open parenthesis. For example:<br><br><pre>void foo (void)
{
    bar(
        argument_one,
        argument_two
        );
}</pre><br><br></li>
               <li><strong>Indent in two</strong> (<code>aiParenindentMode indentinTwo</code>) &#8212; [default] Lines enclosed in parentheses start two indent levels in from the line that contains the open parenthesis. For
                  example:<br><br><pre>void foo (void)
{
    bar(
            argument_one,
            argument_two
            );
}</pre><br><br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AiAdaParenIndentMode">
         <p><strong>Ada paren mode</strong></p>
         <p>Controls how the Editor indents a line in an Ada source file if it starts within an open parenthesis/close parenthesis pair.
            Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><strong>Even with parentheses</strong> (<code>aiAdaParenindentMode evenWithParen</code>) &#8212; [default] If there is a non-whitespace character between the open parenthesis and the end of its line, the lines enclosed
                  in parentheses start at the same column as that character. Otherwise, the lines enclosed in parentheses start in the column
                  just after the open parenthesis.<br></li>
               <li><strong>Indent in two</strong> (<code>aiAdaParenindentMode indentinTwo</code>) &#8212; The lines enclosed in parentheses start two indent levels in from line that contains the open parenthesis.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.EditPrint2Column">
         <p><strong>Print 2 columns if landscape orientation is selected</strong></p>
         <p>Windows only</p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>editPrint2Column on</code>) &#8212; The Editor prints files with two columns per sheet if landscape orientation is selected.<br></li>
               <li><strong>Cleared</strong> (<code>editPrint2Column off</code>) &#8212; [default] The Editor prints one column per sheet.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.TempFileDir">
         <p><strong>Temp file directory</strong></p>
         <p>(<code>tempFileDir <var>dirpath</var>
                                                      </code>) Specifies the directory where MULTI stores its temporary files. The default is blank, which has the following results:
         </p>
         <p>
            <ul>
               <li>Windows &#8212; Uses the values of the <code>TMP</code> or <code>TEMP</code> environment variables and defaults to the current directory if those variables are not set.<br></li>
               <li>Linux/Solaris &#8212; Uses the values of the <code>TMPDIR</code> or <code>TEMP</code> environment variables and defaults to <strong>/tmp</strong> if those variables are not set.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.EditWidth">
         <p><strong>Initial width in characters</strong></p>
         <p>(<code>editWidth <var>width</var>
                                                      </code>) Specifies the initial width of Editor windows in characters.
         </p>
         <p>This option is only useful when <strong>Save window positions and sizes</strong> is cleared (<code>rememberWindowPositions off</code>). See the <strong>Save window positions and sizes</strong> option in 
            	
            	"The General Options Tab"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
         <p>The default <code>
                                                         <var>width</var>
                                                      </code> is <code>80</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.EditHeight">
         <p><strong>Initial height in characters</strong></p>
         <p>(<code>editHeight <var>height</var>
                                                      </code>) Specifies the initial height of Editor windows in characters.
         </p>
         <p>This option is only useful when <strong>Save window positions and sizes</strong> is cleared (<code>rememberWindowPositions off</code>). See the <strong>Save window positions and sizes</strong> option in 
            	
            	"The General Options Tab"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
         <p>The default <code>
                                                         <var>height</var>
                                                      </code> is <code>32</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.SelectionMarginWidth">
         <p><strong>Selection margin width in pixels</strong></p>
         <p>(<code>selectionMarginWidth <var>num</var>
                                                      </code>) Specifies the width of the left margin in the Editor in pixels. If the width is <code>0</code>, the left margin does not appear and entire lines of text can no longer be selected by using the margin. Changing the selection
            margin width only affects new Editor windows. The default <code>
                                                         <var>num</var>
                                                      </code> is <code>13</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.EditIncrFrequency">
         <p><strong>Generate auto-recover file every x seconds</strong></p>
         <p>(<code>editincrFrequency <var>num</var>
                                                      </code>) Specifies the number of seconds between generation of auto-recover files.
         </p>
         <p>The Editor will create an auto-recover file every <code>
                                                         <var>num</var>
                                                      </code> seconds as you edit. If the power goes out or the Editor crashes, the next time you open the same file, you will be given
            the option to re-apply the edits saved in the auto-recover file.
         </p>
         <p>The default <code>
                                                         <var>num</var>
                                                      </code> is <code>120</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.AdaIndentSize">
         <p><strong>Spaces per indent for Ada</strong></p>
         <p>(<code>adaindentSize <var>num</var>
                                                      </code>) Specifies the number of spaces in an indentation for Ada files. The default <code>
                                                         <var>num</var>
                                                      </code> is <code>3</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.AdaContinuationSize">
         <p><strong>Ada continuation line indent</strong></p>
         <p>(<code>adaContinuationSize <var>num</var>
                                                      </code>) Specifies the number of spaces in an indentation for a continuation line in Ada files. The default <code>
                                                         <var>num</var>
                                                      </code> is <code>2</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.WordWrap">
         <p><strong>Word wrap</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>wordWrap on</code>) &#8212; If lines are longer than the wrapping width, the Editor will automatically split lines on word boundaries as you type.<br></li>
               <li><strong>Cleared</strong> (<code>wordWrap off</code>) &#8212; [default] Lines will not wrap.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.WrapColumn">
         <p><strong>Wrap column</strong></p>
         <p>(<code>wrapColumn <var>width</var>
                                                      </code>) When <strong>Word wrap</strong> is selected (<code>wordWrap on</code>), <code>
                                                         <var>width</var>
                                                      </code> specifies the last column a character can occupy before the Editor wraps to the next line.
         </p>
         <p>The default <code>
                                                         <var>width</var>
                                                      </code> is <code>79</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.Wrapindent">
         <p><strong>Wrap indent offset</strong></p>
         <p>(<code>wrapindent <var>num</var>
                                                      </code>) When a word wraps to the next line, the word is automatically indented <code>
                                                         <var>num</var>
                                                      </code> extra spaces from where it would normally appear. The default <code>
                                                         <var>num</var>
                                                      </code> is <code>2</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.FillParagraphColumn">
         <p><strong>Fill paragraph column</strong></p>
         <p>(<code>fillParagraphColumn <var>num</var>
                                                      </code>) Specifies the column at which each line will be wrapped when using CtrlShiftA to reformat comments.
         </p>
         <p>The default <code>
                                                         <var>num</var>
                                                      </code> is <code>79</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.AutoGrabHeadFiles">
         <p></p>
         <p>Controls whether the MULTI Editor automatically grabs function prototypes from a source file's <strong>include</strong> files when the source file is loaded.
         </p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] The MULTI Editor automatically grabs function prototypes when opening source files. This setting enables auto-completion
                  of function names.<br></li>
               <li><code>off</code> &#8212; The MULTI Editor does not grab function prototypes when opening source files. This setting is recommended if you notice
                  poor performance when this option is enabled.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ClearEditButtons">
         <p></p>
         <p>Removes all Editor buttons so they can be created from scratch with the <code>editbutton</code> command.
         </p>
      </div>
      <hr>
      <div id="cfg.DrawWrapLine">
         <p></p>
         <p>Specifies whether or not to draw the wrap line in the MULTI Editor. Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><code>on</code> &#8212; [default] Enables the wrap line.<br></li>
               <li><code>off</code> &#8212; Disables the wrap line.<br></li>
               <li><code>asWordWrap</code> &#8212; Enables the wrap line if word wrap is enabled.<br></li>
            </ul>
         </p>
         <p>This option does the same thing as the Editor command <code>DrawWrapLine</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.EditParenMatch">
         <p></p>
         <p>Every time you type a right parenthesis, right square bracket, or right curly brace, the Editor briefly selects the matching
            one. The Editor will pause on this highlight of the previous match for <code>
                                                      <var>time</var>
                                                   </code> tenths of a second. A value of <code>0</code> (zero) will disable matching. The default <code>
                                                      <var>time</var>
                                                   </code> is <code>10</code>.
         </p>
      </div>
      <hr>
      <div id="cfg.SaveCommandHistory">
         <p><strong>Save command history between sessions</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>saveCommandHistory on</code>) &#8212; [default] The command history for each executable will be saved. If the executable has not been debugged before, it will
                  have no previous command history.<br></li>
               <li><strong>Cleared</strong> (<code>saveCommandHistory off</code>) &#8212; The command history will not be saved.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.SaveViewWindows">
         <p><strong>Save data explorers between sessions</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>saveViewWindows on</code>) &#8212; Saves all variables being viewed in Data Explorers between MULTI sessions on the same executable. When restored, the variables
                  are all added to one Data Explorer, or each is added to a different Data Explorer as dictated by the <strong>Reuse Data Explorer</strong> option.<br></li>
               <li><strong>Cleared</strong> (<code>saveViewWindows off</code>) &#8212; [default] Data Explorer content is not saved.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.SaveRunArguments">
         <p><strong>Save arguments between sessions</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>saveRunArguments on</code>) &#8212; [default] Saves the last arguments supplied to run the target program between MULTI sessions on the same executable. To
                  run the executable with no arguments, use the <code>R</code> command.<br></li>
               <li><strong>Cleared</strong> (<code>saveRunArguments off</code>) &#8212; Arguments are not saved.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.SaveDebuggerWindowPos">
         <p><strong>Save debugger window position</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>saveDebuggerWindowPos on</code>) &#8212; Saves and restores the size and position of the MULTI Debugger window on a per executable basis. Note that the Debugger
                  window is only sized and positioned on window creation, so debugging a different executable from an already opened MULTI will
                  not have any effect.<br></li>
               <li><strong>Cleared</strong> (<code>saveDebuggerWindowPos off</code>) &#8212; [default] Debugger window position will not be saved.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.RememberBreakpoints">
         <p><strong>Remember software breakpoints</strong></p>
         <p>Determines whether the Debugger remembers software breakpoints (including shared object breakpoints) that you have set for
            a program the next time you debug the same program. Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><strong>Never</strong> (<code>rememberBreakpoints never</code>) &#8212; The Debugger clears all software breakpoints whenever you load or reload a program.<br></li>
               <li><strong>Across Reloads</strong> (<code>rememberBreakpoints withinSession</code>) &#8212; [default] The Debugger remembers software breakpoints when you reload the program within a single session. Software breakpoints
                  are lost when you exit MULTI.<br></li>
               <li><strong>Across Sessions</strong> (<code>rememberBreakpoints acrossSessions</code>) &#8212; The Debugger remembers software breakpoints even if you exit and restart MULTI.<br></li>
            </ul>
         </p>
         <p><strong>Note</strong>: The Debugger may not remember group breakpoints and does not remember hardware breakpoints.
         </p>
      </div>
      <hr>
      <div id="cfg.OverwriteScriptBreakpoints">
         <p><strong>Restored breakpoints overwrite breakpoints set by scripts</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>overwriteScriptBreakpoints on</code>) &#8212; Previously saved breakpoints will overwrite breakpoints that have been created by a script run automatically for the current
                  executable.<br></li>
               <li><strong>Cleared</strong> (<code>overwriteScriptBreakpoints off</code>) &#8212; [default] Previously saved breakpoints will not overwrite breakpoints that have been created by a script run automatically
                  for the current executable.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.RememberBaseAddrs">
         <p><strong>Remember base addresses (e.g. _TEXT)</strong></p>
         <p>Determines whether the Debugger remembers address offsets that you have set for a program the next time you debug the same
            program. This option is only applicable to programs that are compiled for use with position-independent code and/or position-independent
            data. Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><strong>Never</strong> (<code>rememberBaseAddrs never</code>) &#8212; The Debugger will clear all base addresses whenever you load or reload a program.<br></li>
               <li><strong>Across Reloads</strong> (<code>rememberBaseAddrs acrossReload</code>) &#8212; [default] The Debugger will remember address offsets that you have set when you reload the program within a single session.
                  Address offsets are lost when you exit MULTI.<br></li>
               <li><strong>Across Sessions</strong> (<code>rememberBaseAddrs acrossSessions</code>) &#8212; The Debugger will remember address offsets that you have set for a program even if you exit and restart MULTI.<br></li>
            </ul>
         </p>
         <p>You can set address offsets by assigning built-in variables <code>_DATA</code> and <code>_TEXT</code> in the Debugger or by using the command line options <code>-data <var>offset</var>
                                                </code> and <code>-text <var>offset</var>
                                                </code>. For more information about system variables, see System Variables. For more information about command line options, see Command Line Reference.
         </p>
      </div>
      <hr>
      <div id="cfg.SaveDebugServer">
         <p><strong>Remember last connect command used for process</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>saveDebugServer on</code>) &#8212; [default] Saves the most recently used Connection Method on a per-executable basis. If the executable is started and MULTI
                  is not connected, the saved Connection Method will be used as the default in the <strong>Connection Chooser</strong> dialog box.<br></li>
               <li><strong>Cleared</strong> (<code>saveDebugServer off</code>) &#8212; The last Connection Method is not saved.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AutoSaveConnectionsInFiles">
         <p><strong>Automatically save changed connection files</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>autoSaveConnectionsinFiles on</code>) &#8212; [default] MULTI saves any outstanding changes to all Target Connection files loaded in the Connection Organizer when you
                  exit.<br></li>
               <li><strong>Cleared</strong> (<code>autoSaveConnectionsinFiles off</code>) &#8212; Changes to Target Connection files will not be automatically saved.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.AutoSaveUserConnections">
         <p><strong>Automatically save 'User Methods' changes</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>autoSaveUserConnections on</code>) &#8212; [default] MULTI saves any outstanding changes to the &#8220;User Methods&#8221; Target Connection file when you exit.<br></li>
               <li><strong>Cleared</strong> (<code>autoSaveUserConnections off</code>) &#8212; All changes to the &#8220;User Methods&#8221; Target Connection file will be lost, even if <strong>Automatically save changed connection files</strong> is selected (<code>autoSaveConnectionsInFiles on</code>).<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.RememberDirs">
         <p><strong>Directory memory</strong></p>
         <p>Determine which directory to initially display in the <strong>File Chooser</strong>. Permitted settings for this option are:
         </p>
         <p>
            <ul>
               <li><strong>Across Sessions</strong> (<code>rememberDirs rememberAcross</code>) &#8212; <strong>File Chooser</strong> will always open in the previously viewed directory for the same operation, even after closing and restarting MULTI. The
                  user directories will only be used on the very first run of MULTI, or if a user settings file cannot be found.<br></li>
               <li><strong>Within Sessions</strong> (<code>rememberDirs rememberWithin</code>) &#8212; [default] <strong>File Chooser</strong> will open in the appropriate previously viewed directory, but it will not remember directories viewed in previous sessions.
                  <strong>File Chooser</strong> will use the User directories initially each time MULTI is restarted.<br></li>
               <li><strong>None</strong> (<code>rememberDirs rememberNever</code>) &#8212; <strong>File Chooser</strong> will always open with the appropriate User directory, and never remember which directory was previously viewed.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.GenFileSet">
         <p><strong>User Directories</strong></p>
         <p>Opens the <strong>User Directories</strong> dialog box, which sets the directories the file chooser starts with if directory memory is not available or is turned off.
         </p>
         <p>To change any of the settings in this dialog box, select the check box, then enter the full path of the directory.</p>
         <p><strong>General Files:</strong><ul>
               <li><strong>Selected</strong> (<code>genFileSet on</code>) &#8212; Opens the <strong>General Files</strong> directory field, where you can enter the path.<br></li>
               <li><strong>Cleared</strong> (<code>genFileSet off</code>) &#8212; [default] The current working directory is used.<br></li>
               <li><strong>General Files</strong> directory (<code>genFilesDir <var>pathname</var>
                                                               </code>) &#8212; [default is current working directory] Use this field to enter the directory path for general files.<br></li>
            </ul>
         </p>
         <p><strong>Source Files:</strong><ul>
               <li><strong>Selected</strong> (<code>sourceFileSet on</code>) &#8212; Opens the <strong>Source Files</strong> directory field, where you can enter the path.<br></li>
               <li><strong>Cleared</strong> (<code>sourceFileSet off</code>) &#8212; [default] The current working directory is used.<br></li>
               <li><strong>Source Files</strong> directory (<code>sourceFilesDir <var>pathname</var>
                                                               </code>) &#8212; [default is current working directory] Use this field to enter the directory path for source files.<br></li>
            </ul>
         </p>
         <p><strong>Project Files:</strong><ul>
               <li><strong>Selected</strong> (<code>buildFileSet on</code>) &#8212; Opens the <strong>Project Files</strong> directory field, where you can enter the path.<br></li>
               <li><strong>Cleared</strong> (<code>buildFileSet off</code>) &#8212; [default] The current working directory is used.<br></li>
               <li><strong>Project Files</strong> directory (<code>buildFilesDir <var>pathname</var>
                                                               </code>) &#8212; [default is current working directory] Use this field to enter the directory path for project files.<br></li>
            </ul>
         </p>
         <p><strong>Executables/Binaries:</strong><ul>
               <li><strong>Selected</strong> (<code>execFileSet on</code>) &#8212; Opens the <strong>Executables/Binaries</strong> directory field, where you can enter the path.<br></li>
               <li><strong>Cleared</strong> (<code>execFileSet off</code>) &#8212; [default] The current working directory is used.<br></li>
               <li><strong>Executables/Binaries</strong> directory (<code>execFilesDir <var>pathname</var>
                                                               </code>) &#8212; [default is current working directory] Use this field to enter the directory path for executables.<br></li>
            </ul>
         </p>
         <p><strong>Debug Servers:</strong><ul>
               <li><strong>Selected</strong> (<code>debugServerSet on</code>) &#8212; Opens the <strong>Debug Servers</strong> directory field, where you can enter the path.<br></li>
               <li><strong>Cleared</strong> (<code>debugServerSet off</code>) &#8212; [default] The current working directory is used.<br></li>
               <li><strong>Debug Servers</strong> directory (<code>debugServersDir <var>pathname</var>
                                                               </code>) &#8212; [default is current working directory] Use this field to enter the directory path for debug servers.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ShowVersionControl">
         <p><strong>Show version control information on file chooser dialog box</strong></p>
         <p>Linux/Solaris only</p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>showVersionControl on</code>) &#8212; If a user has the file checked out, the <strong>File Chooser</strong> dialog box will display the name of that user next to the filename in a column titled <strong>Version Control</strong>.<br></li>
               <li><strong>Cleared</strong> (<code>showVersionControl off</code>) &#8212; The <strong>Version Control</strong> column will be hidden and the version control system will not be queried.<br></li>
            </ul>
         </p>
         <p><strong>Warning</strong>: Selecting this option causes MULTI to query the version control system for each file. On some version control systems, turning
            on this option might slow down <strong>File Chooser</strong> performance significantly.
         </p>
      </div>
      <hr>
      <div id="cfg.ColorScheme">
         <p><strong>Load Color Scheme</strong></p>
         <p>Linux/Solaris only</p>
         <p>Sets the color scheme. Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Default (color, white background)</strong><br></li>
               <li><strong>Beige (color, light background)</strong><br></li>
               <li><strong>Plum (color, light background)</strong><br></li>
               <li><strong>Dark 1 (color, black background)</strong><br></li>
               <li><strong>Dark 2 (color, black background)</strong><br></li>
               <li><strong>Grey (grey, white background)</strong><br></li>
               <li><strong>Dark Grey (greys, black background)</strong><br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.Background">
         <p><strong>Global Colors</strong></p>
         <p>Linux/Solaris only</p>
         <p>Global colors can only be set on Linux/Solaris systems. They affect the default colors for user interface elements. The following
            global color options may be set:
         </p>
         <p>
            <ul>
               <li><strong>Background</strong> (<code>background <var>color</var>
                                                               </code>) &#8212; [default is <code>#ffffff</code>] Background color of user areas, such as the color behind the text you enter.<br></li>
               <li><strong>Foreground</strong> (<code>foreground <var>color</var>
                                                               </code>) &#8212; [default is <code>#000000</code>] Color of text.<br></li>
               <li><strong>Control Area</strong> (<code>controlColor <var>color</var>
                                                               </code>) &#8212; [default is <code>#c0c0c0</code>] Background color of control areas, such as menu bars and buttons.<br></li>
               <li><strong>Selection</strong> (<code>Select <var>color</var>
                                                               </code>) &#8212; [default is <code>#000080</code>] Background color of text selections. The foreground color of selections is based on the <code>foreground</code> setting and is chosen automatically.<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.Assembly">
         <p><strong>Debugger Colors</strong>*
         </p>
         <p>Controls how certain elements are displayed in the Debugger. The colors you can customize are:</p>
         <p>
            <ul>
               <li><strong>Assembly</strong> (<code>assembly <var>color</var>
                                                               </code>) &#8212; [default is <code>#0000ff</code>] Color of interlaced assembly code.<br></li>
               <li><strong>Break Dot</strong> (<code>bDotColor <var>color</var>
                                                               </code>) &#8212; [default is <code>#00cd00</code>] Color of break dots, which indicate locations where breakpoints may be set.<br></li>
               <li><strong>Status</strong> (<code>breakColor <var>color</var>
                                                               </code>) &#8212; [default is <code>#ff0000</code>] Color of the process status and debug server messages (STOPPED,RUNNING, etc.).<br></li>
               <li><strong>Context Arrow</strong> (<code>pointerColor <var>color</var>
                                                               </code>) &#8212; [default is <code>#0000ff</code>] Color of the context arrow, which indicates what context to use for commands in the Debugger.<br></li>
               <li><strong>File line #</strong><br><ul>
                     <li><strong>Selected</strong> (<code>useFileRelLineBg on</code>) &#8212; [default] Enables file relative line numbers.<br></li>
                     <li><strong>Cleared</strong> (<code>useFileRelLineBg off</code>) &#8212; Disables file relative line numbers.<br></li>
                     <li>Color field (<code>fileRelLineBg <var>color</var>
                                                                           </code>) &#8212; [default is <code>#FFFFFF</code>] Color of the background behind the column of file relative line numbers in the source pane.<br></li>
                  </ul>
               </li>
               <li><strong>Proc line #</strong><br><ul>
                     <li><strong>Selected</strong> (<code>useProcRelLineBg on</code>) &#8212; [default ] Enables procedure relative line numbers.<br></li>
                     <li><strong>Cleared</strong> (<code>useProcRelLineBg off</code>) &#8212; Disables procedure relative line numbers.<br></li>
                     <li>Color field (<code>ProcRelLineBg <var>color</var>
                                                                           </code>) &#8212; [default is <code>#e4e4e4</code>] Color of the background behind the column of procedure relative line numbers in the source pane.<br></li>
                  </ul>
               </li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.ColorSyntax">
         <p><strong>Syntax Coloring</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>colorSyntax on</code>) &#8212; [default] Source code will be syntax colored based upon the <strong>Syntax Color Settings</strong> listed below.<br></li>
               <li><strong>Cleared</strong> (<code>colorSyntax off</code>) &#8212; Source code will not be syntax colored.<br></li>
            </ul>
         </p>
         <p>If you change the setting of this option but do not save the configuration as the default, only the MULTI tool from which
            the option was changed is aware of the new setting. If you do save the configuration as the default, however, all MULTI tools
            launched after the change are also notified of the new setting.
         </p>
      </div>
      <hr>
      <div id="cfg.Comment">
         <p>Syntax Color Settings*</p>
         <p>Colors may be set for the following items:</p>
         <p>
            <ul>
               <li><strong>Comments</strong> (<code>comment <var>color</var>
                                                               </code>) &#8212; [default is <code>#008000</code>]<br></li>
               <li><strong>Keywords</strong> (<code>keyword <var>color</var>
                                                               </code>) &#8212; [default is <code>#0000ff</code>]<br></li>
               <li><strong>Dead Code</strong> (<code>deadCode <var>color</var>
                                                               </code>) &#8212; [default is <code>#808080</code>] Color of code enclosed in an <code>#if 0 ... #endif</code> block.<br></li>
               <li><strong>Numbers</strong> (<code>number <var>color</var>
                                                               </code>) &#8212; [default is <code>#e000e0</code>]<br></li>
               <li><strong>Strings</strong> (<code>string <var>color</var>
                                                               </code>) &#8212; [default is <code>#800000</code>]<br></li>
               <li><strong>Characters</strong> (<code>character <var>color</var>
                                                               </code>) &#8212; [default is <code>#c000c0</code>]<br></li>
               <li><strong>Customized</strong> (<code>customized <var>color</var>
                                                               </code>) &#8212; [default is <code>#008080</code>]<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.CppCommentsInC">
         <p><strong>Color C++ comments in C</strong></p>
         <p>Permitted settings for this option are:</p>
         <p>
            <ul>
               <li><strong>Selected</strong> (<code>cppCommentsinC on</code>) &#8212; [default] C++ style comments (<code>//</code>) will be syntax colored as comments in both C++ and C source files.<br></li>
               <li><strong>Cleared</strong> (<code>cppCommentsinC off</code>) &#8212; C++ style comments will not be syntax colored as comments in C source files.<br></li>
            </ul>
         </p>
         <p>If you change the setting of this option but do not save the configuration as the default, only the MULTI tool from which
            the option was changed is aware of the new setting. If you do save the configuration as the default, however, all MULTI tools
            launched after the change are also notified of the new setting.
         </p>
      </div>
      <hr>
      <div id="cfg.more_colors_config">
         <p><strong>More Color Options</strong></p>
         <p>Opens the <strong>More Color Options</strong> dialog box, which contains additional colors that you can configure. For more information, see 
            	
            	"The More Color Options Dialog Box"
            	in the <em>MULTI: Building Applications</em> book for your target.
         </p>
      </div>
      <hr>
      <div id="cfg.StartedConnectionFG">
         <p><strong>Connection Organizer Colors</strong></p>
         <p>Sets the foreground color of the <strong>Connected Targets</strong> list, which is located in the <strong>Connection Organizer</strong>.
         </p>
         <p>
            <ul>
               <li><strong>Connected targets</strong> (<code>startedConnectionFg <var>color</var>
                                                                  </code>) &#8212; [default is <code>#008000</code>]<br></li>
            </ul>
         </p>
      </div>
      <hr>
      <div id="cfg.DiffHighlight">
         <p><strong>Diffview Colors</strong></p>
         <p>Sets the background color of the current selection in the <strong>Diff Viewer</strong> foreground.
         </p>
         <p>
            <ul>
               <li><strong>Highlight</strong> (<code>diffHighlight <var>color</var>
                                                                  </code>) &#8212; [default is <code>#e0ffd0</code>]<br></li>
            </ul>
         </p>
      </div>
      <hr>
   </body>
</html>