# The file is auto-grabbed on Thu Mar 19 16:59:02 2009, 
# please don't manually change it.

# It defines INTEGRITY API for auto-completion purpose only.

language {
    general {
        case_sensitive = true
    }
    autocomplete {
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/INTEGRITY.h
	name += {"KernelPartitionModeChange;Error KernelPartitionModeChange(Value)"}
	# Semaphore
	name += {"CreateSemaphore;Error CreateSemaphore(Value InitialValue, Semaphore *)"}
	name += {"CreateBinarySemaphore;Error CreateBinarySemaphore(Semaphore *)"}
	name += {"CreateHighestLockerSemaphore;Error CreateHighestLockerSemaphore(Value InitialValue, Semaphore *)"}
	name += {"TryToObtainSemaphore;Error TryToObtainSemaphore(Semaphore TheSemaphore)"}
	name += {"TryToClearSemaphore;Error TryToClearSemaphore(Semaphore TheSemaphore, SignedValue *)"}
	name += {"ReleaseSemaphore;Error ReleaseSemaphore(Semaphore TheSemaphore)"}
	name += {"GetSemaphoreValue;Error GetSemaphoreValue(Semaphore TheSemaphore, SignedValue *)"}
	name += {"KernelAidedLock;Error KernelAidedLock(Semaphore TheSemaphore, Address O, Address W)"}
	name += {"KernelAidedUnlock;Error KernelAidedUnlock(Semaphore TheSemaphore, Address O, Address W)"}
	# Link
	name += {"CreateLink;Error CreateLink(Object TheObject, Link *)"}
	# MemoryRegion
	name += {"SplitMemoryRegion;Error SplitMemoryRegion(MemoryRegion TheMemoryRegion, Address TheAddress, MemoryRegion *)"}
	name += {"MergeMemoryRegions;Error MergeMemoryRegions(MemoryRegion TheMemoryRegion, MemoryRegion PreviousMemoryRegion)"}
	name += {"GetMemoryRegionAddresses;Error GetMemoryRegionAddresses(MemoryRegion TheMemoryRegion, Address *First, Address *Last)"}
	name += {"GetMemoryRegionAttributes;Error GetMemoryRegionAttributes(MemoryRegion TheMemoryRegion, Value *)"}
	name += {"Log2PageSize;Error Log2PageSize(MemoryRegion TheMemoryRegion, Address *Size)"}
	name += {"Log2CacheLineSize;Error Log2CacheLineSize(MemoryRegion TheMemoryRegion, Address *Size)"}
	name += {"ReadFromMemoryRegion;Error ReadFromMemoryRegion(MemoryRegion TheMemoryRegion, Address TheAddress, Address Size, Value *)"}
	name += {"WriteToMemoryRegion;Error WriteToMemoryRegion(MemoryRegion TheMemoryRegion, Address TheAddress, Address Size, Value)"}
	name += {"FillMemoryRegion;Error FillMemoryRegion(MemoryRegion TheMemoryRegion, TargetAddress, TargetLength, Value)"}
	name += {"CopyFromMemoryRegion;Error CopyFromMemoryRegion(MemoryRegion TheMemoryRegion, TargetAddress, DestAddress, Length)"}
	name += {"CopyToMemoryRegion;Error CopyToMemoryRegion(MemoryRegion TheMemoryRegion, TargetAddress, SourceAddress, Length)"}
	name += {"PutPageOnKernelSpaceFreeList;Error PutPageOnKernelSpaceFreeList(MemoryRegion TheMemoryRegion)"}
	# AddressSpace
	name += {"TakeObject;Error TakeObject(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Object *To)"}
	name += {"GiveObject;Error GiveObject(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Object From)"}
	name += {"GetFreeObjectIndex;Error GetFreeObjectIndex(AddressSpace TheAddressSpace, ObjectIndex *)"}
	name += {"StartClose;Error StartClose(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Boolean CheckForResource)"}
	name += {"FinishClose;Error FinishClose(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Boolean, Object *)"}
	name += {"PutPageOnAddressSpaceFreeList;Error PutPageOnAddressSpaceFreeList(AddressSpace TheAddressSpace, MemoryRegion)"}
	name += {"GetPageFromAddressSpaceFreeList;Error GetPageFromAddressSpaceFreeList(AddressSpace TheAddressSpace, MemoryRegion *)"}
	name += {"GetAddressSpaceFreeListCount;Error GetAddressSpaceFreeListCount(AddressSpace TheAddressSpace, Value *)"}
	name += {"GetObjectCount;Error GetObjectCount(AddressSpace TheAddressSpace, ObjectIndex *)"}
	name += {"SetObjectCount;Error SetObjectCount(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex)"}
	name += {"GetAddressSpaceUniqueId;Error GetAddressSpaceUniqueId(AddressSpace TheAddressSpace, Value *)"}
	name += {"RestartAddressSpace;Error RestartAddressSpace(AddressSpace TheAddressSpace)"}
	name += {"FinishMove;Error FinishMove(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex)"}
	name += {"FillAddressSpace;Error FillAddressSpace(AddressSpace TheAddressSpace, TargetAddress, TargetLength, Value)"}
	name += {"CopyFromAddressSpace;Error CopyFromAddressSpace(AddressSpace TheAddressSpace, TargetAddress, DestAddress, Length)"}
	name += {"CopyToAddressSpace;Error CopyToAddressSpace(AddressSpace TheAddressSpace, TargetAddress, SourceAddress, Length)"}
	name += {"ReadFromAddressSpace;Error ReadFromAddressSpace(AddressSpace TheAddressSpace, Address TheAddress, Address Size, Value *)"}
	name += {"WriteToAddressSpace;Error WriteToAddressSpace(AddressSpace TheAddressSpace, Address TheAddress, Address Size, Value)"}
	name += {"GetFirstMemoryRegion;Error GetFirstMemoryRegion(AddressSpace TheAddressSpace, MemoryRegion *FirstMemoryRegion)"}
	name += {"GetNextMemoryRegion;Error GetNextMemoryRegion(AddressSpace TheAddressSpace, MemoryRegion CurrentMemoryRegion, MemoryRegion *NextMemoryRegion)"}
	# Task
	name += {"CreateTask;Error CreateTask(AddressSpace TheAddressSpace, Address, Address, Address, Task *, Activity *)"}
	name += {"GetTaskName;Error GetTaskName(Task TheTask, void *, Length, Address *)"}
	name += {"SetTaskName;Error SetTaskName(Task TheTask, void *, Length)"}
	name += {"GetTaskExecutableFile;Error GetTaskExecutableFile(Task TheTask, void *, Length, Address *)"}
	name += {"SetTaskExecutableFile;Error SetTaskExecutableFile(Task TheTask, void *, Length)"}
	name += {"GetTaskStatus;Error GetTaskStatus(Task TheTask, Value *, Address *, Address *)"}
	name += {"GetTaskExceptionStatus;Error GetTaskExceptionStatus(Task TheTask, Value *, Address *, Address *, Address *)"}
	name += {"GetProcessorType;Error GetProcessorType(Task TheTask, Value *)"}
	name += {"GetTaskStatusChangeOverruns;Error GetTaskStatusChangeOverruns(Task TheTask, Value *)"}
	name += {"SetTaskStatusNotificationMask;Error SetTaskStatusNotificationMask(Task TheTask, Value)"}
	name += {"GetTaskStatusNotificationMask;Error GetTaskStatusNotificationMask(Task TheTask, Value *)"}
	name += {"GetPriorityAndWeight;Error GetPriorityAndWeight(Task TheTask, Value *, Value *)"}
	name += {"SetPriorityAndWeight;Error SetPriorityAndWeight(Task TheTask, Value, Value, Boolean)"}
	name += {"GetActivePriority;Error GetActivePriority(Task TheTask, Value *)"}
	name += {"GetMaximumPriorityAndWeight;Error GetMaximumPriorityAndWeight(Task TheTask, Value *, Value *)"}
	name += {"SetMaximumPriorityAndWeight;Error SetMaximumPriorityAndWeight(Task DestinationTask, Task SourceTask, Value, Value)"}
	name += {"RaiseCurrentTaskPriority;Error RaiseCurrentTaskPriority(Task TheTask, Value, Value *)"}
	name += {"LowerCurrentTaskPriority;Error LowerCurrentTaskPriority(Task TheTask, Value, Value *)"}
	name += {"SetTaskIdentification;Error SetTaskIdentification(Task TheTask, Address)"}
	name += {"GetTaskIdentification;Error GetTaskIdentification(Task TheTask, Address *)"}
	name += {"SetTaskInterruptPriorityLevel;Error SetTaskInterruptPriorityLevel(Task TheTask, Value InterruptPriorityLevel)"}
	name += {"GetTaskInterruptPriorityLevel;Error GetTaskInterruptPriorityLevel(Task TheTask, Value *InterruptPriorityLevel)"}
	name += {"TaskSendException;Error TaskSendException(Task TheTask, Value, Address)"}
	name += {"SetTaskOptionMask;Error SetTaskOptionMask(Task TheTask, Value)"}
	name += {"GetTaskOptionMask;Error GetTaskOptionMask(Task TheTask, Value *)"}
	name += {"SetTaskBootCode;Error SetTaskBootCode(Task TheTask, Value)"}
	name += {"GetTaskBootCode;Error GetTaskBootCode(Task TheTask, Value *)"}
	name += {"SendLoadStatus;Error SendLoadStatus(Task TheTask, Value)"}
	name += {"CurrentTask;Task CurrentTask(void)"}
	name += {"FillTask;Error FillTask(Task TheTask, TargetAddress, TargetLength, Value)"}
	name += {"CopyFromTask;Error CopyFromTask(Task TheTask, TargetAddress, DestAddress, Length)"}
	name += {"CopyToTask;Error CopyToTask(Task TheTask, TargetAddress, SourceAddress, Length)"}
	name += {"ReadFromTask;Error ReadFromTask(Task TheTask, Address TheAddress, Address Size, Value *)"}
	name += {"WriteToTask;Error WriteToTask(Task TheTask, Address TheAddress, Address Size, Value)"}
	name += {"GetTaskCounter;Error GetTaskCounter(Task TheTask, Address Counter, Address *Count)"}
	name += {"SetTaskCounter;Error SetTaskCounter(Task TheTask, Address Counter, Address Count)"}
	name += {"GetTaskTimer;Error GetTaskTimer(Task TheTask, Address Timer, Time *Time)"}
	name += {"SetTaskTimer;Error SetTaskTimer(Task TheTask, Address Timer, const Time *Time)"}
	name += {"MasterGetTaskStackPointer;Error MasterGetTaskStackPointer(Task TheTask, Address *, Boolean)"}
	name += {"MasterSetTaskStackPointer;Error MasterSetTaskStackPointer(Task TheTask, Address, Boolean)"}
	name += {"MasterGetTaskProgramCounter;Error MasterGetTaskProgramCounter(Task TheTask, Address *, Boolean)"}
	name += {"MasterSetTaskProgramCounter;Error MasterSetTaskProgramCounter(Task TheTask, Address, Boolean)"}
	name += {"MasterGetTaskRegister;Error MasterGetTaskRegister(Task TheTask, Address RegisterNumber, Value *Value, Boolean)"}
	name += {"MasterSetTaskRegister;Error MasterSetTaskRegister(Task TheTask, Address RegisterNumber, Value Value, Boolean)"}
	name += {"GetTaskStackLimits;Error GetTaskStackLimits(Task TheTask, Address *, Address *)"}
	name += {"SetTaskStackLimits;Error SetTaskStackLimits(Task TheTask, Address, Address)"}
	name += {"ReadTaskRegisterBlock;Error ReadTaskRegisterBlock(Task TheTask, TargetAddress, DestAddress, Length)"}
	name += {"WriteTaskRegisterBlock;Error WriteTaskRegisterBlock(Task TheTask, TargetAddress, SourceAddress, Length)"}
	name += {"TaskExecuteOneInstruction;Error TaskExecuteOneInstruction(Task TheTask)"}
	name += {"RunTask;Error RunTask(Task TheTask)"}
	name += {"YieldTask;Error YieldTask(Task TheTask)"}
	name += {"HaltTask;Error HaltTask(Task TheTask)"}
	name += {"ExitTask;Error ExitTask(Task TheTask, Value)"}
	name += {"CheckForActivityAndReturnStatus;Error CheckForActivityAndReturnStatus(Value *, Error *)"}
	name += {"WaitForActivityAndReturnStatus;void WaitForActivityAndReturnStatus(Value *, Error *)"}
	name += {"SetTaskInterruptVector;Error SetTaskInterruptVector(Task TheTask, Address)"}
	name += {"GetCurrentActivity;Error GetCurrentActivity(Task TheTask, Activity *)"}
	name += {"GetTaskUniqueId;Error GetTaskUniqueId(Task TheTask, Value *)"}
	name += {"CachedGetCurrentTaskUniqueId;Error CachedGetCurrentTaskUniqueId(Value *)"}
	name += {"SetUserTaskRestartableWindow;Error SetUserTaskRestartableWindow(Task TheTask, Address First, Address Last)"}
	name += {"SetTaskBaseAddresses;Error SetTaskBaseAddresses(Task TheTask, Address, Address, Address)"}
	# Connection
	name += {"CreateConnection;Error CreateConnection(Connection *, Connection *)"}
	name += {"CreateConnectionWithFlags;Error CreateConnectionWithFlags(Connection *, Value, Connection *, Value)"}
	name += {"RestoreConnection;Error RestoreConnection(Connection *, AddressSpace, ObjectIndex)"}
	name += {"CreateRemoteConnection;Error CreateRemoteConnection(Value NetworkNumber, Value Node, Address AS, Address ConnName, Connection *C)"}
	name += {"CreateRemoteService;Error CreateRemoteService(Value NetworkNumber, Value Node, Address AS, Address ConnName, Connection *C)"}
	name += {"CreateRemoteServiceConnection;Error CreateRemoteServiceConnection(Value NetworkNumber, Value Node, Address AS, Address ConnName, Connection *C)"}
	name += {"ReceiveRemoteServiceClient;Error ReceiveRemoteServiceClient(Connection ServiceC, Connection *ClientC)"}
	name += {"TimedReceiveRemoteServiceClient;Error TimedReceiveRemoteServiceClient(Connection ServiceC, Connection *ClientC, Time *Interval)"}
	name += {"AsynchronousCreateRemoteConnection;Error AsynchronousCreateRemoteConnection(Activity A, CMControlBlock *CMCB, Value NetworkNumber, Value Node, Address AS, Address ConnName)"}
	name += {"AsynchronousCreateRemoteServiceConnection;Error AsynchronousCreateRemoteServiceConnection(Activity A, CMControlBlock *CMCB, Value NetworkNumber, Value Node, Address AS, Address ConnName)"}
	name += {"AsynchronousReceiveRemoteServiceClient;Error AsynchronousReceiveRemoteServiceClient(Activity A, CMControlBlock *CMCB, Connection ServiceC)"}
	name += {"RetrieveRemoteConnection;Error RetrieveRemoteConnection(CMControlBlock *CMCB, Connection *C)"}
	name += {"TimedCreateRemoteServiceConnection;Error TimedCreateRemoteServiceConnection(Value NetworkNumber, Value Node, Address AS, Address ConnName, Connection *C, Time *Timeout)"}
	name += {"TimedCreateRemoteConnection;Error TimedCreateRemoteConnection(Value NetworkNumber, Value Node, Address AS, Address ConnName, Connection *C, Time *Timeout)"}
	name += {"InitCMClient;Error InitCMClient(void)"}
	name += {"ShutdownCMClient;void ShutdownCMClient(void)"}
	# Activity
	name += {"SynchronousSend;Error SynchronousSend(Connection TheConnection, Buffer *)"}
	name += {"TrySynchronousSend;Error TrySynchronousSend(Connection TheConnection, Buffer *)"}
	name += {"SynchronousReceive;Error SynchronousReceive(Connection TheConnection, Buffer *)"}
	name += {"TimedSynchronousSend;Error TimedSynchronousSend(Connection TheConnection, Buffer *, Time *)"}
	name += {"TimedSynchronousReceive;Error TimedSynchronousReceive(Connection TheConnection, Buffer *, Time *)"}
	name += {"AbsoluteTimedSynchronousSend;Error AbsoluteTimedSynchronousSend(Connection TheConnection, Buffer *, Time *)"}
	name += {"AbsoluteTimedSynchronousReceive;Error AbsoluteTimedSynchronousReceive(Connection TheConnection, Buffer *, Time *)"}
	name += {"AsynchronousReceive;Error AsynchronousReceive(Activity TheActivity, Object TheObject, BufferPtr)"}
	name += {"AsynchronousSend;Error AsynchronousSend(Activity TheActivity, Object TheObject, BufferPtr)"}
	name += {"GetActivityStatus;Error GetActivityStatus(Activity TheActivity)"}
	name += {"CreateActivity;Error CreateActivity(Task TheTask, Value Priority, Boolean Interrupt, Value Identification, Activity *)"}
	name += {"ResetActivityAndReturnStatus;Error ResetActivityAndReturnStatus(Activity TheActivity, Error *Status)"}
	name += {"SuspendActivity;Error SuspendActivity(Activity TheActivity)"}
	name += {"ContinueActivity;Error ContinueActivity(Activity TheActivity)"}
	name += {"ContinueActivityWithUserError;Error ContinueActivityWithUserError(Activity TheActivity, Error)"}
	name += {"MoveActivityBuffers;Error MoveActivityBuffers(Activity TheActivity, BufferPtr)"}
	name += {"CreateOneWaySendActivity;Error CreateOneWaySendActivity(Task TheTask, Activity *)"}
	name += {"SetActivityPriority;Error SetActivityPriority(Activity TheActivity, Value)"}
	# Clock
	name += {"CreateVirtualClock;Error CreateVirtualClock(Clock TheClock, Value Permissions, Clock *NewClock)"}
	name += {"SetClockTime;Error SetClockTime(Clock TheClock, const Time *TheTime)"}
	name += {"AdjustClockTime;Error AdjustClockTime(Clock TheClock, const Time *TheDeltaTime)"}
	name += {"GetClockTime;Error GetClockTime(Clock TheClock, Time *TheTime)"}
	name += {"SetClockAlarm;Error SetClockAlarm(Clock TheClock, Boolean Repeat, const Time *AlarmTime, const Time *AlarmInterval)"}
	name += {"GetClockAlarm;Error GetClockAlarm(Clock TheClock, Boolean *Repeat, Time *AlarmTime, Time *AlarmInterval)"}
	name += {"GetClockPermissions;Error GetClockPermissions(Clock TheClock, Value *TheClockPermissions)"}
	name += {"GetClockResolution;Error GetClockResolution(Clock TheClock, Time *TheTime)"}
	name += {"GetClockAlarmOverruns;Error GetClockAlarmOverruns(Clock TheClock, Value *Overruns)"}
	name += {"ClearClockAlarmOverruns;Error ClearClockAlarmOverruns(Clock TheClock, Value *Overruns)"}
	name += {"GetClockName;Error GetClockName(Clock TheClock, DestAddress, Length)"}
	# IODevice
	name += {"CreateIODevice;Error CreateIODevice(IODevice UniversalIODevice, Address TheIODeviceVector, IODevice *)"}
	name += {"GetIODeviceOverruns;Error GetIODeviceOverruns(IODevice TheIODevice, Value *)"}
	name += {"ClearIODeviceOverruns;Error ClearIODeviceOverruns(IODevice TheIODevice, Value *)"}
	name += {"ReadSubBlockFromIODevice;Error ReadSubBlockFromIODevice(IODevice TheIODevice, Value BlockType, Value BlockNumber, MemoryRegion, Address First, Address Length)"}
	name += {"WriteSubBlockToIODevice;Error WriteSubBlockToIODevice(IODevice TheIODevice, Value BlockType, Value BlockNumber, MemoryRegion, Address First, Address Length)"}
	name += {"ReadBuffersFromIODevice;Error ReadBuffersFromIODevice(IODevice TheIODevice, Value BlockType, Value BlockNumber, BufferPtr)"}
	name += {"WriteBuffersToIODevice;Error WriteBuffersToIODevice(IODevice TheIODevice, Value BlockType, Value BlockNumber, BufferPtr)"}
	name += {"ReadIODeviceRegister;Error ReadIODeviceRegister(IODevice TheIODevice, Value RegisterNumber, Value *)"}
	name += {"WriteIODeviceRegister;Error WriteIODeviceRegister(IODevice TheIODevice, Value RegisterNumber, Value)"}
	name += {"ReadIODeviceStatus;Error ReadIODeviceStatus(IODevice TheIODevice, Value StatusNumber, DestAddress, Length)"}
	name += {"WriteIODeviceStatus;Error WriteIODeviceStatus(IODevice TheIODevice, Value StatusNumber, SourceAddress, Length)"}
	# Security
	name += {"AddressSpaceAddressFaultOverruns;Error AddressSpaceAddressFaultOverruns(AddressSpace TheAddressSpace, Value *)"}
	name += {"CreateVirtualAddressSpace;Error CreateVirtualAddressSpace(MemoryRegion TheMemoryRegion, AddressSpace *, MemoryRegion *)"}
	name += {"SetMemoryRegionAttributes;Error SetMemoryRegionAttributes(MemoryRegion TheMemoryRegion, Value)"}
	name += {"MapMemoryRegion;Error MapMemoryRegion(MemoryRegion VirtualMemoryRegion, MemoryRegion PhysicalMemoryRegion)"}
	name += {"UnmapMemoryRegion;Error UnmapMemoryRegion(MemoryRegion TheMemoryRegion)"}
	name += {"MemoryRegionUsage;Error MemoryRegionUsage(MemoryRegion VirtualMemoryRegion, Value ToClear, Value *TheUsage)"}
	name += {"DeliverAddressFaultWithAddress;Error DeliverAddressFaultWithAddress(Activity TheActivity, Address TheAddress, Value Attributes)"}
	name += {"GetPhysicalAddressPreemptible;Error GetPhysicalAddressPreemptible(AddressSpace TheAddressSpace, Address, Address, Address *, Length)"}
	# Private
	name += {"GetIntegrityEthBufSize;Error GetIntegrityEthBufSize(AddressSpace TheAddressSpace, Value *TheSize)"}
	# LIBRARY FUNCTIONS
	# Event Log
	name += {"LogUserEvent;Error LogUserEvent(Task TheTask, Value, Address, Value)"}
	name += {"GetTaskEventLogMask;Error GetTaskEventLogMask(Task TheTask, unsigned int *, unsigned int *)"}
	name += {"SetTaskEventLogMask;Error SetTaskEventLogMask(Task TheTask, unsigned int, unsigned int)"}
	name += {"EventLogOn;Error EventLogOn(void)"}
	name += {"EventLogOff;Error EventLogOff(void)"}
	name += {"SetEventLogMask;Error SetEventLogMask(unsigned int newmask)"}
	name += {"GetEventLogMask;Error GetEventLogMask(unsigned int *newmask)"}
	# Runtime Error Checking
	name += {"GetStackLimit;Value GetStackLimit(void)"}
	name += {"SetStackLimit;void SetStackLimit(Value TheValue)"}
	# Profiling
	name += {"DumpProfileBuffers;void DumpProfileBuffers(void)"}
	# Diagnostics/ConsoleIO
	name += {"dbstring;void dbstring(const char *)"}
	name += {"consolestring;void consolestring(const char *)"}
	# ResourceManager
	name += {"DisableResourceManager;void DisableResourceManager(void)"}
	name += {"RegisterResource;Error RegisterResource(Object TheObject, const char *, const char *)"}
	name += {"RegisterLinkableResource;Error RegisterLinkableResource(Object TheObject, const char *, const char *)"}
	name += {"RegisterResourceByDescription;Error RegisterResourceByDescription(Object TheObject, char *)"}
	name += {"RequestResource;Error RequestResource(Object *, const char *, const char *)"}
	name += {"RequestResourceByDescription;Error RequestResourceByDescription(Object *, char *)"}
	name += {"DeleteResource;Error DeleteResource(const char *, const char *)"}
	name += {"RequestAndDeleteResource;Error RequestAndDeleteResource(Object *, const char *, const char *)"}
	name += {"RequestAndDeleteBufferResource;Error RequestAndDeleteBufferResource(Buffer *, const char *, const char *)"}
	name += {"RegisterBufferResource;Error RegisterBufferResource(Buffer *, const char *, const char *)"}
	name += {"RegisterLinkableBufferResource;Error RegisterLinkableBufferResource(Buffer *, const char *, const char *)"}
	name += {"RequestBufferResource;Error RequestBufferResource(Buffer *, const char *, const char *)"}
	# Time
	name += {"AddTime;Error AddTime(Time *AddTo, const Time *)"}
	name += {"SubTime;Error SubTime(Time *SubFrom, const Time *)"}
	name += {"MulTime;Error MulTime(Time *MulTo, const Time *)"}
	name += {"CompareTime;int CompareTime(const Time *, const Time *)"}
	name += {"BumpTime;Error BumpTime(Time *)"}
	name += {"CurrentTime;Error CurrentTime(Time *)"}
	# Close
	name += {"Close;Error Close(Object TheObject)"}
	# Link
	name += {"LinkObject;Error LinkObject(Object TheObject, Object *)"}
	name += {"RestoreLink;Error RestoreLink(AddressSpace, ObjectIndex, AddressSpace, Object)"}
	# ObjectNumber
	name += {"ObjectNumber;Object ObjectNumber(ObjectIndex TheObjectIndex)"}
	# ObjectTable
	name += {"GetObjectIndex;ObjectIndex GetObjectIndex(Object TheObject)"}
	# Object Identity
	name += {"TestObjectIdentity;Error TestObjectIdentity(Object Object1, Object Object2)"}
	# Task
	name += {"Yield;void Yield(void)"}
	name += {"Exit;void Exit(Value TheValue)"}
	# Send/Receive
	name += {"Send;Error Send(Connection TheConnection, Address, Address Length)"}
	name += {"SendObject;Error SendObject(Connection TheConnection, Object TheObject)"}
	name += {"Receive;Error Receive(Connection TheConnection, Address, Address Length, Address *ReceiveLength)"}
	name += {"ReceiveObject;Error ReceiveObject(Connection TheConnection, Object *)"}
	# Stack Direction
	name += {"ComputeStackPointer;Address ComputeStackPointer(Address Stack, Address Size)"}
	name += {"ComputeStackTLSPointer;Address ComputeStackTLSPointer(Address Stack, Address Size)"}
	# ANSICTask
	name += {"CreateANSICTask;Error CreateANSICTask(Value Priority, Address EntryPoint, Address StackSize, char *Name, Task *)"}
	name += {"SimpleSpawnTask;SimpleSpawnTask(entry, newtask)"}
	name += {"SimpleSpawnTaskImpl;Error SimpleSpawnTaskImpl(void (*)(void), char *name, Task *NewTask)"}
	name += {"CloseANSICTask;Error CloseANSICTask(Task TheTask)"}
	name += {"CreateProtectedTask;Error CreateProtectedTask(Value Priority, Address EntryPoint, Address StackSize, char *Name, Task *)"}
	name += {"CreateNPageProtectedTask;Error CreateNPageProtectedTask(Value Priority, Address EntryPoint, Address StackSize, char *Name, Task *, Value)"}
	name += {"CloseProtectedTask;Error CloseProtectedTask(Task TheTask)"}
	name += {"GetANSICTaskIdentification;Error GetANSICTaskIdentification(Task TheTask, Value *Identification)"}
	name += {"SetANSICTaskIdentification;Error SetANSICTaskIdentification(Task TheTask, Value Identification)"}
	# Alarm
	name += {"Alarm;Error Alarm(const Time *AlarmTime, Time *OldAlarm)"}
	name += {"alarm;unsigned alarm(unsigned seconds)"}
	# Sleep
	name += {"Sleep;Error Sleep(Time *Interval)"}
	name += {"Sleep_Until;Error Sleep_Until(Time *SleepTime)"}
	name += {"ClearSleepClock;Error ClearSleepClock(void)"}
	name += {"sleep;unsigned sleep(unsigned Seconds)"}
	name += {"usleep;int usleep(unsigned usec)"}
	# Clock
	name += {"NewClock;Clock NewClock(Error *)"}
	# Watchdog
	name += {"CreateWatchdog;Error CreateWatchdog(Value Priority, Address Handler, Address HandlerParam, Time *Timeout, Watchdog *NewWatchdog)"}
	name += {"CloseWatchdog;Error CloseWatchdog(Watchdog TheWatchdog)"}
	name += {"RefreshWatchdog;Error RefreshWatchdog(Watchdog TheWatchdog)"}
	name += {"CancelWatchdog;Error CancelWatchdog(Watchdog TheWatchdog)"}
	name += {"LinkWatchdog;Error LinkWatchdog(Watchdog OldWatchdog, Watchdog *NewWatchdog)"}
	name += {"SendWatchdog;Error SendWatchdog(Connection TheConnection, Watchdog TheWatchdog)"}
	name += {"ReceiveWatchdog;Error ReceiveWatchdog(Connection TheConnection, Watchdog *NewWatchdog)"}
	# AlarmTimer
	name += {"CreateAlarmTimer;Error CreateAlarmTimer(Address Handler, Address HandlerParam, Time *Timeout, Boolean Repeat, Boolean SetAlarm, AlarmTimer *NewTimer)"}
	name += {"CloseAlarmTimer;Error CloseAlarmTimer(AlarmTimer TheTimer)"}
	name += {"SetAlarmTimer;Error SetAlarmTimer(AlarmTimer TheTimer)"}
	name += {"CancelAlarmTimer;Error CancelAlarmTimer(AlarmTimer TheTimer)"}
	name += {"LinkAlarmTimer;Error LinkAlarmTimer(AlarmTimer OldTimer, AlarmTimer *NewTimer)"}
	name += {"SendAlarmTimer;Error SendAlarmTimer(Connection TheConnection, AlarmTimer TheAlarmTimer)"}
	name += {"ReceiveAlarmTimer;Error ReceiveAlarmTimer(Connection TheConnection, AlarmTimer *NewTimer)"}
	# User Call
	name += {"UserCall;Error UserCall(AddressSpace TheAddressSpace, Value , Value *, Address, Value, Address, Value *)"}
	# Loader Task API
	name += {"LoadFileModule;Error LoadFileModule(const char *)"}
	name += {"SparseLoadFileModule;Error SparseLoadFileModule(const char *)"}
	name += {"UnloadFileModule;Error UnloadFileModule(const char *)"}
	name += {"SetLoaderTFTPAddr;Error SetLoaderTFTPAddr(Address a)"}
	name += {"TFTPLoadFileModule;Error TFTPLoadFileModule(const char *)"}
	name += {"SpawnModule;Error SpawnModule(const char *Name, Address how, Address maxAddressSpaces, Address *actualAddressSpaces, Buffer **AddressSpaceNamesAndInitialTaskObjects, Address buffer, Length bufferLen)"}
	name += {"UnloadModuleAddressSpace;Error UnloadModuleAddressSpace(AddressSpace tounload)"}
	name += {"UnloadModuleInitialTask;Error UnloadModuleInitialTask(Task task)"}
	# Random
	name += {"CheckSuccess;CheckSuccess(e)"}
	name += {"CheckSuccessHelper;void CheckSuccessHelper(Error TheError, const char *filename, int linenum)"}
	name += {"CheckSuccessHelper;void CheckSuccessHelper(Error TheError)"}
	name += {"SetupTask;Error SetupTask(AddressSpace TheAddressSpace, Value Priority, Address Weight, Time *TimeSlice, Address Stack, Address StackLength, Boolean EnableCLibrary, Boolean AllocTLS, Address EntryPoint, Boolean StartIt, char *Name, char *SymbolFile, Task *, Activity *)"}
	# Atomic operations
	name += {"AtomicModify;Error AtomicModify(Address *address, Address *old_value, Address mask, Address delta)"}
	name += {"TestAndSet;Error TestAndSet(Address *address, Address old_value, Address new_value)"}
	# TaskKey storage
	name += {"CreateTaskKey;Error CreateTaskKey(TaskKey **key, void (*destructor)(void *))"}
	name += {"CloseTaskKey;Error CloseTaskKey(TaskKey *key)"}
	name += {"SetTaskKey;Error SetTaskKey(TaskKey *key, const void *value)"}
	name += {"GetTaskKey;Error GetTaskKey(TaskKey *key, void **value)"}
	name += {"SetOtherTaskKey;Error SetOtherTaskKey(Task task, TaskKey *key, const void *value)"}
	name += {"GetOtherTaskKey;Error GetOtherTaskKey(Task task, TaskKey *key, void **value)"}
	name += {"INTAssignObject;INTAssignObject(var)"}
	name += {"__integrity_eth_buf_size;Value __integrity_eth_buf_size(void)"}
	name += {"IMB;void IMB(void)"}
	name += {"IMB_Range;void IMB_Range(unsigned long start_addr, unsigned long end_addr)"}
	name += {"TIMEBOMB;TIMEBOMB(n)"}
	name += {"__Die;void __Die(void)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/userspacelock.h
	name += {"CreateLocalMutex;Error CreateLocalMutex(LocalMutex *TheLocalMutex)"}
	name += {"WaitForLocalMutex;Error WaitForLocalMutex(LocalMutex TheLocalMutex)"}
	name += {"TryToObtainLocalMutex;Error TryToObtainLocalMutex(LocalMutex TheLocalMutex)"}
	name += {"ReleaseLocalMutex;Error ReleaseLocalMutex(LocalMutex TheLocalMutex)"}
	name += {"CloseLocalMutex;Error CloseLocalMutex(LocalMutex TheLocalMutex)"}
	name += {"AbsoluteTimedWaitForLocalMutex;Error AbsoluteTimedWaitForLocalMutex(LocalMutex Mutex, Time *AbsTimeout)"}
	name += {"TimedWaitForLocalMutex;Error TimedWaitForLocalMutex(LocalMutex Mutex, Time *RelTimeout)"}
	name += {"GetLocalMutexValue;Error GetLocalMutexValue(LocalMutex mutex, SignedValue *TheValue)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/cond.h
	name += {"CreateCondition;Error CreateCondition(Condition *cond, Semaphore lock, Boolean exclusive)"}
	name += {"SendCondition;Error SendCondition(Connection via, Condition cond, Boolean keep)"}
	name += {"LinkCondition;Error LinkCondition(Condition orig, Condition *copy)"}
	name += {"ReceiveCondition;Error ReceiveCondition(Connection via, Condition *cond)"}
	name += {"RegisterCondition;Error RegisterCondition(const char *name, Condition cond)"}
	name += {"RequestCondition;Error RequestCondition(const char *name, Condition *cond)"}
	name += {"DeleteCondition;Error DeleteCondition(const char *name)"}
	name += {"SignalCondition;Error SignalCondition(Condition cond)"}
	name += {"BroadcastCondition;Error BroadcastCondition(Condition cond)"}
	name += {"WaitForCondition;Error WaitForCondition(Condition cond, Time *timeout, Boolean absolute)"}
	name += {"GetLockForCondition;Error GetLockForCondition(Condition cond, Semaphore *lock)"}
	name += {"CloseCondition;Error CloseCondition(Condition cond)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/activity_pool.h
	name += {"CreateActivityPool;Error CreateActivityPool(Task task, Value size, Connection con, ActivityPool *pool)"}
	name += {"SendWithActivityPool;Error SendWithActivityPool(ActivityPool pool, Buffer buf)"}
	name += {"CloseActivityPool;Error CloseActivityPool(ActivityPool pool)"}
	name += {"CloseAndAbortActivityPool;Error CloseAndAbortActivityPool(ActivityPool pool)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/message_buffer.h
	name += {"InitializeMessageBufferPoolFromMemoryRegion;Error InitializeMessageBufferPoolFromMemoryRegion(MemoryRegion area, Value bufferSize, Value numBuffers)"}
	name += {"InitializeMessageBufferPoolFromAddress;Error InitializeMessageBufferPoolFromAddress(Address first, Value size, Value bufferSize, Value numBuffers)"}
	name += {"CalculateMessageBufferPoolSize;Value CalculateMessageBufferPoolSize(Value bufferSize, Value numBuffers)"}
	name += {"OpenMessageBufferPoolFromMemoryRegion;Error OpenMessageBufferPoolFromMemoryRegion(MemoryRegion area, MessageBufferPool *pool)"}
	name += {"OpenMessageBufferPoolFromAddress;Error OpenMessageBufferPoolFromAddress(Address first, MessageBufferPool *pool)"}
	name += {"CreateMessageBufferPoolFromMemoryRegion;Error CreateMessageBufferPoolFromMemoryRegion(MemoryRegion area, Value bufferSize, Value numBuffers, MessageBufferPool *pool)"}
	name += {"CreateMessageBufferPoolFromAddress;Error CreateMessageBufferPoolFromAddress(Address first, Value size, Value bufferSize, Value numBuffers, MessageBufferPool *pool)"}
	name += {"CloseMessageBufferPool;Error CloseMessageBufferPool(MessageBufferPool pool)"}
	name += {"DestroyMessageBufferPoolFromMemoryRegion;Error DestroyMessageBufferPoolFromMemoryRegion(MemoryRegion area)"}
	name += {"DestroyMessageBufferPoolFromAddress;Error DestroyMessageBufferPoolFromAddress(Address first)"}
	name += {"ReserveMessageBuffer;Error ReserveMessageBuffer(MessageBufferPool pool, Value *bufNum, void **data)"}
	name += {"ReleaseMessageBuffer;Error ReleaseMessageBuffer(MessageBufferPool pool, Value bufNum)"}
	name += {"GetMessageBufferAddress;Error GetMessageBufferAddress(MessageBufferPool pool, Value bufNum, void **data)"}
	name += {"GetMessageBufferNumber;Error GetMessageBufferNumber(MessageBufferPool pool, const void *data, Value *bufNum)"}
	name += {"GetMessageBufferPoolReferenceCount;Value GetMessageBufferPoolReferenceCount(MessageBufferPool pool)"}
	name += {"GetMessageBufferSize;Value GetMessageBufferSize(MessageBufferPool pool)"}
	name += {"GetMessageBufferCount;Value GetMessageBufferCount(MessageBufferPool pool)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/message_queue.h
	name += {"CreateMessageQueue;Error CreateMessageQueue(Value numBuffers, Value bufferSize, Value flags, MessageQueue *queue)"}
	name += {"CreateMessageQueueFromMemoryRegion;Error CreateMessageQueueFromMemoryRegion(MemoryRegion area, Value numBuffers, Value bufferSize, Value flags, MessageQueue *queue)"}
	name += {"CreateMessageQueueFromAddress;Error CreateMessageQueueFromAddress(Address location, Address size, Value numBuffers, Value bufferSize, Value flags, MessageQueue *queue)"}
	name += {"CalculateMessageQueueSize;Address CalculateMessageQueueSize(Value numBuffers, Value bufferSize)"}
	name += {"ShareMessageQueue;Error ShareMessageQueue(MessageQueue queue, Connection conn)"}
	name += {"OpenSharedMessageQueue;Error OpenSharedMessageQueue(Connection conn, MessageQueue *queue)"}
	name += {"RegisterMessageQueue;Error RegisterMessageQueue(MessageQueue queue, const char *name)"}
	name += {"OpenRegisteredMessageQueue;Error OpenRegisteredMessageQueue(const char *name, MessageQueue *queue)"}
	name += {"UnregisterMessageQueue;Error UnregisterMessageQueue(MessageQueue queue)"}
	name += {"DistributeMessageQueue;Error DistributeMessageQueue(MessageQueue queue, const char *name)"}
	name += {"OpenDistributedMessageQueue;Error OpenDistributedMessageQueue(const char *name, MessageQueue *queue)"}
	name += {"UndistributeMessageQueue;Error UndistributeMessageQueue(MessageQueue queue)"}
	name += {"DistributeMessageQueueToLocation;Error DistributeMessageQueueToLocation(MessageQueue queue, const char *queueName, Address network, Address node, const char *addressSpaceName)"}
	name += {"OpenDistributedMessageQueueFromLocation;Error OpenDistributedMessageQueueFromLocation(const char *queueName, Address network, Address node, const char *addressSpaceName, MessageQueue *queue)"}
	name += {"CloseMessageQueue;Error CloseMessageQueue(MessageQueue queue)"}
	name += {"SendOnMessageQueue;Error SendOnMessageQueue(MessageQueue queue, const void *buffer)"}
	name += {"ReceiveOnMessageQueue;Error ReceiveOnMessageQueue(MessageQueue queue, void **buffer)"}
	name += {"TryReceiveOnMessageQueue;Error TryReceiveOnMessageQueue(MessageQueue queue, void **buffer)"}
	name += {"TimedReceiveOnMessageQueue;Error TimedReceiveOnMessageQueue(MessageQueue queue, Time *interval, void **buffer)"}
	name += {"AbsoluteTimedReceiveOnMessageQueue;Error AbsoluteTimedReceiveOnMessageQueue(MessageQueue queue, Time *timeout, void **buffer)"}
	name += {"AsynchronousReceiveMessageQueueNotification;Error AsynchronousReceiveMessageQueueNotification(MessageQueue queue, Activity activity)"}
	name += {"NotifiedReceiveOnMessageQueue;Error NotifiedReceiveOnMessageQueue(MessageQueue queue, void **buffer)"}
	name += {"AllocateMessageQueueBuffer;Error AllocateMessageQueueBuffer(MessageQueue queue, void **buffer)"}
	name += {"FreeMessageQueueBuffer;Error FreeMessageQueueBuffer(MessageQueue queue, void **buffer)"}
	name += {"GetMessageCountForMessageQueue;Error GetMessageCountForMessageQueue(MessageQueue queue, Value *messageCount)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/INTEGRITY_error.h
	name += {"ExceptionOnError;ExceptionOnError(TheError)"}
	name += {"PrintErrorHandler;Error PrintErrorHandler(Task TheTask, AddressSpace TheAddressSpace, Error TheError, char *Filename, int Linenumber, Address PC)"}
	name += {"RegisterTaskWithErrorHandlers;Error RegisterTaskWithErrorHandlers(Task TheTask)"}
	name += {"DeregisterTaskWithErrorHandlers;Error DeregisterTaskWithErrorHandlers(void *TEp)"}
	name += {"RegisterTaskErrorHandler;Error RegisterTaskErrorHandler(Task TheTask, IErrorHandler TaskHandler)"}
	name += {"SystemHandlerInit;Error SystemHandlerInit(IErrorHandler TheHandler, Value StackSize)"}
	name += {"GetSystemHandlerConnection;Connection GetSystemHandlerConnection(void)"}
	name += {"DEFINE_ERROR_OPTIONS;DEFINE_ERROR_OPTIONS(flags, AH, size)"}
	name += {"AddressSpaceErrorHandlingInit;Error AddressSpaceErrorHandlingInit(void)"}
	name += {"__CheckError;Error __CheckError(Error TheError, char *Filename, int line_num)"}
	name += {"LocalGetSystemErrorHandlerConnection;Connection LocalGetSystemErrorHandlerConnection(void)"}
	name += {"UserException;UserException(TheTask, Type)"}
	name += {"__UserException;static INLINE Error __UserException(Task TheTask, unsigned short Type, char *Filename, unsigned Filenamelen, int Linenumber)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/INTEGRITY_inlines.h
	# Close
	name += {"CloseMemoryRegion;static INLINE Error CloseMemoryRegion(MemoryRegion TheMemoryRegion)"}
	name += {"CloseAddressSpace;static INLINE Error CloseAddressSpace(AddressSpace TheAddressSpace)"}
	name += {"CloseTask;static INLINE Error CloseTask(Task TheTask)"}
	name += {"CloseConnection;static INLINE Error CloseConnection(Connection TheConnection)"}
	name += {"CloseActivity;static INLINE Error CloseActivity(Activity TheActivity)"}
	name += {"CloseClock;static INLINE Error CloseClock(Clock TheClock)"}
	name += {"CloseIODevice;static INLINE Error CloseIODevice(IODevice TheIODevice)"}
	name += {"CloseLink;static INLINE Error CloseLink(Link TheLink)"}
	name += {"CloseSemaphore;static INLINE Error CloseSemaphore(Semaphore TheSemaphore)"}
	# Link
	name += {"LinkMemoryRegion;static INLINE Error LinkMemoryRegion(MemoryRegion FromMemoryRegion, MemoryRegion *NewMemoryRegion)"}
	name += {"LinkAddressSpace;static INLINE Error LinkAddressSpace(AddressSpace FromAddressSpace, AddressSpace *NewAddressSpace)"}
	name += {"LinkTask;static INLINE Error LinkTask(Task FromTask, Task *NewTask)"}
	name += {"LinkConnection;static INLINE Error LinkConnection(Connection FromConnection, Connection *NewConnection)"}
	name += {"LinkActivity;static INLINE Error LinkActivity(Activity FromActivity, Activity *NewActivity)"}
	name += {"LinkClock;static INLINE Error LinkClock(Clock FromClock, Clock *NewClock)"}
	name += {"LinkIODevice;static INLINE Error LinkIODevice(IODevice FromIODevice, IODevice *NewIODevice)"}
	name += {"LinkLink;static INLINE Error LinkLink(Link FromLink, Link *NewLink)"}
	name += {"LinkSemaphore;static INLINE Error LinkSemaphore(Semaphore FromSemaphore, Semaphore *NewSemaphore)"}
	# Give
	name += {"GiveMemoryRegion;static INLINE Error GiveMemoryRegion(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, MemoryRegion TheMemoryRegion)"}
	name += {"GiveAddressSpace;static INLINE Error GiveAddressSpace(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, AddressSpace TheAddressSpaceToGive)"}
	name += {"GiveTask;static INLINE Error GiveTask(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Task FromTask)"}
	name += {"GiveConnection;static INLINE Error GiveConnection(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Connection TheConnection)"}
	name += {"GiveActivity;static INLINE Error GiveActivity(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Activity TheActivity)"}
	name += {"GiveClock;static INLINE Error GiveClock(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Clock TheClock)"}
	name += {"GiveIODevice;static INLINE Error GiveIODevice(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, IODevice TheIODevice)"}
	name += {"GiveLink;static INLINE Error GiveLink(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Link TheLink)"}
	name += {"GiveSemaphore;static INLINE Error GiveSemaphore(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Semaphore TheSemaphore)"}
	# Take
	name += {"TakeMemoryRegion;static INLINE Error TakeMemoryRegion(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, MemoryRegion *NewMemoryRegion)"}
	name += {"TakeAddressSpace;static INLINE Error TakeAddressSpace(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, AddressSpace *NewAddressSpace)"}
	name += {"TakeTask;static INLINE Error TakeTask(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Task *NewTask)"}
	name += {"TakeConnection;static INLINE Error TakeConnection(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Connection *NewConnection)"}
	name += {"TakeClock;static INLINE Error TakeClock(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Clock *NewClock)"}
	name += {"TakeIODevice;static INLINE Error TakeIODevice(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, IODevice *NewIODevice)"}
	name += {"TakeLink;static INLINE Error TakeLink(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Link *NewLink)"}
	name += {"TakeSemaphore;static INLINE Error TakeSemaphore(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Semaphore *NewSemaphore)"}
	name += {"TakeActivity;static INLINE Error TakeActivity(AddressSpace TheAddressSpace, ObjectIndex TheObjectIndex, Activity *NewActivity)"}
	# ObjectNumber
	name += {"MemoryRegionObjectNumber;static INLINE MemoryRegion MemoryRegionObjectNumber(ObjectIndex TheObjectIndex)"}
	name += {"AddressSpaceObjectNumber;static INLINE AddressSpace AddressSpaceObjectNumber(ObjectIndex TheObjectIndex)"}
	name += {"TaskObjectNumber;static INLINE Task TaskObjectNumber(ObjectIndex TheObjectIndex)"}
	name += {"ConnectionObjectNumber;static INLINE Connection ConnectionObjectNumber(ObjectIndex TheObjectIndex)"}
	name += {"ActivityObjectNumber;static INLINE Activity ActivityObjectNumber(ObjectIndex TheObjectIndex)"}
	name += {"ClockObjectNumber;static INLINE Clock ClockObjectNumber(ObjectIndex TheObjectIndex)"}
	name += {"IODeviceObjectNumber;static INLINE IODevice IODeviceObjectNumber(ObjectIndex TheObjectIndex)"}
	name += {"LinkObjectNumber;static INLINE Link LinkObjectNumber(ObjectIndex TheObjectIndex)"}
	name += {"SemaphoreObjectNumber;static INLINE Semaphore SemaphoreObjectNumber(ObjectIndex TheObjectIndex)"}
	name += {"WaitForSemaphore;static INLINE Error WaitForSemaphore(Semaphore TheSemaphore)"}
	name += {"TimedWaitForSemaphore;static INLINE Error TimedWaitForSemaphore(Semaphore TheSemaphore, Time *Interval)"}
	name += {"AbsoluteTimedWaitForSemaphore;static INLINE Error AbsoluteTimedWaitForSemaphore(Semaphore TheSemaphore, Time *Timeout)"}
	name += {"ReadBlockFromIODevice;static INLINE Error ReadBlockFromIODevice(IODevice TheIODevice, Value BlockType, Value BlockNumber, MemoryRegion TheMemoryRegion)"}
	name += {"WriteBlockToIODevice;static INLINE Error WriteBlockToIODevice(IODevice TheIODevice, Value BlockType, Value BlockNumber, MemoryRegion TheMemoryRegion)"}
	name += {"CheckForActivity;static INLINE Error CheckForActivity(Value *Identification)"}
	name += {"WaitForActivity;static INLINE void WaitForActivity(Value *Identification)"}
	name += {"WaitForActivityAndReturnStatus;WaitForActivityAndReturnStatus(Identification, NULL)"}
	name += {"ResetActivity;static INLINE Error ResetActivity(Activity TheActivity)"}
	name += {"BumpStackPointer;static INLINE Address BumpStackPointer(Address Stack, Address Size)"}
	name += {"StackGrowsDown;static INLINE Boolean StackGrowsDown(void)"}
	name += {"EventLogMask;static INLINE Error EventLogMask(unsigned int newmask)"}
	name += {"CommonCreateTask;static INLINE Error CommonCreateTask(Value Priority, Address EntryPoint, Address StackSize, char *Name, Task *T)"}
	name += {"CommonCloseTask;static INLINE Error CommonCloseTask(Task TheTask)"}
	name += {"GetTaskProgramCounter;static INLINE Error GetTaskProgramCounter(Task TheTask, Address *ProgramCounter)"}
	name += {"SetTaskProgramCounter;static INLINE Error SetTaskProgramCounter(Task TheTask, Address ProgramCounter)"}
	name += {"GetTaskStackPointer;static INLINE Error GetTaskStackPointer(Task TheTask, Address *StackPointer)"}
	name += {"SetTaskStackPointer;static INLINE Error SetTaskStackPointer(Task TheTask, Address StackPointer)"}
	name += {"ReadTaskProgramCounter;static INLINE Error ReadTaskProgramCounter(Task TheTask, Address *ProgramCounter)"}
	name += {"WriteTaskProgramCounter;static INLINE Error WriteTaskProgramCounter(Task TheTask, Address ProgramCounter)"}
	name += {"ReadTaskStackPointer;static INLINE Error ReadTaskStackPointer(Task TheTask, Address *StackPointer)"}
	name += {"WriteTaskStackPointer;static INLINE Error WriteTaskStackPointer(Task TheTask, Address StackPointer)"}
	name += {"GetTaskRegister;static INLINE Error GetTaskRegister(Task TheTask, Address RegisterNumber, Value *TheValue)"}
	name += {"SetTaskRegister;static INLINE Error SetTaskRegister(Task TheTask, Address RegisterNumber, Value TheValue)"}
	name += {"ReadTaskRegister;static INLINE Error ReadTaskRegister(Task TheTask, Address RegisterNumber, Value *TheValue)"}
	name += {"WriteTaskRegister;static INLINE Error WriteTaskRegister(Task TheTask, Address RegisterNumber, Value TheValue)"}
	name += {"GetTaskPriority;static INLINE Error GetTaskPriority(Task TheTask, Value *Priority)"}
	name += {"SetTaskPriority;static INLINE Error SetTaskPriority(Task TheTask, Value Priority, Boolean FirstInPriority)"}
	name += {"DeliverAddressFault;static INLINE Error DeliverAddressFault(Activity TheActivity)"}
	name += {"GetPhysicalAddress;static INLINE Error GetPhysicalAddress(AddressSpace TheAddressSpace, Address VirtualAdr, Address VirtualLen, Address *RealAdr)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/memory_region.h
	name += {"CopyAttributes;Error CopyAttributes(MemoryRegion source, MemoryRegion destination)"}
	name += {"InitializeMemoryPool;Error InitializeMemoryPool(MemoryRegionPool **pool, MemoryRegion region)"}
	name += {"AddToMemoryPool;Error AddToMemoryPool(MemoryRegionPool *pool, MemoryRegion region)"}
	name += {"ShutdownMemoryPool;Error ShutdownMemoryPool(MemoryRegionPool *pool, MemoryRegion *region)"}
	name += {"AllocateMemoryRegion;Error AllocateMemoryRegion(MemoryRegionPool *pool, Address first, Address last, MemoryRegion *region)"}
	name += {"AllocateAlignedMemoryRegion;Error AllocateAlignedMemoryRegion(MemoryRegionPool *pool, Value size, Value log_size, MemoryRegion *region)"}
	name += {"AllocateAlignedMemoryRegionNoMalloc;Error AllocateAlignedMemoryRegionNoMalloc(MemoryRegionPool *pool, Value size, Value log_size, MemoryRegion *region)"}
	name += {"AllocateAnyMemoryRegion;Error AllocateAnyMemoryRegion(MemoryRegionPool *pool, Value size, MemoryRegion *region)"}
	name += {"DeallocateMemoryRegion;Error DeallocateMemoryRegion(MemoryRegionPool *pool, MemoryRegion region)"}
	name += {"PrintMemoryPool;Error PrintMemoryPool(MemoryRegionPool *pool, FILE *printStream)"}
	name += {"MapMemory;Error MapMemory(MemoryRegionPool *pool, MemoryRegion physical, MemoryRegion *virtualMR, Address *address, Value *length)"}
	name += {"MapMemoryWithAttributes;Error MapMemoryWithAttributes(MemoryRegionPool *pool, MemoryRegion physical, MemoryRegion *virtual_region, Address *virtual_address, Value *virtual_length, Value mask, Value attr)"}
	name += {"UnmapMemory;Error UnmapMemory(MemoryRegionPool *pool, MemoryRegion virtualMR)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/INTEGRITY_types.h
	# Error
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/INTEGRITY_types.h.table.h
	name += {"ErrorString;const char *ErrorString(enum Error val)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/INTEGRITY_version.h
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/sched.h
	name += {"__sched_policy_is_valid;__sched_policy_is_valid(x)"}
	name += {"__sched_param_is_valid;int __sched_param_is_valid(int policy, const struct sched_param *param)"}
	name += {"__fix_sched_param;int __fix_sched_param(int policy, struct sched_param *param)"}
	name += {"sched_yield;int sched_yield(void)"}
	name += {"sched_get_priority_max;int sched_get_priority_max(int)"}
	name += {"sched_get_priority_min;int sched_get_priority_min(int)"}
	name += {"sched_rr_get_interval;int sched_rr_get_interval(pid_t pid, struct timespec *interval)"}
	name += {"sched_getparam;int sched_getparam(pid_t pid, struct sched_param *param)"}
	name += {"sched_getscheduler;int sched_getscheduler(pid_t pid)"}
	name += {"sched_setparam;int sched_setparam(pid_t pid, const struct sched_param *p)"}
	name += {"sched_setscheduler;int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/malloc_pool.h
	name += {"initMallocPool;Error initMallocPool(MallocPool *pool, MemoryRegion mr)"}
	name += {"initMallocPoolWithRange;Error initMallocPoolWithRange(struct MallocPoolStruct **pool, Address first, Address last)"}
	name += {"initMallocPoolWithRangeAndMutex;Error initMallocPoolWithRangeAndMutex(struct MallocPoolStruct **pool, Address first, Address last, Semaphore mutex)"}
	name += {"addMemoryRegionToPool;Error addMemoryRegionToPool(MallocPool pool, MemoryRegion mr)"}
	name += {"addMemoryRangeToPool;Error addMemoryRangeToPool(MallocPool pool, Address first, Address last)"}
	name += {"mallocFromPool;void *mallocFromPool(MallocPool pool, size_t size)"}
	name += {"freeToPool;void freeToPool(MallocPool pool, void *buf)"}
	name += {"getMemoryRegionFromPool;Error getMemoryRegionFromPool(MallocPool *pool, MemoryRegion *mr)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/mailbox.h
	name += {"CreateAndRegisterMailbox;Error CreateAndRegisterMailbox(char *name)"}
	name += {"OpenMailbox;Error OpenMailbox(char *name, Mailbox *mailbox)"}
	name += {"CloseMailbox;Error CloseMailbox(Mailbox *mailbox)"}
	name += {"DeleteMailbox;Error DeleteMailbox(char *name)"}
	name += {"FetchMail;Error FetchMail(Mailbox *box, Value boxnum, Address *message)"}
	name += {"SendMail;Error SendMail(Mailbox *box, Value boxnum, Address message)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/flashdev.h
	name += {"FlashReadBlock;int FlashReadBlock(FlashDriverInfo *fdi, int blockNum, char *buf, int offset, int length)"}
	name += {"FlashWriteBlock;int FlashWriteBlock(FlashDriverInfo *fdi, int blockNum, char *buf, int length)"}
	name += {"FlashEraseBlock;int FlashEraseBlock(FlashDriverInfo *fdi, int blockNum)"}
	name += {"FlashPatchBlock;int FlashPatchBlock(FlashDriverInfo *fdi, int blockNum, char *buf, int offset, int length)"}
	name += {"FlashIOInit;Error FlashIOInit(FlashDriverInfo **fdi, char *IODeviceName, char *FlashMemoryRegionName)"}
	name += {"FlashRead;int FlashRead(FlashDriverInfo *fdi, int offsetIntoFlash, int length, char *buf)"}
	name += {"FlashWrite;int FlashWrite(FlashDriverInfo *fdi, int offsetIntoFlash, int length, char *buf)"}
	name += {"FlashIOExit;void FlashIOExit(FlashDriverInfo *flashDriverInfo, char *IODeviceName, char *FlashMemoryRegionName)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/cdrw.h
	name += {"CDRWBurnCommand;Error CDRWBurnCommand(IODevice iodev, char *filename)"}
	name += {"CDRWBlankCommand;Error CDRWBlankCommand(IODevice CDRWDev)"}
	name += {"CDRWDiscPresentCommand;Error CDRWDiscPresentCommand(IODevice CDRWDev)"}
	name += {"CDRWMultiSessionInfoCommand;Error CDRWMultiSessionInfoCommand(IODevice CDRWDev, Value *lastSessionStart, Value *nextSessionStart)"}
	name += {"CDRWGrabDevice;Error CDRWGrabDevice(IODevice *CDRWDev, const char *devicename, const char *devpasswd)"}
	name += {"CDRWReleaseDevice;Error CDRWReleaseDevice(IODevice CDRWDev, const char *devicename, const char *devpasswd)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/user_iodevice.h
	name += {"CreateUserIODevice;Error CreateUserIODevice(UserIODevice *uiodp, UserIODeviceDriver driver, Connection iodConnection, Activity handlerActivity, Activity notifyActivity, Address TheAddress, Address Length, void *context)"}
	name += {"DoUserIODeviceHandlerActivity;Error DoUserIODeviceHandlerActivity(UserIODevice uiod, Error err)"}
	name += {"DoUserIODeviceNotifyActivity;Error DoUserIODeviceNotifyActivity(UserIODevice uiod, Error err)"}
	name += {"NotifyUserIODevice;Error NotifyUserIODevice(UserIODevice uiod)"}
	name += {"CloseUserIODevice;Error CloseUserIODevice(UserIODevice uiod)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/boottable.h
	name += {"TABLE;TABLE(tbl)"}
	name += {"SetupBootTables;void SetupBootTables(void)"}
	name += {"ForceInBootTable;void ForceInBootTable(void)"}
	name += {"SetupTasks;Error SetupTasks(GlobalTable *LoadTable, SignedValue AddressSpaceNumber)"}
	name += {"RunInitialTasks;void RunInitialTasks(GlobalTable *LoadTable, SignedValue AddressSpaceNumber)"}
	name += {"GetAddressSpace;AddressSpace GetAddressSpace(Address AddressSpaceNumber, GlobalTable *LoadTable, AddressSpaceInfo *AddressSpaceTable)"}
	name += {"SetupSharedLibrarySegments;Error SetupSharedLibrarySegments(GlobalTable *LoadTable, GlobalTable *SystemTable)"}
	name += {"SetupAddressSpaces;Error SetupAddressSpaces(GlobalTable *LoadTable, AddressSpaceInfo *TheAddressSpaceTable, SectionInfo *sectioninfo)"}
	name += {"SetupVirtualAddressSpace;Error SetupVirtualAddressSpace(GlobalTable *LoadTable, Address AddressSpaceNumber, SectionInfo *sectioninfo)"}
	name += {"ZeroAlloc;void *ZeroAlloc(Address Size)"}
	name += {"SetupObjectTables;Error SetupObjectTables(GlobalTable *LoadTable, AddressSpaceInfo *TheAddressSpaceTable, TaskInfo *TheTaskTable)"}
	name += {"SetupObjectTableInAddressSpace;Error SetupObjectTableInAddressSpace(GlobalTable *LoadTable, Address AddressSpaceNumber)"}
	name += {"PushPrimaryActivitiesIntoAddressSpaces;Error PushPrimaryActivitiesIntoAddressSpaces(GlobalTable *LoadTable, SignedValue AddressSpaceNumber)"}
	name += {"FindSection;Error FindSection(SegmentInfo *PhysicalSegment, SectionInfo *sectioninfo, Address *sectionlength, INT4 *sectionoffset, UINT4 *needcopy)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/event_flags.h
	name += {"OpenEventFlagGroup;Error OpenEventFlagGroup(char *name, int create, EventFlagGroup *efg)"}
	name += {"GetEventFlags;Error GetEventFlags(EventFlagGroup *efg, unsigned long *flags)"}
	name += {"ModifyEventFlags;Error ModifyEventFlags(EventFlagGroup *efg, unsigned long flags, unsigned long mask)"}
	name += {"WaitForEventFlags;Error WaitForEventFlags(EventFlagGroup *efg, unsigned long flags, unsigned long mask, Value mode, unsigned long *actual_flags)"}
	name += {"CloseEventFlagGroup;Error CloseEventFlagGroup(EventFlagGroup *efg)"}
	name += {"DeleteEventFlagGroup;Error DeleteEventFlagGroup(char *name)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/../bsp/bsp.h
	name += {"ROUNDUP;ROUNDUP(i,size)"}
	name += {"CarveOutBootTable;void CarveOutBootTable(MemoryRange[2])"}
	name += {"GetBootTableBounds;Error GetBootTableBounds(Address *First, Address *Last)"}
	name += {"LoadModule;Error LoadModule(Address TheImage, const char *TheImageName, Boolean Wait)"}
	name += {"UnloadModule;Error UnloadModule(const char *TheImageName, Boolean Wait)"}
	name += {"ForceOutputToConsole;void ForceOutputToConsole(Boolean flag)"}
	name += {"BSP_Doze;void BSP_Doze(void)"}
	name += {"BSP_DebuggerHaltSystem;void BSP_DebuggerHaltSystem(void)"}
	name += {"BSP_DebuggerRestartSystem;void BSP_DebuggerRestartSystem(void)"}
	name += {"DebuggerHaltSystem;void DebuggerHaltSystem(void)"}
	name += {"DebuggerRestartSystem;void DebuggerRestartSystem(void)"}
	name += {"BSP_StartTrace;void BSP_StartTrace(Address arg)"}
	name += {"BSP_StopTrace;void BSP_StopTrace(Address arg)"}
	name += {"SetExceptionHandler;void SetExceptionHandler(VECT vect, HANDLER h, Address id, const char *name)"}
	name += {"ExceptionHandler;void ExceptionHandler(XFRAME *xf, Address nested, VECT vect)"}
	name += {"SchedulerCallOnEveryTick;void SchedulerCallOnEveryTick(CALL *call, CALLBACK cb, Address id)"}
	name += {"INTERRUPT_TimerTick;void INTERRUPT_TimerTick(Address pc)"}
	name += {"INTERRUPT_AtomicModify;Address INTERRUPT_AtomicModify(Address *addr, Address mask, Address delta)"}
	name += {"INTERRUPT_TestAndSet;Error INTERRUPT_TestAndSet(Address *addr, Address old, Address newval)"}
	name += {"INTERRUPT_PlaceSynchronousCall;int INTERRUPT_PlaceSynchronousCall(CALL *call, Address id)"}
	name += {"INTERRUPT_PlaceDeferredSynchronousCall;int INTERRUPT_PlaceDeferredSynchronousCall(CALL *call, Address id)"}
	name += {"INTERRUPT_PlaceCallOnNextTick;int INTERRUPT_PlaceCallOnNextTick(CALL *call, Address id)"}
	name += {"INTERRUPT_PlaceTaskSynchronousCall;int INTERRUPT_PlaceTaskSynchronousCall(struct TaskContextStruct *TheTaskContext, CALL *call, Address id)"}
	name += {"INTERRUPT_PlaceTaskDeferredSynchronousCall;int INTERRUPT_PlaceTaskDeferredSynchronousCall(struct TaskContextStruct *TheTaskContext, CALL *call, Address id)"}
	name += {"INTERRUPT_PlaceTaskSynchronousCallWithFallback;int INTERRUPT_PlaceTaskSynchronousCallWithFallback(struct TaskContextStruct *TheTaskContext, CALL *call, Address id)"}
	name += {"INTERRUPT_PlaceTaskDeferredSynchronousCallWithFallback;int INTERRUPT_PlaceTaskDeferredSynchronousCallWithFallback(struct TaskContextStruct *TheTaskContext, CALL *call, Address id)"}
	name += {"INTERRUPT_InitCall;void INTERRUPT_InitCall(CALL *call, CALLBACK cb, const char *name)"}
	name += {"INTERRUPT_PanicHelper;void INTERRUPT_PanicHelper(const char *file, int line)"}
	name += {"INTERRUPT_MemoryBarrier;void INTERRUPT_MemoryBarrier(void)"}
	name += {"INTERRUPT_InitReleaseSemaphoreCall;void INTERRUPT_InitReleaseSemaphoreCall(CALL *)"}
	name += {"INTERRUPT_ReleaseSemaphore;void INTERRUPT_ReleaseSemaphore(CALL *, Semaphore)"}
	name += {"INTERRUPT_GetHighResTime;void INTERRUPT_GetHighResTime(Time *CurrentTime)"}
	name += {"__INTERRUPT_RaiseCurrentExceptionPriority;Error __INTERRUPT_RaiseCurrentExceptionPriority(UINT4)"}
	name += {"BSP_FlushEntireCache;void BSP_FlushEntireCache(void)"}
	name += {"INTERRUPT_AtomicDecrement;INLINE Address INTERRUPT_AtomicDecrement(Address *pval)"}
	name += {"INTERRUPT_AtomicIncrement;INLINE Address INTERRUPT_AtomicIncrement(Address *pval)"}
	name += {"INTERRUPT_AtomicRead;INLINE Address INTERRUPT_AtomicRead(Address *pval)"}
	name += {"INTERRUPT_AtomicWrite;INLINE Address INTERRUPT_AtomicWrite(Address *pval, Address val)"}
	name += {"INTERRUPT_Panic;INTERRUPT_Panic()"}
	name += {"INTERRUPT_InstallUserCallHandler;Error INTERRUPT_InstallUserCallHandler(UserCallHandler TheCall)"}
	name += {"INTERRUPT_ReserveMessageBuffer;Error INTERRUPT_ReserveMessageBuffer(MessageBufferPool pool, Value *bufNum, void **data)"}
	name += {"INTERRUPT_AllocateMessageQueueBuffer;Error INTERRUPT_AllocateMessageQueueBuffer(MessageQueue queue, void **buffer)"}
	name += {"INTERRUPT_SendOnMessageQueue;Error INTERRUPT_SendOnMessageQueue(MessageQueue queue, const void *buffer)"}
	name += {"CreateUniversalIODevice;Error CreateUniversalIODevice(IODevice *NewUniversalIODevice)"}
	name += {"BSP_GetMemoryMap;const MemoryRange *BSP_GetMemoryMap(Address *NumberOfRanges, Address *KernelRange)"}
	name += {"BSP_MemoryTableSetup;void BSP_MemoryTableSetup(MemoryRange LocalTable[], int NumRanges, int krn_range, int memsize)"}
	name += {"BSP_GetTCPIPMemory;const MemoryRange *BSP_GetTCPIPMemory(void)"}
	name += {"BSP_GetTickTimerFrequency;void BSP_GetTickTimerFrequency(time_t *Frequency, UINT4 *FrequencyFraction, UINT4 *Fraction, UINT4 *LowFraction)"}
	name += {"BSP_PhysicalSafeRead;Error BSP_PhysicalSafeRead(Address space, Address fromAddr, Address size, SAFETY flags, Address *value)"}
	name += {"BSP_PhysicalSafeWrite;Error BSP_PhysicalSafeWrite(Address space, Address toAddr, Address size, SAFETY flags, Address value)"}
	name += {"BSP_NumVects;int BSP_NumVects(void)"}
	name += {"BSP_Initialize;void BSP_Initialize(void)"}
	name += {"BSP_UserInitialize;void BSP_UserInitialize(void)"}
	name += {"BSP_UserInitializeDevices;void BSP_UserInitializeDevices(void)"}
	name += {"BSP_TurnOnErrorIndicator;void BSP_TurnOnErrorIndicator(void)"}
	name += {"BSP_TurnOffErrorIndicator;void BSP_TurnOffErrorIndicator(void)"}
	name += {"BSP_IntExceptionHandler;void BSP_IntExceptionHandler(XFRAME *xf, Address nested)"}
	name += {"BSP_CopyFromPhysicalDomain;Error BSP_CopyFromPhysicalDomain(Address FromSpace, Address FromAddress, Address ToAddress, Address *Length, Value CheckWrite, Value Preemptible, Address *RecommendedSize)"}
	name += {"BSP_CopyToPhysicalDomain;Error BSP_CopyToPhysicalDomain(Address FromAddress, Address ToSpace, Address ToAddress, Address *Length, Value Preemptible, Address *RecommendedSize)"}
	name += {"BSP_PhysicalFill;Error BSP_PhysicalFill(Address TheSpace, Address *TheAddress, Address TheValue, Address *Length)"}
	name += {"BSP_ControlRegisterBase;Address BSP_ControlRegisterBase(void)"}
	name += {"BSP_GetCurrentCpu;Value BSP_GetCurrentCpu(void)"}
	name += {"BSP_InterruptCpu;Error BSP_InterruptCpu(Value cpu, Value kind)"}
	name += {"BSP_BootCpu;Error BSP_BootCpu(Value which, Address entrypoint)"}
	name += {"BSP_CopyAllROMAtRestart;Boolean BSP_CopyAllROMAtRestart(void)"}
	name += {"BSP_SaveNetConfig;Error BSP_SaveNetConfig(void)"}
	name += {"BSP_LoadNetConfig;void BSP_LoadNetConfig(void)"}
	name += {"BSP_PostLoadNetConfig;void BSP_PostLoadNetConfig(void)"}
	name += {"BSP_GetMemoryBankSize;Error BSP_GetMemoryBankSize(MemoryType type, Value bank, Address *size)"}
	name += {"BSP_GetFlashBase;Address BSP_GetFlashBase(void)"}
	name += {"BSP_GetFlashConfigRange;Error BSP_GetFlashConfigRange(INT4 *Start, INT4 *End)"}
	name += {"BSP_GetFlashDriverName;const char *BSP_GetFlashDriverName(Address base)"}
	name += {"BSP_PrepareForReset;void BSP_PrepareForReset(void)"}
	name += {"BSP_EnableInterrupts;void BSP_EnableInterrupts(void)"}
	name += {"BSP_Reset;void BSP_Reset(void)"}
	name += {"RTOS_TargetName;const char *RTOS_TargetName(void)"}
	name += {"BSP_VirtualMappingAllowed;Error BSP_VirtualMappingAllowed(Address, Address, Value)"}
	name += {"BSP_InitOverride;void BSP_InitOverride(void)"}
	name += {"BSP_SetupBAT;void BSP_SetupBAT(void)"}
	name += {"BSP_IMMRBase;Address BSP_IMMRBase(void)"}
	name += {"BSP_DebugEnabled;Boolean BSP_DebugEnabled(void)"}
	name += {"BSP_PciIrqLineToVector;Error BSP_PciIrqLineToVector(UINT1 pci_irq, VECT *int_vect)"}
	name += {"BSP_EtherBufferCount;void BSP_EtherBufferCount(Value *ReceiveBuffers, Value *TransmitBuffers)"}
	name += {"BSP_GetTCPIPReceiveCount;Value BSP_GetTCPIPReceiveCount(int)"}
	name += {"BSP_GetTCPIPTransmitCount;Value BSP_GetTCPIPTransmitCount(int)"}
	name += {"BSP_ClearMemory;void BSP_ClearMemory(Address Start, Address Length)"}
	name += {"BSP_ClusterManage;Error BSP_ClusterManage(Value Operation)"}
	name += {"BSP_MajorFrameSync;SignedValue BSP_MajorFrameSync(Time *)"}
	name += {"BSP_MinorFrameSync;SignedValue BSP_MinorFrameSync(Time *, Time *)"}
	name += {"BSP_CopySectionFromROM;Boolean BSP_CopySectionFromROM(Boolean InROM, void *destination, void *source, Address size)"}
	name += {"BSP_StartOfPartitionScheduler;void BSP_StartOfPartitionScheduler(void)"}
	name += {"BSP_PartitionSwitchTime;Boolean BSP_PartitionSwitchTime(Time *)"}
	name += {"BSP_ASUnloaded;void BSP_ASUnloaded(Address)"}
	name += {"BSP_RestartComplete;void BSP_RestartComplete(Address)"}
	name += {"BSP_WatchdogInit;void BSP_WatchdogInit(void)"}
	name += {"BSP_RefreshWatchdog;void BSP_RefreshWatchdog(void)"}
	name += {"DIM;DIM(a)"}
	name += {"BSP_DecrementerInterruptInterval;Value BSP_DecrementerInterruptInterval(void)"}
	name += {"HighResDecTimerInitialize;void HighResDecTimerInitialize(void)"}
	name += {"IsimGenericHighResTimerInitialize;void IsimGenericHighResTimerInitialize(void)"}
	name += {"RegisterTimerDriver;Error RegisterTimerDriver(TimerDriver TheTimerDriver, const char *Name, Address InitialClockPermissions, void (*SetTime)(TimerDriver TheTimerDriver, const Time *), Boolean (*GetTime)(TimerDriver TheTimerDriver, Time *), Boolean (*SetAlarm)(TimerDriver TheTimerDriver, const Time *), void (*GetResolution)(TimerDriver TheTimerDriver, Time *), void (*TimerInterruptHandler)(TimerDriver TheTimerDriver))"}
	name += {"INTERRUPT_TimerExpired;void INTERRUPT_TimerExpired(TimerDriver TheTimerDriver)"}
	name += {"ClockInterruptHandler;void ClockInterruptHandler(TimerDriver TheTimerDriver, Time *CurrentTime)"}
	name += {"RegisterTickTimerDriver;void RegisterTickTimerDriver(TickTimerDriver TheTickTimerDriver, const char *Name, const Time *InterruptInterval, Address Fraction)"}
	name += {"RegisterStandardTickTimer;void RegisterStandardTickTimer(void)"}
	name += {"TimerFrequency;int TimerFrequency(void)"}
	name += {"INTERRUPT_IODeviceNotifyTask;void INTERRUPT_IODeviceNotifyTask(IODeviceVector TheIODeviceVector)"}
	name += {"RegisterIODeviceVector;Error RegisterIODeviceVector(IODeviceVector TheIODeviceVector, const char *Name)"}
	name += {"BSP_InitializeDevices;void BSP_InitializeDevices(void)"}
	name += {"SerialInit;void SerialInit(void)"}
	name += {"SerialOutputByte;void SerialOutputByte(int TheByte)"}
	name += {"SerialByteReceived;void SerialByteReceived(int TheByte)"}
	name += {"SerialByteSent;int SerialByteSent(void)"}
	name += {"SerialOutputByteReady;int SerialOutputByteReady(void)"}
	name += {"SerialInputByteReady;int SerialInputByteReady(void)"}
	name += {"SerialInputByte;int SerialInputByte(void)"}
	name += {"SerialSetPolledMode;int SerialSetPolledMode(int polled)"}
	name += {"EtherInit;void EtherInit(void)"}
	name += {"EtherReset;void EtherReset(int devno)"}
	name += {"EtherOutputPacket;void EtherOutputPacket(int devno, UINT1 *ThePacket, int ThePacketLength)"}
	name += {"EtherPacketReceived;int EtherPacketReceived(UINT1 *packet, int devno)"}
	name += {"EtherPacketSent;int EtherPacketSent(void)"}
	name += {"EtherHandlePing;int EtherHandlePing(UINT1 *pkt, UINT4 len, int devno)"}
	name += {"ShowUDP;void ShowUDP(UINT1 *data, UINT4 count)"}
	name += {"DeviceSendUDP;void DeviceSendUDP(UINT1 *data, UINT4 count, UINT4 myport, UINT4 destport, UINT4 dest_ip)"}
	name += {"IndrtGetInterface;UINT4 IndrtGetInterface(void)"}
	name += {"IndrtSetInterface;Error IndrtSetInterface(int, int)"}
	name += {"IsIndrtInterface;static INLINE int IsIndrtInterface(int n)"}
	name += {"RegisterDynamicMemoryRegion;Error RegisterDynamicMemoryRegion(DynamicMemoryRegionReservation *reservation)"}
	name += {"IndEtherInit;void IndEtherInit(void)"}
	name += {"ShowINDRT_IPAddress;void ShowINDRT_IPAddress(void)"}
	name += {"SameEther;int SameEther(UINT1 *, UINT1 *)"}
	name += {"smc2iod_init;void smc2iod_init(void)"}
	name += {"LOGPOS;LOGPOS(x)"}
	name += {"InitializeDiagnosticOutput;void InitializeDiagnosticOutput(void)"}
	name += {"Assert;Assert(t)"}
	name += {"DisplayStr;void DisplayStr(int Level, char *Property, char *Value)"}
	name += {"DisplayHex;void DisplayHex(int Level, char *Property, unsigned long Value)"}
	name += {"DisplayBit;void DisplayBit(int Level, char *Property, unsigned long Value)"}
	name += {"AssertPageIsZero;void AssertPageIsZero(Address TheAddress, Address TheLength)"}
	name += {"consolechar;consolechar(x)"}
	name += {"consoledec;consoledec(x)"}
	name += {"consolehex;consolehex(x)"}
	name += {"consoleval;consoleval(x, y)"}
	name += {"consoleintval;consoleintval(x, y)"}
	name += {"console_Puts;console_Puts(x)"}
	name += {"consoleflush;consoleflush()"}
	name += {"console_add_indent;console_add_indent(x)"}
	name += {"console_printf;static INLINE int console_printf(const char *format, ...)"}
	name += {"BSP_CRCFailure;Error BSP_CRCFailure(Boolean checkingFlash, const char *name, Address addr, Address size)"}
	name += {"BSP_CRCCheck;Boolean BSP_CRCCheck(void)"}
	name += {"BSP_ContextSwitchHook;void BSP_ContextSwitchHook(void *oldtc, void *newtc, Value oldid, Value newid)"}
	name += {"BSP_GetTimeStampFrequency;Value BSP_GetTimeStampFrequency(void)"}
	name += {"BSP_GetTimestamp;struct ull BSP_GetTimestamp(void)"}
	name += {"BSP_DSI_Handler;EVENT BSP_DSI_Handler(XFRAME *xf, Address context)"}
	name += {"BSP_ISI_Handler;EVENT BSP_ISI_Handler(XFRAME *xf, Address context)"}
	name += {"CpuPCIMEM_WRITE2;void CpuPCIMEM_WRITE2(Address addr, UINT2 value)"}
	name += {"CpuPCIMEM_READ2;UINT2 CpuPCIMEM_READ2(Address addr)"}
	name += {"CpuPCIMEM_WRITE4;void CpuPCIMEM_WRITE4(Address addr, UINT4 value)"}
	name += {"CpuPCIMEM_READ4;UINT4 CpuPCIMEM_READ4(Address addr)"}
	name += {"CpuPCI_IO_WRITE4;void CpuPCI_IO_WRITE4(Address addr, UINT4 value)"}
	name += {"CpuPCI_IO_READ4;UINT4 CpuPCI_IO_READ4(Address addr)"}
	name += {"CpuPCI_IO_WRITE1;void CpuPCI_IO_WRITE1(Address addr, UINT4 value)"}
	name += {"CpuPCI_IO_READ1;UINT4 CpuPCI_IO_READ1(Address addr)"}
	name += {"CpuPCICFG_READ4;UINT4 CpuPCICFG_READ4(Address addr)"}
	name += {"CpuPCICFG_WRITE4;void CpuPCICFG_WRITE4(Address addr, UINT4 value)"}
	name += {"CpuPCICFG_READ2;UINT2 CpuPCICFG_READ2(Address addr)"}
	name += {"CpuPCICFG_WRITE2;void CpuPCICFG_WRITE2(Address addr, UINT2 value)"}
	name += {"CpuPCIEND_READ4;UINT4 CpuPCIEND_READ4(UINT4 *word)"}
	name += {"PCI_CFG_BASE;PCI_CFG_BASE(bus,dev,fn)"}
	name += {"MEM_TO_PA;MEM_TO_PA(a)"}
	name += {"MEM_TO_RAM;MEM_TO_RAM(a)"}
	name += {"PA_TO_PMM;PA_TO_PMM(a)"}
	name += {"BSP_PAToPMM;Address BSP_PAToPMM(Address a)"}
	name += {"PCI_MEM_WRITE4;PCI_MEM_WRITE4(b,a,v)"}
	name += {"PCI_MEM_READ4;PCI_MEM_READ4(b,a,v)"}
	name += {"PCI_IO_WRITE4;PCI_IO_WRITE4(b,a,v)"}
	name += {"PCI_IO_READ4;PCI_IO_READ4(b,a,v)"}
	name += {"PCI_MEM_WRITE2;PCI_MEM_WRITE2(b,a,v)"}
	name += {"PCI_MEM_READ2;PCI_MEM_READ2(b,a,v)"}
	name += {"PCI_IO_WRITE1;PCI_IO_WRITE1(b,a,v)"}
	name += {"PCI_IO_READ1;PCI_IO_READ1(b,a,v)"}
	name += {"PCI_CFG_READ4;PCI_CFG_READ4(b,a,v)"}
	name += {"PCI_CFG_WRITE4;PCI_CFG_WRITE4(b,a,v)"}
	name += {"PCI_CFG_READ2;PCI_CFG_READ2(b,a,v)"}
	name += {"PCI_CFG_WRITE2;PCI_CFG_WRITE2(b,a,v)"}
	name += {"PCI_END_UINT4;PCI_END_UINT4(a)"}
	name += {"BSP_VirtualToPhysical;Address BSP_VirtualToPhysical(Address)"}
	name += {"BSP_PhysicalToVirtual;Address BSP_PhysicalToVirtual(Address)"}
	name += {"BSP_CacheInfoInit;void BSP_CacheInfoInit(struct ARMCacheInfo *TheCacheInfo)"}
	name += {"BSP_XScaleEnableCoprocessors;void BSP_XScaleEnableCoprocessors(void)"}
	name += {"CpuGetTBR;struct ull CpuGetTBR(void)"}
	name += {"CpuGetDSISR;Value CpuGetDSISR(void)"}
	name += {"BSP_HostToDeviceAddress;Address BSP_HostToDeviceAddress(Address x)"}
	name += {"BSP_HostToDeviceUpperAddress;Address BSP_HostToDeviceUpperAddress(Address x)"}
	name += {"PA_TO_PMMU;PA_TO_PMMU(a)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/atapi_commands.h
	name += {"ATAPI_ABORT_ON_ERROR;ATAPI_ABORT_ON_ERROR(status, message, error)"}
	name += {"ATAPI_DEVICE_ERROR;ATAPI_DEVICE_ERROR(errorfunc)"}
	name += {"ATAPIRequestSense;Error ATAPIRequestSense(IODevice iodev)"}
	name += {"EndOfDeviceCall;Error EndOfDeviceCall(IODevice iodev, ATAPIStatus *stat, Time *timeout)"}
	name += {"ATAPITestUnitReady;Error ATAPITestUnitReady(IODevice iodev)"}
	name += {"ATAPIMinimalBlank;Error ATAPIMinimalBlank(IODevice iodev)"}
	name += {"ATAPIModeSense10;Error ATAPIModeSense10(IODevice iodev, char p2)"}
	name += {"ATAPIModeSelect10;Error ATAPIModeSelect10(IODevice iodev, UINT2 length)"}
	name += {"ATAPIReadDiscInformation;Error ATAPIReadDiscInformation(IODevice iodev)"}
	name += {"ATAPIReadTrackInformation;Error ATAPIReadTrackInformation(IODevice iodev, UINT2 track)"}
	name += {"ATAPISynchronizeCache;Error ATAPISynchronizeCache(IODevice iodev)"}
	name += {"ATAPICloseTrackSession;Error ATAPICloseTrackSession(IODevice iodev, UINT1 SessionTrack)"}
	name += {"ATAPIGetSenseData;Error ATAPIGetSenseData(IODevice iodev, ATAPIStatus *stat, Time *timeout)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/aio.h
	name += {"aio_read;int aio_read(aiocb_t *)"}
	name += {"aio_write;int aio_write(aiocb_t *)"}
	name += {"lio_listio;int lio_listio(int, aiocb_t *const[], int, struct sigevent *)"}
	name += {"aio_error;int aio_error(const aiocb_t *)"}
	name += {"aio_return;ssize_t aio_return(aiocb_t *)"}
	name += {"aio_cancel;int aio_cancel(int, aiocb_t *)"}
	name += {"aio_suspend;int aio_suspend(const aiocb_t *const[], int, const struct timespec *)"}
	name += {"aio_fsync;int aio_fsync(int, aiocb_t *)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/grp.h
	name += {"getgrgid_r;int getgrgid_r(gid_t _gid, struct group *_grp, char *_buffer, size_t _bufsize, struct group **_result)"}
	name += {"getgrnam_r;int getgrnam_r(const char *_name, struct group *_grp, char *_buffer, size_t _bufsize, struct group **_result)"}
	name += {"getgrnam;struct group *getgrnam(const char *_name)"}
	name += {"getgrgid;struct group *getgrgid(gid_t _gid)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/mqueue.h
	name += {"mq_open;mqd_t mq_open(const char *name, int oflag, ...)"}
	name += {"mq_close;int mq_close(mqd_t mqdes)"}
	name += {"mq_unlink;int mq_unlink(const char *name)"}
	name += {"mq_send;int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned int msg_prio)"}
	name += {"mq_timedsend;int mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct timespec *timeout)"}
	name += {"mq_receive;ssize_t mq_receive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned int *msg_prio)"}
	name += {"mq_timedreceive;ssize_t mq_timedreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned int *msg_prio, const struct timespec *t)"}
	name += {"mq_setattr;int mq_setattr(mqd_t mqdes, const struct mq_attr *mqstat, struct mq_attr *omqstat)"}
	name += {"mq_getattr;int mq_getattr(mqd_t mqdes, struct mq_attr *mqstat)"}
	name += {"mq_notify;int mq_notify(mqd_t mqdes, const struct sigevent *notification)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/mkisofs.h
	name += {"MkisofsInit;Error MkisofsInit(const char *CDRWDevName, const char *CDRWDevPasswd)"}
	name += {"MkisofsShutdown;Error MkisofsShutdown(void)"}
	name += {"MkisofsMakeImage;Error MkisofsMakeImage(const char *arguments, int *returnValue, char *replyBuffer, int replyLength)"}
	name += {"MkisofsMakeMultiSessionImage;Error MkisofsMakeMultiSessionImage(const char *prevSession, const char *newSession, const char *source, const char *arguments, int *returnValue, char *replyBuffer, int replyLength)"}
	name += {"MkisofsBurnImage;Error MkisofsBurnImage(const char *image)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/libqueue.h
	name += {"Q_IsEmpty;int Q_IsEmpty(queue_t *q)"}
	name += {"Q_Remove;void Q_Remove(queue_t *q, qnode_t *n)"}
	name += {"Q_RemoveFront;qnode_t *Q_RemoveFront(queue_t *q)"}
	name += {"Q_PeekFront;qnode_t *Q_PeekFront(queue_t *q)"}
	name += {"Q_InsertFront;void Q_InsertFront(queue_t *q, qnode_t *n)"}
	name += {"Q_InsertBack;void Q_InsertBack(queue_t *q, qnode_t *n)"}
	name += {"Q_PrintQ;void Q_PrintQ(queue_t *q)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/liblbp.h
	name += {"LBP_InitLib;Error LBP_InitLib(UINT4 aux_data, hook_t recv_hook, UINT4 hook_id, unsigned num_nodes, int debug)"}
	name += {"LBP_SendFrame;Error LBP_SendFrame(UINT1 lbp_addr, UINT1 *buf, UINT2 len)"}
	name += {"LBP_CopyData;Error LBP_CopyData(UINT1 *buf, UINT2 buf_len, UINT1 src_addr)"}
	name += {"LBP_SetAuxData;Error LBP_SetAuxData(UINT4 aux_data)"}
	name += {"LBP_ReadAuxData;Error LBP_ReadAuxData(UINT1 lbp_addr, UINT4 *aux_data)"}
	name += {"LBP_GetSelfAddr;Error LBP_GetSelfAddr(UINT1 *addr)"}
	name += {"LBP_Broadcast;Error LBP_Broadcast(UINT1 *buf, UINT2 len, UINT1 *preamble, UINT2 pre_len)"}
	name += {"LBP_SendPreambleFrame;Error LBP_SendPreambleFrame(UINT1 lbp_addr, UINT1 *buf, UINT2 len, UINT1 *preamble, UINT2 pre_len)"}
	name += {"LBP_GetNetInfo;Error LBP_GetNetInfo(struct lbp_net_info *netinfo, int index)"}
	name += {"LBP_SetInitCall;Error LBP_SetInitCall(UINT1 lbp_addr, LBP_Callback call)"}
	name += {"LBP_GetMTU;UINT2 LBP_GetMTU(void)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/keyboard.h
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/netconfig.h
	name += {"AddDefaultGatewayTableEntry;AddDefaultGatewayTableEntry(a, b)"}
	name += {"GetDefaultGatewayTableEntry;GetDefaultGatewayTableEntry(a, b, c)"}
	name += {"NetIfaceConfig;NetConfigError_t NetIfaceConfig(NetConfigOp_t, NetConfigParm_t, int, Address, int)"}
	name += {"SetNetIfaceConfig;NetConfigError_t SetNetIfaceConfig(NetConfigParm_t, int, Address, int)"}
	name += {"GetNetIfaceConfig;NetConfigError_t GetNetIfaceConfig(NetConfigParm_t, int, Address, int)"}
	name += {"GetRoutingTableEntry;NetConfigError_t GetRoutingTableEntry(int, RTENTRY *)"}
	name += {"AddRoutingTableEntry;NetConfigError_t AddRoutingTableEntry(RTENTRY *)"}
	name += {"DelRoutingTableEntry;NetConfigError_t DelRoutingTableEntry(RTENTRY *)"}
	name += {"GetDefaultGateway;NetConfigError_t GetDefaultGateway(UINT4, UINT4 *, UINT4 *)"}
	name += {"SetDefaultGateway;NetConfigError_t SetDefaultGateway(UINT4, int)"}
	name += {"DelDefaultGatewayTableEntry;NetConfigError_t DelDefaultGatewayTableEntry(UINT4)"}
	name += {"FindInterfaceIndex;NetConfigError_t FindInterfaceIndex(int, int *)"}
	name += {"IsIPForwarding;NetConfigError_t IsIPForwarding(Boolean *)"}
	name += {"IPForwardingOn;NetConfigError_t IPForwardingOn(void)"}
	name += {"IPForwardingOff;NetConfigError_t IPForwardingOff(void)"}
	name += {"GetNumRTEntries;int GetNumRTEntries(void)"}
	name += {"GetNumNetIfaces;int GetNumNetIfaces(void)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/autoerr.h
	name += {"__TryToObtainSemaphore;Error __TryToObtainSemaphore(Semaphore P0)"}
	name += {"__TryToClearSemaphore;Error __TryToClearSemaphore(Semaphore P0, SignedValue *P1)"}
	name += {"__StartClose;Error __StartClose(AddressSpace P0, ObjectIndex P1, Boolean P2)"}
	name += {"__FinishClose;Error __FinishClose(AddressSpace P0, ObjectIndex P1, Boolean P2, Object *P3)"}
	name += {"__TrySynchronousSend;Error __TrySynchronousSend(Connection P0, Buffer *P1)"}
	name += {"__TimedSynchronousSend;Error __TimedSynchronousSend(Connection P0, Buffer *P1, Time *P2)"}
	name += {"__TimedSynchronousReceive;Error __TimedSynchronousReceive(Connection P0, Buffer *P1, Time *P2)"}
	name += {"__AbsoluteTimedSynchronousSend;Error __AbsoluteTimedSynchronousSend(Connection P0, Buffer *P1, Time *P2)"}
	name += {"__AbsoluteTimedSynchronousReceive;Error __AbsoluteTimedSynchronousReceive(Connection P0, Buffer *P1, Time *P2)"}
	name += {"MevControl;MevControl(a,b,c,d)"}
	name += {"__DeleteResource;Error __DeleteResource(const char *P0, const char *P1)"}
	name += {"__TestAndSet;Error __TestAndSet(Address *P0, Address P1, Address P2)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/linux_emul.h
	name += {"SetEmulatorParameter;Error SetEmulatorParameter(Connection emul, enum LOI_req param, const char *value)"}
	name += {"SendEmulatorImage;SendEmulatorImage(A, B, C, D)"}
	name += {"SendEmulatorObject;Error SendEmulatorObject(Connection emul, enum LOI_req param, const char *value, Object obj)"}
	name += {"SendEmulatorCommand;Error SendEmulatorCommand(Connection emul, enum LOI_req param)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/fcntl.h
	name += {"FFLAGS;FFLAGS(oflags)"}
	name += {"OFLAGS;OFLAGS(fflags)"}
	name += {"fcntl;int fcntl(int _fno, int _cmd, ...)"}
	name += {"open;int open(const char *_path, int _oflag, ...)"}
	name += {"creat;int creat(const char *_path, mode_t _prot)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/ind_io.h
	name += {"write;ssize_t write(int _fno, const void *_buf, size_t _size)"}
	name += {"read;ssize_t read(int _fno, void *_buf, size_t _size)"}
	name += {"open;int open(const char *_filename, int _flags, ...)"}
	name += {"creat;int creat(const char *_filename, mode_t _prot)"}
	name += {"unlink;int unlink(const char *_name)"}
	name += {"mount;int mount(const char *_fsType, const char *mountPoint, int mountOpts, void *data)"}
	name += {"unmount;int unmount(const char *device, int unmountOpts)"}
	name += {"rmdir;int rmdir(const char *_path)"}
	name += {"readlink;int readlink(const char *_path, char *_buf, size_t _bufsize)"}
	name += {"statfs;int statfs(const char *_path, struct statfs *_buf)"}
	name += {"fstatfs;int fstatfs(int _fno, struct statfs *_buf)"}
	name += {"rename;int rename(const char *_oldName, const char *_newName)"}
	name += {"sync;int sync(void)"}
	name += {"truncate;int truncate(const char *_path, off_t _length)"}
	name += {"pwrite;ssize_t pwrite(int _fno, const void *_buf, size_t _size, off_t _offset)"}
	name += {"pread;ssize_t pread(int _fno, void *_buf, size_t _size, off_t _offset)"}
	name += {"lchown;int lchown(const char *_path, uid_t _uid, gid_t _gid)"}
	name += {"chown;int chown(const char *_path, uid_t _uid, gid_t _gid)"}
	name += {"access;int access(const char *_name, int _mode)"}
	name += {"fchown;int fchown(int _fno, uid_t _uid, gid_t _gid)"}
	name += {"link;int link(const char *_src, const char *_dest)"}
	name += {"symlink;int symlink(const char *_src, const char *_dest)"}
	name += {"chdir;int chdir(const char *_path)"}
	name += {"fchdir;int fchdir(int _fno)"}
	name += {"getcwd;char *getcwd(char *_buf, size_t _size)"}
	name += {"pathconf;long pathconf(const char *_path, int _name)"}
	name += {"fpathconf;long fpathconf(int _fno, int _name)"}
	name += {"chroot;int chroot(const char *_path)"}
	name += {"fchroot;int fchroot(int _fno)"}
	name += {"utimes;int utimes(const char *_path, const struct timeval *_ptv)"}
	name += {"lutimes;int lutimes(const char *_path, const struct timeval *_ptv)"}
	name += {"futimes;int futimes(int _fno, const struct timeval *_ptv)"}
	name += {"mknod;int mknod(const char *_path, mode_t _mode, int _dev)"}
	name += {"lockf;int lockf(int _fno, int _cmd, off_t _len)"}
	name += {"flock;int flock(int _fno, int _cmd)"}
	name += {"pipe;int pipe(int _fildes[2])"}
	name += {"InitLibVFS;Error InitLibVFS(void)"}
	name += {"InitLibVFSGlobals;Error InitLibVFSGlobals(void)"}
	name += {"ShutdownLibVFS;Error ShutdownLibVFS(void)"}
	name += {"WaitForFileSystemInitialization;Error WaitForFileSystemInitialization(void)"}
	name += {"hostio_open;int hostio_open(const char *filename, int mode)"}
	name += {"hostio_fopen;FILE *hostio_fopen(const char *filename, const char *mode)"}
	name += {"hostio_creat;int hostio_creat(const char *filename, int prot)"}
	name += {"hostio_unlink;int hostio_unlink(const char *filename)"}
	name += {"hostio_rename;int hostio_rename(const char *oldName, const char *newName)"}
	name += {"hostio_stat;int hostio_stat(const char *name, struct stat *_buf)"}
	name += {"hostio_truncate;int hostio_truncate(const char *name, off_t length)"}
	name += {"hostio_access;int hostio_access(const char *name, int mode)"}
	name += {"dup;int dup(int _fno)"}
	name += {"dup2;int dup2(int _fno, int _fno2)"}
	name += {"close;int close(int _fno)"}
	name += {"lseek;off_t lseek(int _fno, off_t _offset, int _how)"}
	name += {"tell;off_t tell(int _fno)"}
	name += {"ioctl;int ioctl(int fd, unsigned long request, ...)"}
	name += {"fsync;int fsync(int _fno)"}
	name += {"fdatasync;int fdatasync(int _fno)"}
	name += {"ftruncate;int ftruncate(int _fno, off_t _length)"}
	name += {"VFSPollConnectionToServer;Error VFSPollConnectionToServer(Activity theActivity, Boolean initial)"}
	name += {"getpid;int getpid(void)"}
	name += {"remap;int remap(void *target, void *source, int length)"}
	# From file /home/bison/terry/rtos-i50/rtos/INTEGRITY-include/ind_fd.h
	name += {"FDIsUsable;Boolean FDIsUsable(int fno)"}
	name += {"FDIsUsuable;Boolean FDIsUsuable(int fno)"}
	name += {"FDCloseAll;void FDCloseAll(void)"}
	name += {"FDCount;int FDCount(void)"}
	name += {"FDGetCurrentTableSize;int FDGetCurrentTableSize(void)"}
	name += {"FDGetHighestUsable;int FDGetHighestUsable(void)"}
	name += {"AllocateNullConsoleDescriptor;int AllocateNullConsoleDescriptor(void)"}
	name += {"FDSwapOutTable;struct fd_table_struct *FDSwapOutTable(void)"}
	name += {"FDSwapInTable;int FDSwapInTable(struct fd_table_struct *origfdtable)"}
    }
}
