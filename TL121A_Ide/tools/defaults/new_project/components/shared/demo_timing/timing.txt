DESCRIPTION:

    Improving the performance of your application can be a difficult task.  
    What lines of code are using the most cycles?  What functions should you
    concentrate your optimization efforts on to yield the greatest performance
    improvement?  Can you save on RAM by placing infrequently executed code
    in ROM?  

    You can only answer these questions based on the run-time characteristics
    of your application.  Performance Profiling gives you insight into these
    issues.  Profiling information can be viewed in the form of reports 
    as well as interactively from within the MULTI debugger.  

DEMO SCRIPT:

1. Configure the Project, Build it, Connect to a Remote Target, and open it
   in the Debugger.

    You may need to make a few minor changes to this project to allow
    timing profiling data to be collected. Refer to the instructions in the
    comment at the top of tune.c for details.

    Build the project by clicking the Build button in the MULTI Project
    Manager.

    Connect to a remote target by clicking the Connect button.

    Open the Debugger on the Current Project by clicking the Debug button.

2. Running the Application

    In order to enable profiling on a project pre-configured to generate 
    timing analysis code select the menu option "View->Profile...".
    In order to collect timing data you must open profiling before
    downloading, running, or stepping your program.

    Debug your code as normal and allow the application to terminate.  When 
    execution terminates select the "Profile" window.  Notice that call graph
    information was found.

    Select the "Dynamic Call Graph" icon in the tool bar of the "Profile"
    window.  A function level call graph will be displayed based on the
    run-time characteristics of the application.

    You may also view other reports from this window.

    Refer to the MULTI documentation for more information on profiling.
