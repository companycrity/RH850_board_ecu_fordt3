<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><html><head><META http-equiv="Content-Type" content="text/html; charset=UTF-8"><title>GHS Project Component Documentation</title></head><body>

<div id="multi.mpm.top_project">
This is the top-most file in the project hierarchy.  Some settings are only
allowed in the Top Project: the project Build Target, Build Macro definitions,
and a list of environment variables to import.  Like other project files,
it can contain programs, libraries, and other project files.  
</div>
<hr>

<div id="multi.mpm.project">
A general purpose container used to group programs, libraries, source code,
and other projects.
</div>
<hr>

<div id="multi.mpm.target_resources">
This project contains information specific to the operating system and target
board used for your project.<br><br>
By default, all executables you create within your Top Project share one
target resources project.  This allows you to make modifications in one place
(for example, altering a Linker Directives File), and to see the corresponding
changes in all of your executables.
</div>
<hr>

<div id="multi.mpm.selectone">
Project file that contains multiple source files, only one that is used in the
build. These projects are generally used for multiple architecture hierarchies.
</div>
<hr>

<div id="multi.mpm.autoinclude">
A container for grouping files which are automatically pulled in from a
specified directory.
</div>
<hr>

<div id="multi.mpm.ada_source">
Ada source code.
</div>
<hr>

<div id="multi.mpm.c_source">
C source code.
</div>
<hr>

<div id="multi.mpm.cxx_source">
C++ source code.
</div>
<hr>

<div id="multi.mpm.header_file">
C or C++ header file.
</div>
<hr>

<div id="multi.mpm.text_file">
Generic text file.
</div>
<hr>

<div id="multi.mpm.rc_script">
MULTI command script.
</div>
<hr>

<div id="multi.mpm.target_connections">
Target configuration information for connecting to a simulator or to your
target board via appropriate debug servers.
</div>
<hr>

<div id="multi.mpm.board_setup_script">
Setup script for initializing your target board.
</div>
<hr>

<div id="multi.mpm.linker_directives">
Linker directives file that contains a memory map for the target board and a
section map for the program.
</div>
<hr>

<div id="multi.mpm.memory_description">
Memory layout for your target board.  This file is used by the Debugger to
determine properties of various regions of memory.
</div>
<hr>

<div id="multi.mpm.prebuilt_library">
Library file of object modules.  These are typically used to specify binary
libraries when there is no source available.
</div>
<hr>


<div id="multi.mpm.basic_debug_demo">
A quick tour of the MULTI Debugger.
</div>
<hr>

<div id="multi.mpm.double_check_demo">
This example demonstrates the capabilities of the MULTI source analysis tool,
DoubleCheck.  A library of C and C++ functions containing real bugs from
production code is built with DoubleCheck enabled.  Build this demo to
see how DoubleCheck can help find bugs in your code.
</div>
<hr>

<div id="multi.mpm.catalog_demo">
This demonstration will give you an overview of the MULTI Debugger and its
many debugging capabilities including:<br>
<li>Runtime Error Checking</li>
<li>Mixed-Language Debugging</li>
<li>Data Display</li>
<li>Using Advanced Breakpoints</li>
<li>Using Cross Reference Information</li>
</div>
<hr>

<div id="multi.mpm.editor_xref_demo">
This example demonstrates what cross-referencing capabilities will do to
make editing source code faster and easier.  See how the MULTI Editor uses
information from your source files to auto-complete symbol names, quickly
jump to function definitions, and fill in function argument information.
</div>
</hr>

<div id="multi.mpm.coverage_demo">
This example will show you how to use the MULTI Debugger's code coverage 
analysis capabilities to find dead spots in your code.
</div>
</hr>

<div id="multi.mpm.demo_custom_filetypes">
This example project demonstrates the custom file type features of the MULTI
Project Manager.
</div>
</hr>

<div id="multi.mpm.custom_rtec_demo">
This example demonstrates how to set up a run-time error handler which will
execute a user-defined action when your program encounters a run-time error.
</div>
</hr

<div id="multi.mpm.dsp_demo">
This example demonstrates DSP visualization using MATLAB and the MULTI Debugger.
</div>
</hr>

<div id="multi.mpm.ddv_demo">
This example demonstrates how you can use the MULTI Debugger to graph data
values.  This demo uses a C program.
</div>
</hr>

<div id="multi.mpm.ddv_cxx_demo">
This example demonstrates how you can use the MULTI Debugger to graph data
values.  This demo uses a C++ program.
</div>
</hr>

<div id="multi.mpm.memleak_demo">
This example demonstrates the memory leak detection capabilities of the MULTI
Debugger.
</div>
</hr>

<div id="multi.mpm.rtec_demo">
This example demonstrates the built-in run-time error checking capabilities
of the MULTI Debugger.
</div>
</hr>

<div id="multi.mpm.stl_vis_demo">
This example demonstrates the MULTI Debugger's ability to debug objects created
from the C++ Standard Template Library.
</div>
</hr>

<div id="multi.mpm.ddv_tree_demo">
This example shows how structures using pointers to link containers of data
can be displayed by the MULTI Debugger.
</div>
</hr>

<div id="multi.mpm.libstartup">
Includes customizable source code for the Green Hills startup code library libstartup.a.
</div>
<hr>

<div id="multi.mpm.libsys">
Includes customizable source code for the Green Hills system library libsys.a.
</div>
<hr>

<div id="multi.mpm.libboardinit">
Includes customizable source code for the board initialization library libboardinit.a.<br><br>
This library provides basic memory and peripheral initialization code to allow your program to be built for ROM or flash. It may also provide serial port code that allows standard I/O functions to use the serial port and support for target-based timer profiling.<br><br>
Programs built with the board initialization library should be run on hardware targets. They may not work on a simulated target.
</div>
<hr>

<div id="multi.mpm.demo_pathanalyzer">
This example demonstrates using the PathAnalyzer with the MULTI TimeMachine
Debugger.
</div>
<hr>

<div id="multi.mpm.demo_pathanalyzer_advanced">
This example demonstrates the PathAnalyzer and several other tools in the 
MULTI TimeMachine Debugger. <br><br>
NOTE: This demo must be used with a datatrace-capable and gap-less trace collection
interface.
</div>
<hr>

<div id="multi.mpm.timing_demo">
This example demonstrates profiling using performance timing information.
</div>
<hr>

<div id="multi.mpm.fork_debug_demo">
This example demonstrates using the MULTI Debugger to attach to and debug a
child process immediately after it is created using the fork system call.
</div>
<hr>

<div id="multi.mpm.exec_debug_demo">
This example demonstrates using the MULTI Debugger to attach to and debug a
child process immediately after it is created using the exec system call.
</div>
<hr>

<div id="multi.mpm.thread_debug_demo">
This example demonstrates debugging a multi-threaded program in the MULTI
Debugger.
</div>
<hr>

<div id="multi.mpm.profile_demo">
This example demonstrates the profiling capabilities of the MULTI IDE.
</div>
<hr>

