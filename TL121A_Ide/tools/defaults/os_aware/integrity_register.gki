# The file defines register maintained in INTEGRITY xframe.
#
# In the new INTEGRITY kernels (4.0 and 5.0), the register mapping table
# is available from the kernel itself if the kernel is not compiled with
# MIN_API defined.
#
# The information kept here is not always the same as defined in
# INTEGRITY kernel.
#
# For example, on PPC, the third entry is usually different from INTEGRITY
# kernel (both 4.0 and 5.0). If you look at the INTEGRITY kernel code, you 
# will find that the register mapping varies depending on the combination 
# of some macros.

%if (_TARGET_FAMILY == PPC_POWER)

Register {
    0 { offset=20 }	# PPC_XFRAME_R0		[ r0] Volatile
    1 { offset=6 }	# PPC_XFRAME_SP		[ r1] Stack pointer
    2 { offset=56 }	# PPC_XREG_R2		[ r2] .sdata2
    3 { offset=10 }	# PPC_XFRAME_R3		[ r3] a0 and v0 (r3..r12 are contig)
    4 { offset=11 }	# PPC_XFRAME_R4		[ r4] a1 and v1
    5 { offset=12 }	# PPC_XFRAME_R5		[ r5] a2
    6 { offset=13 }	# PPC_XFRAME_R6		[ r6] a3
    7 { offset=14 }	# PPC_XFRAME_R7		[ r7] a4
    8 { offset=15 }	# PPC_XFRAME_R8		[ r8] a5
    9 { offset=16 }	# PPC_XFRAME_R9		[ r9] a6
    10 { offset=17 }	# PPC_XFRAME_R10		[r10] a7
    11 { offset=18 }	# PPC_XFRAME_R11		[r11]
    12 { offset=19 }	# PPC_XFRAME_R12		[r12]
    13 { offset=57 }	# PPC_XREG_R13		[r13] .sdabase (r13..r31 are contig)
    14 { offset=58 }	# PPC_XREG_R14		[r14]
    15 { offset=59 }	# PPC_XREG_R15		[r15]
    16 { offset=60 }	# PPC_XREG_R16		[r16]
    17 { offset=61 }	# PPC_XREG_R17		[r17]
    18 { offset=62 }	# PPC_XREG_R18		[r18]
    19 { offset=63 }	# PPC_XREG_R19		[r19]
    20 { offset=64 }	# PPC_XREG_R20		[r20]
    21 { offset=65 }	# PPC_XREG_R21		[r21]
    22 { offset=66 }	# PPC_XREG_R22		[r22]
    23 { offset=67 }	# PPC_XREG_R23		[r23]
    24 { offset=68 }	# PPC_XREG_R24		[r24]
    25 { offset=69 }	# PPC_XREG_R25		[r25]
    26 { offset=70 }	# PPC_XREG_R26		[r26]
    27 { offset=71 }	# PPC_XREG_R27		[r27]
    28 { offset=72 }	# PPC_XREG_R28		[r28]
    29 { offset=73 }	# PPC_XREG_R29		[r29]
    30 { offset=74 }	# PPC_XREG_R30		[r30]
    31 { offset=75 }	# PPC_XREG_R31		[r31]
    32 { offset=26 }	# PPC_XFRAME_F0		f0..f31 are contiguous (64-bits each)
    33 { offset=27 }	# PPC_XFRAME_F0+1		f0..f31 are contiguous (64-bits each)
    34 { offset=28 }	# PPC_XFRAME_F1
    35 { offset=29 }	# PPC_XFRAME_F1+1
    36 { offset=30 }	# PPC_XFRAME_F2
    37 { offset=31 }	# PPC_XFRAME_F2+1
    38 { offset=32 }	# PPC_XFRAME_F3
    39 { offset=33 }	# PPC_XFRAME_F3+1
    40 { offset=34 }	# PPC_XFRAME_F4
    41 { offset=35 }	# PPC_XFRAME_F4+1
    42 { offset=36 }	# PPC_XFRAME_F5
    43 { offset=37 }	# PPC_XFRAME_F5+1
    44 { offset=38 }	# PPC_XFRAME_F6
    45 { offset=39 }	# PPC_XFRAME_F6+1
    46 { offset=40 }	# PPC_XFRAME_F7
    47 { offset=41 }	# PPC_XFRAME_F7+1
    48 { offset=42 }	# PPC_XFRAME_F8
    49 { offset=43 }	# PPC_XFRAME_F8+1
    50 { offset=44 }	# PPC_XFRAME_F9
    51 { offset=45 }	# PPC_XFRAME_F9+1
    52 { offset=46 }	# PPC_XFRAME_F10
    53 { offset=47 }	# PPC_XFRAME_F10+1
    54 { offset=48 }	# PPC_XFRAME_F11
    55 { offset=49 }	# PPC_XFRAME_F11+1
    56 { offset=50 }	# PPC_XFRAME_F12
    57 { offset=51 }	# PPC_XFRAME_F12+1
    58 { offset=52 }	# PPC_XFRAME_F13
    59 { offset=53 }	# PPC_XFRAME_F13+1
    60 { offset=76 }	# PPC_XFPR_F14
    61 { offset=77 }	# PPC_XFPR_F14+1
    62 { offset=78 }	# PPC_XFPR_F15
    63 { offset=79 }	# PPC_XFPR_F15+1
    64 { offset=80 }	# PPC_XFPR_F16
    65 { offset=81 }	# PPC_XFPR_F16+1
    66 { offset=82 }	# PPC_XFPR_F17
    67 { offset=83 }	# PPC_XFPR_F17+1
    68 { offset=84 }	# PPC_XFPR_F18
    69 { offset=85 }	# PPC_XFPR_F18+1
    70 { offset=86 }	# PPC_XFPR_F19
    71 { offset=87 }	# PPC_XFPR_F19+1
    72 { offset=88 }	# PPC_XFPR_F20
    73 { offset=89 }	# PPC_XFPR_F20+1
    74 { offset=90 }	# PPC_XFPR_F21
    75 { offset=91 }	# PPC_XFPR_F21+1
    76 { offset=92 }	# PPC_XFPR_F22
    77 { offset=93 }	# PPC_XFPR_F22+1
    78 { offset=94 }	# PPC_XFPR_F23
    79 { offset=95 }	# PPC_XFPR_F23+1
    80 { offset=96 }	# PPC_XFPR_F24
    81 { offset=97 }	# PPC_XFPR_F24+1
    82 { offset=98 }	# PPC_XFPR_F25
    83 { offset=99 }	# PPC_XFPR_F25+1
    84 { offset=100 }	# PPC_XFPR_F26
    85 { offset=101 }	# PPC_XFPR_F26+1
    86 { offset=102 }	# PPC_XFPR_F27
    87 { offset=103 }	# PPC_XFPR_F27+1
    88 { offset=104 }	# PPC_XFPR_F28
    89 { offset=105 }	# PPC_XFPR_F28+1
    90 { offset=106 }	# PPC_XFPR_F29
    91 { offset=107 }	# PPC_XFPR_F29+1
    92 { offset=108 }	# PPC_XFPR_F30
    93 { offset=109 }	# PPC_XFPR_F30+1
    94 { offset=110 }	# PPC_XFPR_F31
    95 { offset=111 }	# PPC_XFPR_F31+1
    96 { offset=7 }	# PPC_XFRAME_PC		Program Counter (SRR0)
    97 { offset=21 }	# PPC_XFRAME_CR		Condition Register
    98 { offset=9 }	# PPC_XFRAME_LR		[SPR 8] Link Register
    99 { offset=23 }	# PPC_XFRAME_CTR		[SPR 9] Count Register
    100 { offset=22 }	# PPC_XFRAME_XER		[SPR 1] Fixed Point Exception
    101 { offset=54 }	# PPC_XFRAME_FPSCR		FPSCR is 32-bits but needs 64 for store


    # Special cases
    # nf_msr
    167 { offset=8 }	# PPC_XFRAME_MSR		Machine State Register (SRR1)
}

%elif (_TARGET_FAMILY == R3000)

Register {
    1 { offset=12 }	# MIPS_XFRAME_R1		[ $1] at
    2 { offset=13 }	# MIPS_XFRAME_R2		[ $2] v0
    3 { offset=14 }	# MIPS_XFRAME_R3		[ $3] v1
    4 { offset=15 }	# MIPS_XFRAME_R4		[ $3] v1
    5 { offset=16 }	# MIPS_XFRAME_R5		[ $3] v1
    6 { offset=17 }	# MIPS_XFRAME_R6		[ $8] t0
    7 { offset=18 }	# MIPS_XFRAME_R7		[ $8] t0
    8 { offset=19 }	# MIPS_XFRAME_R8		[ $8] t0
    9 { offset=20 }	# MIPS_XFRAME_R9		[ $9] t1
    10 { offset=21 }	# MIPS_XFRAME_R10		[$10] t2
    11 { offset=22 }	# MIPS_XFRAME_R11		[$11] t3
    12 { offset=23 }	# MIPS_XFRAME_R12		[$12] t4
    13 { offset=24 }	# MIPS_XFRAME_R13		[$13] t5
    14 { offset=25 }	# MIPS_XFRAME_R14		[$14] t6
    15 { offset=26 }	# MIPS_XFRAME_R15		[$15] t7
    16 { offset=32 }	# MIPS_XREG_R16		[$16] s0
    17 { offset=33 }	# MIPS_XREG_R17		[$17] s1
    18 { offset=34 }	# MIPS_XREG_R18		[$18] s2
    19 { offset=35 }	# MIPS_XREG_R19		[$19] s3
    20 { offset=36 }	# MIPS_XREG_R20		[$20] s4
    21 { offset=37 }	# MIPS_XREG_R21		[$21] s5
    22 { offset=38 }	# MIPS_XREG_R22		[$22] s6
    23 { offset=39 }	# MIPS_XREG_R23		[$23] s7
    24 { offset=27 }	# MIPS_XFRAME_R24		[$24] t8
    25 { offset=28 }	# MIPS_XFRAME_R25		[$25] t9
    28 { offset=40 }	# MIPS_XREG_R28		[$28] gp
    29 { offset=6 }	# MIPS_XFRAME_SP		[$29] Stack pointer
    30 { offset=41 }	# MIPS_XREG_R30		[$30] s8
    31 { offset=8 }	# MIPS_XFRAME_RA		[$31] Return address
    32 { offset=42 }	# MIPS_XFPR_F0		f0..f31 are contiguous (32-bits each)
    33 { offset=43 }	# MIPS_XFPR_F1
    34 { offset=44 }	# MIPS_XFPR_F2
    35 { offset=45 }	# MIPS_XFPR_F3
    36 { offset=46 }	# MIPS_XFPR_F4
    37 { offset=47 }	# MIPS_XFPR_F5
    38 { offset=48 }	# MIPS_XFPR_F6
    39 { offset=49 }	# MIPS_XFPR_F7
    40 { offset=50 }	# MIPS_XFPR_F8
    41 { offset=51 }	# MIPS_XFPR_F9
    42 { offset=52 }	# MIPS_XFPR_F10
    43 { offset=53 }	# MIPS_XFPR_F11
    44 { offset=54 }	# MIPS_XFPR_F12
    45 { offset=55 }	# MIPS_XFPR_F13
    46 { offset=56 }	# MIPS_XFPR_F14
    47 { offset=57 }	# MIPS_XFPR_F15
    48 { offset=58 }	# MIPS_XFPR_F16
    49 { offset=59 }	# MIPS_XFPR_F17
    50 { offset=60 }	# MIPS_XFPR_F18
    51 { offset=61 }	# MIPS_XFPR_F19
    52 { offset=62 }	# MIPS_XFPR_F20
    53 { offset=63 }	# MIPS_XFPR_F21
    54 { offset=64 }	# MIPS_XFPR_F22
    55 { offset=65 }	# MIPS_XFPR_F23
    56 { offset=66 }	# MIPS_XFPR_F24
    57 { offset=67 }	# MIPS_XFPR_F25
    58 { offset=68 }	# MIPS_XFPR_F26
    59 { offset=69 }	# MIPS_XFPR_F27
    60 { offset=70 }	# MIPS_XFPR_F28
    61 { offset=71 }	# MIPS_XFPR_F29
    62 { offset=72 }	# MIPS_XFPR_F30
    63 { offset=73 }	# MIPS_XFPR_F31

    # Special cases
    96 { offset=7 }	# MIPS_XFRAME_PC		Program Counter (EPC)
    98 { offset=30 }	# MIPS_XFRAME_HI		[$hi]
    99 { offset=31 }	# MIPS_XFRAME_LO		[$lo]
    100 { offset=74 }	# MIPS_XFPR_FPSCR		FPSCR is 32-bits
    118 { offset=7 }	# MIPS_XFRAME_PC		Program Counter (EPC)
    
    # Macros which are totally not used:
    # MIPS_XFRAME_ADDR	3
    # MIPS_XFRAME_CAUSE	10		Exception cause
    # MIPS_XFRAME_DEEP	2
    # MIPS_XFRAME_KSP	5
    # MIPS_XFRAME_MASK	4
    # MIPS_XFRAME_NEXT	1
    # MIPS_XFRAME_PREV	0
    # MIPS_XFRAME_STATUS	9		Status
    # MIPS_XFRAME_VECT	11
}

%elif (_TARGET_FAMILY == ARM_7)

Register {
    0 { offset=0 }	# ARM_XFRAME_R0		[r0] First argument register
    1 { offset=1 }	# ARM_XFRAME_R1		[r1] Second argument register
    2 { offset=2 }	# ARM_XFRAME_R2		[r2] Third argument register
    3 { offset=3 }	# ARM_XFRAME_R3		[r3] Fourth argument register
    4 { offset=14 }	# ARM_XREG_R4		[r4]
    5 { offset=15 }	# ARM_XREG_R5		[r5]
    6 { offset=16 }	# ARM_XREG_R6		[r6]
    7 { offset=17 }	# ARM_XREG_R7		[r7]
    8 { offset=18 }	# ARM_XREG_R8		[r8]
    9 { offset=19 }	# ARM_XREG_R9		[r9]
    10 { offset=20 }	# ARM_XREG_R10		[r10]
    11 { offset=21 }	# ARM_XREG_R11		[r11]
    12 { offset=4 }	# ARM_XFRAME_R12		[r12]
    13 { offset=6 }	# ARM_XFRAME_SP		[r13] Stack pointer
    14 { offset=5 }	# ARM_XFRAME_LR		[r14] Link register
    15 { offset=7 }	# ARM_XFRAME_PC		[r15] Program counter
    40 { offset=8 }	# ARM_XFRAME_CPSR		Current program status register
    175 { offset=22 }	# ARM_XREG_ACC0_LO		Low 32 bits of XScale accumulator
    176 { offset=23 }	# ARM_XREG_ACC0_HI		High 8 bits of XScale accumulator

    # Macros which are totally not used:
    # ARM_XFRAME_ADDR	12		Address of goto target label
    # ARM_XFRAME_DEEP	11		Nesting level
    # ARM_XFRAME_NEXT	10		Next XFRAME on stack
    # ARM_XFRAME_PREV	9		Previous XFRAME on stack
    # ARM_XFRAME_VECT	13		Exception vector
}

%elif (_TARGET_FAMILY == M68_68000)


%elif (_TARGET_FAMILY == BF_ADI_532)

Register {
    0 { offset=12 }	# BF_XFRAME_R0		[r0] First argument register
    1 { offset=13 }	# BF_XFRAME_R1		[r1] Second argument register
    2 { offset=14 }	# BF_XFRAME_R2		[r2] Third argument register
    3 { offset=15 }	# BF_XFRAME_R3		[r3] volatile register
    4 { offset=47 }	# BF_XREG_R4		[r4]
    5 { offset=48 }	# BF_XREG_R5		[r5]
    6 { offset=49 }	# BF_XREG_R6		[r6]
    7 { offset=50 }	# BF_XREG_R7		[r7]
    8 { offset=16 }	# BF_XFRAME_P0		[P0] volatile register
    9 { offset=17 }	# BF_XFRAME_P1		[P1] volatile register
    10 { offset=18 }	# BF_XFRAME_P2		[P2] volatile register
    11 { offset=51 }	# BF_XREG_P3		[r8]
    12 { offset=52 }	# BF_XREG_P4
    13 { offset=53 }	# BF_XREG_P5		[r9]
    14 { offset=9 }	# BF_XFRAME_SP		[P7] Stack pointer
    15 { offset=8 }	# BF_XFRAME_FP		[P6] Frame pointer
    16 { offset=10 }	# BF_XFRAME_PC		[PC] Program counter
    17 { offset=11 }	# BF_XFRAME_RETS		[RETS] Return address
    18 { offset=28 }	# BF_XFRAME_I0		[I0] Index register 0
    19 { offset=29 }	# BF_XFRAME_I1		[I1] Index register 1
    20 { offset=30 }	# BF_XFRAME_I2		[I2] Index register 2
    21 { offset=31 }	# BF_XFRAME_I3		[I2] Index register 2
    22 { offset=32 }	# BF_XFRAME_M0		[M0] Modify register 0
    23 { offset=33 }	# BF_XFRAME_M1		[M1] Modify register 1
    24 { offset=34 }	# BF_XFRAME_M2		[M2] Modify register 2
    25 { offset=35 }	# BF_XFRAME_M3		[M2] Modify register 2
    26 { offset=24 }	# BF_XFRAME_B0		[B0] Base register 0
    27 { offset=25 }	# BF_XFRAME_B1		[B1] Base register 1
    28 { offset=26 }	# BF_XFRAME_B2		[B2] Base register 2
    29 { offset=27 }	# BF_XFRAME_B3		[B2] Base register 2
    30 { offset=36 }	# BF_XFRAME_L0		[L0] Length register 0
    31 { offset=37 }	# BF_XFRAME_L1		[L1] Length register 1
    32 { offset=38 }	# BF_XFRAME_L2		[L2] Length register 2
    33 { offset=39 }	# BF_XFRAME_L3		[L2] Length register 2
    34 { offset=21 }	# BF_XFRAME_A0W		[A0.w] Accumulator 0, 32 bits
    35 { offset=20 }	# BF_XFRAME_A0X		[A0.x] Accumulator 0, 32 bits
    36 { offset=23 }	# BF_XFRAME_A1W		[A1.w] Accumulator 1, 32 bits
    37 { offset=22 }	# BF_XFRAME_A1X		[A1.x] Accumulator 1, 32 bits
    38 { offset=19 }	# BF_XFRAME_ASTAT		[ASTAT] Arith status register
    39 { offset=44 }	# BF_XFRAME_LC0		[LC0] Loop count register 0
    40 { offset=42 }	# BF_XFRAME_LT0		[LT0] Loop top register 0
    41 { offset=40 }	# BF_XFRAME_LB0		[LB0] Loop bottom register 0
    42 { offset=45 }	# BF_XFRAME_LC1		[LC1] Loop count register 1
    43 { offset=43 }	# BF_XFRAME_LT1		[LT1] Loop top register 1
    44 { offset=41 }	# BF_XFRAME_LB1		[LB1] Loop bottom register 1
    55 { offset=46 }	# BF_XREG_TLS

    # Macros which are totally not used:
    # BF_XFRAME_ADDR	3		Address of goto target label
    # BF_XFRAME_DEEP	2		Nesting level
    # BF_XFRAME_KSP	6
    # BF_XFRAME_MASK	4
    # BF_XFRAME_NEXT	1		Next XFRAME on stack
    # BF_XFRAME_PREV	0		Previous XFRAME on stack
    # BF_XFRAME_VECT	7		Exception vector
    # BF_XFRAME_VIRT	5
}

%elif (_TARGET_FAMILY == X86_386)

Register {
    0 { offset=25 }	# X86_XREG_EDI == X86_TSS_EDI + X86_XREG_BEGINTSS
    4 { offset=24 }	# X86_XREG_ESI == X86_TSS_ESI + X86_XREG_BEGINTSS
    8 { offset=23 }	# X86_XREG_EBP == X86_TSS_EBP + X86_XREG_BEGINTSS
    12 { offset=21 }	# X86_XREG_EBX == X86_TSS_EBX + X86_XREG_BEGINTSS
    16 { offset=20 }	# X86_XREG_EDX == X86_TSS_EDX + X86_XREG_BEGINTSS
    20 { offset=19 }	# X86_XREG_ECX == X86_TSS_ECX + X86_XREG_BEGINTSS
    24 { offset=18 }	# X86_XREG_EAX == X86_TSS_EAX + X86_XREG_BEGINTSS
    32 { offset=16 }	# X86_XREG_PC == X86_TSS_PC + X86_XREG_BEGINTSS
    36 { offset=27 }	# X86_XREG_CS == X86_TSS_CS + X86_XREG_BEGINTSS
    40 { offset=17 }	# X86_XREG_EFLAGS == X86_TSS_EFLAGS + X86_XREG_BEGINTSS
    44 { offset=22 }	# X86_XREG_ESP == X86_TSS_ESP + X86_XREG_BEGINTSS
    48 { offset=28 }	# X86_XREG_SS == X86_TSS_SS + X86_XREG_BEGINTSS
    52 { offset=26 }	# X86_XREG_ES == X86_TSS_ES + X86_XREG_BEGINTSS
    56 { offset=29 }	# X86_XREG_DS == X86_TSS_DS + X86_XREG_BEGINTSS
    60 { offset=30 }	# X86_XREG_FS == X86_TSS_FS + X86_XREG_BEGINTSS
    64 { offset=31 }	# X86_XREG_GS == X86_TSS_GS + X86_XREG_BEGINTSS

    # Macros which are totally not used:
    # ASP_NUMBEROFREGISTERS == X86_XREG_FPSTATE_PACKED19 + 1	67
    # X86_XFRAME_ADDR	4		Return address from ExceptionHandler
    # X86_XFRAME_ERRCODE	5		Error code (if appropriate)
    # X86_XFRAME_NEXT	1		Next xframe on Xstack
    # X86_XFRAME_PREV	0		Previous xframe on Xstack
    # X86_XFRAME_VECT	3		Exception vector
    # X86_XFRAME_WASERRCODE	6
    # X86_XREG_CR3 == X86_TSS_CR3 + X86_XREG_BEGINTSS	15
    # X86_XREG_ESP0 == X86_TSS_ESP0 + X86_XREG_BEGINTSS	9
    # X86_XREG_ESP1 == X86_TSS_ESP1 + X86_XREG_BEGINTSS	11
    # X86_XREG_ESP2 == X86_TSS_ESP2 + X86_XREG_BEGINTSS	13
    # X86_XREG_FPSTATE_CONTROL == X86_FPSTATE_CONTROL + X86_XREG_BEGINFPSTATE	40
    # X86_XREG_FPSTATE_CSOPCODE == X86_FPSTATE_CSOPCODE + X86_XREG_BEGINFPSTATE	44
    # X86_XREG_FPSTATE_OPERAND == X86_FPSTATE_OPERAND + X86_XREG_BEGINFPSTATE	45
    # X86_XREG_FPSTATE_OPERANDSELECTOR == X86_FPSTATE_OPERANDSELECTOR + X86_XREG_BEGINFPSTATE	46
    # X86_XREG_FPSTATE_PACKED0 == X86_FPSTATE_PACKED0 + X86_XREG_BEGINFPSTATE	47
    # X86_XREG_FPSTATE_PACKED1 == X86_FPSTATE_PACKED1 + X86_XREG_BEGINFPSTATE	48
    # X86_XREG_FPSTATE_PACKED10 == X86_FPSTATE_PACKED10 + X86_XREG_BEGINFPSTATE	57
    # X86_XREG_FPSTATE_PACKED11 == X86_FPSTATE_PACKED11 + X86_XREG_BEGINFPSTATE	58
    # X86_XREG_FPSTATE_PACKED12 == X86_FPSTATE_PACKED12 + X86_XREG_BEGINFPSTATE	59
    # X86_XREG_FPSTATE_PACKED13 == X86_FPSTATE_PACKED13 + X86_XREG_BEGINFPSTATE	60
    # X86_XREG_FPSTATE_PACKED14 == X86_FPSTATE_PACKED14 + X86_XREG_BEGINFPSTATE	61
    # X86_XREG_FPSTATE_PACKED15 == X86_FPSTATE_PACKED15 + X86_XREG_BEGINFPSTATE	62
    # X86_XREG_FPSTATE_PACKED16 == X86_FPSTATE_PACKED16 + X86_XREG_BEGINFPSTATE	63
    # X86_XREG_FPSTATE_PACKED17 == X86_FPSTATE_PACKED17 + X86_XREG_BEGINFPSTATE	64
    # X86_XREG_FPSTATE_PACKED18 == X86_FPSTATE_PACKED18 + X86_XREG_BEGINFPSTATE	65
    # X86_XREG_FPSTATE_PACKED2 == X86_FPSTATE_PACKED2 + X86_XREG_BEGINFPSTATE	49
    # X86_XREG_FPSTATE_PACKED3 == X86_FPSTATE_PACKED3 + X86_XREG_BEGINFPSTATE	50
    # X86_XREG_FPSTATE_PACKED4 == X86_FPSTATE_PACKED4 + X86_XREG_BEGINFPSTATE	51
    # X86_XREG_FPSTATE_PACKED5 == X86_FPSTATE_PACKED5 + X86_XREG_BEGINFPSTATE	52
    # X86_XREG_FPSTATE_PACKED6 == X86_FPSTATE_PACKED6 + X86_XREG_BEGINFPSTATE	53
    # X86_XREG_FPSTATE_PACKED7 == X86_FPSTATE_PACKED7 + X86_XREG_BEGINFPSTATE	54
    # X86_XREG_FPSTATE_PACKED8 == X86_FPSTATE_PACKED8 + X86_XREG_BEGINFPSTATE	55
    # X86_XREG_FPSTATE_PACKED9 == X86_FPSTATE_PACKED9 + X86_XREG_BEGINFPSTATE	56
    # X86_XREG_FPSTATE_PC == X86_FPSTATE_PC + X86_XREG_BEGINFPSTATE	43
    # X86_XREG_FPSTATE_STATUS == X86_FPSTATE_STATUS + X86_XREG_BEGINFPSTATE	41
    # X86_XREG_FPSTATE_TAG == X86_FPSTATE_TAG + X86_XREG_BEGINFPSTATE	42
    # X86_XREG_LDT == X86_TSS_LDT + X86_XREG_BEGINTSS	32
    # X86_XREG_LINK == X86_TSS_LINK + X86_XREG_BEGINTSS	8
    # X86_XREG_SS0 == X86_TSS_SS0 + X86_XREG_BEGINTSS	10
    # X86_XREG_SS1 == X86_TSS_SS1 + X86_XREG_BEGINTSS	12
    # X86_XREG_SS2 == X86_TSS_SS2 + X86_XREG_BEGINTSS	14
    # X86_XREG_TLS	7		Fake register -- we use a segment

    # Macros which are used in expression but not in register table:
    # X86_FPSTATE_CONTROL	0
    # X86_FPSTATE_CSOPCODE	4
    # X86_FPSTATE_OPERAND	5
    # X86_FPSTATE_OPERANDSELECTOR	6
    # X86_FPSTATE_PACKED0	7
    # X86_FPSTATE_PACKED1	8
    # X86_FPSTATE_PACKED10	17
    # X86_FPSTATE_PACKED11	18
    # X86_FPSTATE_PACKED12	19
    # X86_FPSTATE_PACKED13	20
    # X86_FPSTATE_PACKED14	21
    # X86_FPSTATE_PACKED15	22
    # X86_FPSTATE_PACKED16	23
    # X86_FPSTATE_PACKED17	24
    # X86_FPSTATE_PACKED18	25
    # X86_FPSTATE_PACKED19	26
    # X86_FPSTATE_PACKED2	9
    # X86_FPSTATE_PACKED3	10
    # X86_FPSTATE_PACKED4	11
    # X86_FPSTATE_PACKED5	12
    # X86_FPSTATE_PACKED6	13
    # X86_FPSTATE_PACKED7	14
    # X86_FPSTATE_PACKED8	15
    # X86_FPSTATE_PACKED9	16
    # X86_FPSTATE_PC	3
    # X86_FPSTATE_STATUS	1
    # X86_FPSTATE_TAG	2
    # X86_TSS_CR3	7
    # X86_TSS_CS	19
    # X86_TSS_DS	21
    # X86_TSS_EAX	10
    # X86_TSS_EBP	15
    # X86_TSS_EBX	13
    # X86_TSS_ECX	11
    # X86_TSS_EDI	17
    # X86_TSS_EDX	12
    # X86_TSS_EFLAGS	9
    # X86_TSS_ES	18
    # X86_TSS_ESI	16
    # X86_TSS_ESP	14
    # X86_TSS_ESP0	1
    # X86_TSS_ESP1	3
    # X86_TSS_ESP2	5
    # X86_TSS_FS	22
    # X86_TSS_GS	23
    # X86_TSS_IO	25
    # X86_TSS_LDT	24
    # X86_TSS_LINK	0
    # X86_TSS_PC	8
    # X86_TSS_SS	20
    # X86_TSS_SS0	2
    # X86_TSS_SS1	4
    # X86_TSS_SS2	6
    # X86_XREG_BEGINFPSTATE == X86_XREG_TLSDHI + 1	40
    # X86_XREG_BEGINTSS	8		This is here to allow accesses to a
    # X86_XREG_FPSTATE_PACKED19 == X86_FPSTATE_PACKED19 + X86_XREG_BEGINFPSTATE	66
    # X86_XREG_IO == X86_TSS_IO + X86_XREG_BEGINTSS	33
    # X86_XREG_LDTDHI == X86_XREG_LDTDLO + 1	37
    # X86_XREG_LDTDLO == X86_XREG_TSDHI + 1	36		LDT descriptor
    # X86_XREG_TLSDHI == X86_XREG_TLSDLO + 1	39
    # X86_XREG_TLSDLO == X86_XREG_LDTDHI + 1	38		TLS descriptor (LDT 0)
    # X86_XREG_TSDHI == X86_XREG_TSDLO + 1	35
    # X86_XREG_TSDLO == X86_XREG_IO + 1	34		TSS descriptor
}

%endif

